PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2 | void printDistinct ( int arr [ ], int n ) {
  unordered_set < int > s;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( s . find ( arr [ i ] ) == s . end ( ) ) {
      s . insert ( arr [ i ] );
      cout << arr [ i ] << " ";
    }
  }
}


CHECK_ROWS_MATRIX_CIRCULAR_ROTATIONS | bool isPermutedMatrix ( int mat [ MAX ] [ MAX ], int n ) {
  string str_cat = "";
  for ( int i = 0;
  i < n;
  i ++ ) str_cat = str_cat + "-" + to_string ( mat [ 0 ] [ i ] );
  str_cat = str_cat + str_cat;
  for ( int i = 1;
  i < n;
  i ++ ) {
    string curr_str = "";
    for ( int j = 0;
    j < n;
    j ++ ) curr_str = curr_str + "-" + to_string ( mat [ i ] [ j ] );
    if ( str_cat . find ( curr_str ) == string :: npos ) return false;
  }
  return true;
}


SUM_PAIRWISE_PRODUCTS | long long int findSum ( int n ) {
  long long int sum = 0;
  for ( int i = 1;
  i <= n;
  i ++ ) for ( int j = i;
  j <= n;
  j ++ ) sum = sum + i * j;
  return sum;
}


SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION | void printSorted ( int a, int b, int c ) {
  int get_max = max ( a, max ( b, c ) );
  int get_min = - max ( - a, max ( - b, - c ) );
  int get_mid = ( a + b + c ) - ( get_max + get_min );
  cout << get_min << " " << get_mid << " " << get_max;
}


PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2 | int factorial ( int n ) {
  return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 );
}


FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2 | int find_extra_element_index ( int arrA [ ], int arrB [ ], int n, int m ) {
  int extra_element = sum ( arrA, n ) - sum ( arrB, m );
  return indexOf ( arrA, extra_element, n );
}


SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THEM_1 | void printSubsequences ( int arr [ ], int n ) {
  unsigned int opsize = pow ( 2, n );
  for ( int counter = 1;
  counter < opsize;
  counter ++ ) {
    for ( int j = 0;
    j < n;
    j ++ ) {
      if ( counter & ( 1 << j ) ) cout << arr [ j ] << " ";
    }
    cout << endl;
  }
}


N_BONACCI_NUMBERS | void bonacciseries ( long n, int m ) {
  int a [ m ] = {
    0 };
    a [ n - 1 ] = 1;
    for ( int i = n;
    i < m;
    i ++ ) for ( int j = i - n;
    j < i;
    j ++ ) a [ i ] += a [ j ];
    for ( int i = 0;
    i < m;
    i ++ ) cout << a [ i ] << "  ";
  }
  

LOWER_CASE_UPPER_CASE_INTERESTING_FACT | string to_upper ( string & in ) {
  for ( int i = 0;
  i < in . length ( );
  i ++ ) if ( 'a' <= in [ i ] <= 'z' ) in [ i ] = in [ i ] - 'a' + 'A';
  return in;
}


PRINT_BRACKET_NUMBER | void printBracketNumber ( string exp, int n ) {
  int left_bnum = 1;
  stack < int > right_bnum;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( exp [ i ] == '(' ) {
      cout << left_bnum << " ";
      right_bnum . push ( left_bnum );
      left_bnum ++;
    }
    else if ( exp [ i ] == ')' ) {
      cout << right_bnum . top ( ) << " ";
      right_bnum . pop ( );
    }
  }
}


MAXIMUM_PRODUCT_OF_4_ADJACENT_ELEMENTS_IN_MATRIX | int FindMaxProduct ( int arr [ ] [ n ], int n ) {
  int max = 0, result;
  for ( int i = 0;
  i < n;
  i ++ ) {
    for ( int j = 0;
    j < n;
    j ++ ) {
      if ( ( j - 3 ) >= 0 ) {
        result = arr [ i ] [ j ] * arr [ i ] [ j - 1 ] * arr [ i ] [ j - 2 ] * arr [ i ] [ j - 3 ];
        if ( max < result ) max = result;
      }
      if ( ( i - 3 ) >= 0 ) {
        result = arr [ i ] [ j ] * arr [ i - 1 ] [ j ] * arr [ i - 2 ] [ j ] * arr [ i - 3 ] [ j ];
        if ( max < result ) max = result;
      }
      if ( ( i - 3 ) >= 0 && ( j - 3 ) >= 0 ) {
        result = arr [ i ] [ j ] * arr [ i - 1 ] [ j - 1 ] * arr [ i - 2 ] [ j - 2 ] * arr [ i - 3 ] [ j - 3 ];
        if ( max < result ) max = result;
      }
    }
  }
  return max;
}


LONGEST_SUBARRAY_SUM_DIVISIBLE_K | int longSubarrWthSumDivByK ( int arr [ ], int n, int k ) {
  unordered_map < int, int > um;
  int mod_arr [ n ], max = 0;
  int curr_sum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    curr_sum += arr [ i ];
    mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k;
  }
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( mod_arr [ i ] == 0 ) max = i + 1;
    else if ( um . find ( mod_arr [ i ] ) == um . end ( ) ) um [ mod_arr [ i ] ] = i;
    else if ( max < ( i - um [ mod_arr [ i ] ] ) ) max = i - um [ mod_arr [ i ] ];
  }
  return max;
}


CAESAR_CIPHER | string encrypt ( string text, int s ) {
  string result = "";
  for ( int i = 0;
  i < text . length ( );
  i ++ ) {
    if ( isupper ( text [ i ] ) ) result += char ( int ( text [ i ] + s - 65 ) % 26 + 65 );
    else result += char ( int ( text [ i ] + s - 97 ) % 26 + 97 );
  }
  return result;
}


SUBARRAYS_DISTINCT_ELEMENTS | int sumoflength ( int arr [ ], int n ) {
  unordered_set < int > s;
  int j = 0, ans = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    while ( j < n && s . find ( arr [ j ] ) == s . end ( ) ) {
      s . insert ( arr [ j ] );
      j ++;
    }
    ans += ( ( j - i ) * ( j - i + 1 ) ) / 2;
    s . erase ( arr [ i ] );
  }
  return ans;
}


K_TH_ELEMENT_TWO_SORTED_ARRAYS | int kth ( int arr1 [ ], int arr2 [ ], int m, int n, int k ) {
  int sorted1 [ m + n ];
  int i = 0, j = 0, d = 0;
  while ( i < m && j < n ) {
    if ( arr1 [ i ] < arr2 [ j ] ) sorted1 [ d ++ ] = arr1 [ i ++ ];
    else sorted1 [ d ++ ] = arr2 [ j ++ ];
  }
  while ( i < m ) sorted1 [ d ++ ] = arr1 [ i ++ ];
  while ( j < n ) sorted1 [ d ++ ] = arr2 [ j ++ ];
  return sorted1 [ k - 1 ];
}


REMOVE_CONSECUTIVE_DUPLICATES_STRING | void removeDuplicates ( char S [ ] ) {
  int n = strlen ( S );
  if ( n < 2 ) return;
  int j = 0;
  for ( int i = 1;
  i < n;
  i ++ ) {
    if ( S [ j ] != S [ i ] ) {
      j ++;
      S [ j ] = S [ i ];
    }
  }
  j ++;
  S [ j ] = '\0';
}


MAJORITY_ELEMENT | void findMajority ( int arr [ ], int n ) {
  int maxCount = 0;
  int index = - 1;
  for ( int i = 0;
  i < n;
  i ++ ) {
    int count = 0;
    for ( int j = 0;
    j < n;
    j ++ ) {
      if ( arr [ i ] == arr [ j ] ) count ++;
    }
    if ( count > maxCount ) {
      maxCount = count;
      index = i;
    }
  }
  if ( maxCount > n / 2 ) cout << arr [ index ] << endl;
  else cout << "No Majority Element" << endl;
}


FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1 | void myCopy ( char s1 [ ], char s2 [ ], int index = 0 ) {
  s2 [ index ] = s1 [ index ];
  if ( s1 [ index ] == '\0' ) return;
  myCopy ( s1, s2, index + 1 );
}


COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE_1 | int printCountDP ( int dist ) {
  int count [ dist + 1 ];
  count [ 0 ] = 1, count [ 1 ] = 1, count [ 2 ] = 2;
  for ( int i = 3;
  i <= dist;
  i ++ ) count [ i ] = count [ i - 1 ] + count [ i - 2 ] + count [ i - 3 ];
  return count [ dist ];
}


DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B | int discreteLogarithm ( int a, int b, int m ) {
  int n = ( int ) sqrt ( m ) + 1;
  int an = 1;
  for ( int i = 0;
  i < n;
  ++ i ) an = ( an * a ) % m;
  unordered_map < int, int > value;
  for ( int i = 1, cur = an;
  i <= n;
  ++ i ) {
    if ( ! value [ cur ] ) value [ cur ] = i;
    cur = ( cur * an ) % m;
  }
  for ( int i = 0, cur = b;
  i <= n;
  ++ i ) {
    if ( value [ cur ] ) {
      int ans = value [ cur ] * n - i;
      if ( ans < m ) return ans;
    }
    cur = ( cur * a ) % m;
  }
  return - 1;
}


CHANGE_BITS_CAN_MADE_ONE_FLIP_1 | bool isOneFlip ( string str ) {
  int sum = 0;
  int n = str . length ( );
  for ( int i = 0;
  i < n;
  i ++ ) sum += str [ i ] - '0';
  return ( sum == n - 1 || sum == 1 );
}


FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY | void findPair ( int arr [ ], int n ) {
  bool found = false;
  for ( int i = 0;
  i < n;
  i ++ ) {
    for ( int j = i + 1;
    j < n;
    j ++ ) {
      for ( int k = 0;
      k < n;
      k ++ ) {
        if ( arr [ i ] + arr [ j ] == arr [ k ] ) {
          cout << arr [ i ] << " " << arr [ j ] << endl;
          found = true;
        }
      }
    }
  }
  if ( found == false ) cout << "Not exist" << endl;
}


MODULAR_MULTIPLICATIVE_INVERSE_1_N | void modularInverse ( int n, int prime ) {
  int dp [ n + 1 ];
  dp [ 0 ] = dp [ 1 ] = 1;
  for ( int i = 2;
  i <= n;
  i ++ ) dp [ i ] = dp [ prime % i ] * ( prime - prime / i ) % prime;
  for ( int i = 1;
  i <= n;
  i ++ ) cout << dp [ i ] << ' ';
}


SHUFFLE_2N_INTEGERS_FORMAT_A1_B1_A2_B2_A3_B3_BN_WITHOUT_USING_EXTRA_SPACE_1 | void shufleArray ( int a [ ], int f, int l ) {
  if ( l > f ) {
    return;
  }
  if ( l - f == 1 ) return;
  int mid = ( f + l ) / 2;
  int temp = mid + 1;
  int mmid = ( f + mid ) / 2;
  for ( int i = mmid + 1;
  i <= mid;
  i ++ ) swap ( a [ i ], a [ temp ++ ] );
  shufleArray ( a, f, mid );
  shufleArray ( a, mid + 1, l );
}


N_TH_ROOT_NUMBER | double nthRoot ( int A, int N ) {
  double xPre = rand ( ) % 10;
  double eps = 1e - 3;
  double delX = INT_MAX;
  double xK;
  while ( delX > eps ) {
    xK = ( ( N - 1.0 ) * xPre + ( double ) A / pow ( xPre, N - 1 ) ) / ( double ) N;
    delX = abs ( xK - xPre );
    xPre = xK;
  }
  return xK;
}


NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS | int waysToArrange ( int N, int K, int k [ ] ) {
  int C [ N + 1 ] [ N + 1 ];
  int i, j;
  for ( i = 0;
  i <= N;
  i ++ ) {
    for ( j = 0;
    j <= i;
    j ++ ) {
      if ( j == 0 || j == i ) C [ i ] [ j ] = 1;
      else C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ] );
    }
  }
  int dp [ K ];
  int count = 0;
  dp [ 0 ] = 1;
  for ( int i = 0;
  i < K;
  i ++ ) {
    dp [ i + 1 ] = ( dp [ i ] * C [ count + k [ i ] - 1 ] [ k [ i ] - 1 ] );
    count += k [ i ];
  }
  return dp [ K ];
}


TEMPLE_OFFERINGS | int offeringNumber ( int n, int templeHeight [ ] ) {
  int sum = 0;
  for ( int i = 0;
  i < n;
  ++ i ) {
    int left = 0, right = 0;
    for ( int j = i - 1;
    j >= 0;
    -- j ) {
      if ( templeHeight [ j ] < templeHeight [ j + 1 ] ) ++ left;
      else break;
    }
    for ( int j = i + 1;
    j < n;
    ++ j ) {
      if ( templeHeight [ j ] < templeHeight [ j - 1 ] ) ++ right;
      else break;
    }
    sum += max ( right, left ) + 1;
  }
  return sum;
}


CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS | bool HalfDiagonalSums ( int mat [ ] [ MAX ], int n ) {
  int diag1_left = 0, diag1_right = 0;
  int diag2_left = 0, diag2_right = 0;
  for ( int i = 0, j = n - 1;
  i < n;
  i ++, j -- ) {
    if ( i < n / 2 ) {
      diag1_left += mat [ i ] [ i ];
      diag2_left += mat [ j ] [ i ];
    }
    else if ( i > n / 2 ) {
      diag1_right += mat [ i ] [ i ];
      diag2_right += mat [ j ] [ i ];
    }
  }
  return ( diag1_left == diag2_right && diag2_right == diag2_left && diag1_right == diag2_left && diag2_right == mat [ n / 2 ] [ n / 2 ] );
}


COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE | int countFact ( int low, int high ) {
  int fact = 1, x = 1;
  while ( fact < low ) {
    fact = fact * x;
    x ++;
  }
  int res = 0;
  while ( fact <= high ) {
    res ++;
    fact = fact * x;
    x ++;
  }
  return res;
}


PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1 | void reverseStr ( string & str ) {
  int n = str . length ( );
  for ( int i = 0, j = n - 1;
  i < j;
  i ++, j -- ) swap ( str [ i ], str [ j ] );
}


FIND_MINIMUM_ADJUSTMENT_COST_OF_AN_ARRAY | int minAdjustmentCost ( int A [ ], int n, int target ) {
  int dp [ n ] [ M + 1 ];
  for ( int j = 0;
  j <= M;
  j ++ ) dp [ 0 ] [ j ] = abs ( j - A [ 0 ] );
  for ( int i = 1;
  i < n;
  i ++ ) {
    for ( int j = 0;
    j <= M;
    j ++ ) {
      dp [ i ] [ j ] = INT_MAX;
      for ( int k = max ( j - target, 0 );
      k <= min ( M, j + target );
      k ++ ) dp [ i ] [ j ] = min ( dp [ i ] [ j ], dp [ i - 1 ] [ k ] + abs ( A [ i ] - j ) );
    }
  }
  int res = INT_MAX;
  for ( int j = 0;
  j <= M;
  j ++ ) res = min ( res, dp [ n - 1 ] [ j ] );
  return res;
}


COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ | int find ( int n, int k ) {
  if ( n + 1 >= k ) return ( k - 1 );
  else return ( 2 * n + 1 - k );
}


MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1 | int minimumflip ( int mat [ ] [ N ], int n ) {
  int flip = 0;
  for ( int i = 0;
  i < n;
  i ++ ) for ( int j = 0;
  j < i;
  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++;
  return flip;
}


NTH_PALINDROME_K_DIGITS | void nthPalindrome ( int n, int k ) {
  int temp = ( k & 1 ) ? ( k / 2 ) : ( k / 2 - 1 );
  int palindrome = ( int ) pow ( 10, temp );
  palindrome += n - 1;
  printf ( "%d", palindrome );
  if ( k & 1 ) palindrome /= 10;
  while ( palindrome ) {
    printf ( "%d", palindrome % 10 );
    palindrome /= 10;
  }
  printf ( "\n" );
}


DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1 | int lis ( int arr [ ], int n ) {
  int lis [ n ];
  lis [ 0 ] = 1;
  for ( int i = 1;
  i < n;
  i ++ ) {
    lis [ i ] = 1;
    for ( int j = 0;
    j < i;
    j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;
  }
  return * max_element ( lis, lis + n );
}


PATH_MAXIMUM_AVERAGE_VALUE | double maxAverageOfPath ( int cost [ M ] [ M ], int N ) {
  int dp [ N + 1 ] [ N + 1 ];
  dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ];
  for ( int i = 1;
  i < N;
  i ++ ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ];
  for ( int j = 1;
  j < N;
  j ++ ) dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ];
  for ( int i = 1;
  i < N;
  i ++ ) for ( int j = 1;
  j <= N;
  j ++ ) dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ], dp [ i ] [ j - 1 ] ) + cost [ i ] [ j ];
  return ( double ) dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 );
}


PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING | int count ( string s, char c ) {
  int res = 0;
  for ( int i = 0;
  i < s . length ( );
  i ++ ) if ( s [ i ] == c ) res ++;
  return res;
}


KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY | int kthSmallest ( int arr [ ], int n, int k ) {
  sort ( arr, arr + n );
  return arr [ k - 1 ];
}


CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE | void convertOpposite ( string & str ) {
  int ln = str . length ( );
  for ( int i = 0;
  i < ln;
  i ++ ) {
    if ( str [ i ] >= 'a' && str [ i ] <= 'z' ) str [ i ] = str [ i ] - 32;
    else if ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) str [ i ] = str [ i ] + 32;
  }
}


SUM_SERIES_555555_N_TERMS | int sumOfSeries ( int n ) {
  return 0.6172 * ( pow ( 10, n ) - 1 ) - 0.55 * n;
}


DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION | int MatrixChainOrder ( int p [ ], int i, int j ) {
  if ( i == j ) return 0;
  int k;
  int min = INT_MAX;
  int count;
  for ( k = i;
  k < j;
  k ++ ) {
    count = MatrixChainOrder ( p, i, k ) + MatrixChainOrder ( p, k + 1, j ) + p [ i - 1 ] * p [ k ] * p [ j ];
    if ( count < min ) min = count;
  }
  return min;
}


COUNT_SET_BITS_IN_AN_INTEGER_3 | int countSetBits ( int n ) {
  if ( n == 0 ) return 0;
  else return 1 + countSetBits ( n & ( n - 1 ) );
}


MINIMUM_LENGTH_UNSORTED_SUBARRAY_SORTING_WHICH_MAKES_THE_COMPLETE_ARRAY_SORTED | void printUnsorted ( int arr [ ], int n ) {
  int s = 0, e = n - 1, i, max, min;
  for ( s = 0;
  s < n - 1;
  s ++ ) {
    if ( arr [ s ] > arr [ s + 1 ] ) break;
  }
  if ( s == n - 1 ) {
    cout << "The complete array is sorted";
    return;
  }
  for ( e = n - 1;
  e > 0;
  e -- ) {
    if ( arr [ e ] < arr [ e - 1 ] ) break;
  }
  max = arr [ s ];
  min = arr [ s ];
  for ( i = s + 1;
  i <= e;
  i ++ ) {
    if ( arr [ i ] > max ) max = arr [ i ];
    if ( arr [ i ] < min ) min = arr [ i ];
  }
  for ( i = 0;
  i < s;
  i ++ ) {
    if ( arr [ i ] > min ) {
      s = i;
      break;
    }
  }
  for ( i = n - 1;
  i >= e + 1;
  i -- ) {
    if ( arr [ i ] < max ) {
      e = i;
      break;
    }
  }
  cout << "The unsorted subarray which" << " makes the given array" << endl << "sorted lies between the indees " << s << " and " << e;
  return;
}


STEINS_ALGORITHM_FOR_FINDING_GCD | int gcd ( int a, int b ) {
  if ( a == 0 ) return b;
  if ( b == 0 ) return a;
  int k;
  for ( k = 0;
  ( ( a | b ) && 1 ) == 0;
  ++ k ) {
    a >>= 1;
    b >>= 1;
  }
  while ( ( a > 1 ) == 0 ) a >>= 1;
  do {
    while ( ( b > 1 ) == 0 ) b >>= 1;
    if ( a > b ) swap ( a, b );
    b = ( b - a );
  }
  while ( b != 0 );
  return a << k;
}


HEXAGONAL_NUMBER | int hexagonalNum ( int n ) {
  return n * ( 2 * n - 1 );
}


GOOGLE_CASE_GIVEN_SENTENCE | string convert ( string s ) {
  int n = s . length ( );
  s [ 0 ] = tolower ( s [ 0 ] );
  for ( int i = 1;
  i < n;
  i ++ ) {
    if ( s [ i ] == ' ' && i < n ) {
      s [ i + 1 ] = tolower ( s [ i + 1 ] );
      i ++;
    }
    else s [ i ] = toupper ( s [ i ] );
  }
  return s;
}


FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE | int maxHamming ( int arr [ ], int n ) {
  int brr [ 2 * n + 1 ];
  for ( int i = 0;
  i < n;
  i ++ ) brr [ i ] = arr [ i ];
  for ( int i = 0;
  i < n;
  i ++ ) brr [ n + i ] = arr [ i ];
  int maxHam = 0;
  for ( int i = 1;
  i < n;
  i ++ ) {
    int currHam = 0;
    for ( int j = i, k = 0;
    j < ( i + n );
    j ++, k ++ ) if ( brr [ j ] != arr [ k ] ) currHam ++;
    if ( currHam == n ) return n;
    maxHam = max ( maxHam, currHam );
  }
  return maxHam;
}


GIVEN_A_NUMBER_N_GENERATE_BIT_PATTERNS_FROM_0_TO_2N_1_SO_THAT_SUCCESSIVE_PATTERNS_DIFFER_BY_ONE_BIT | void generateGrayarr ( int n ) {
  if ( n <= 0 ) return;
  vector < string > arr;
  arr . push_back ( "0" );
  arr . push_back ( "1" );
  int i, j;
  for ( i = 2;
  i < ( 1 << n );
  i = i << 1 ) {
    for ( j = i - 1;
    j >= 0;
    j -- ) arr . push_back ( arr [ j ] );
    for ( j = 0;
    j < i;
    j ++ ) arr [ j ] = "0" + arr [ j ];
    for ( j = i;
    j < 2 * i;
    j ++ ) arr [ j ] = "1" + arr [ j ];
  }
  for ( i = 0;
  i < arr . size ( );
  i ++ ) cout << arr [ i ] << endl;
}


MINIMUM_SWAPS_REQUIRED_BRING_ELEMENTS_LESS_EQUAL_K_TOGETHER | int minSwap ( int * arr, int n, int k ) {
  int count = 0;
  for ( int i = 0;
  i < n;
  ++ i ) if ( arr [ i ] <= k ) ++ count;
  int bad = 0;
  for ( int i = 0;
  i < count;
  ++ i ) if ( arr [ i ] > k ) ++ bad;
  int ans = bad;
  for ( int i = 0, j = count;
  j < n;
  ++ i, ++ j ) {
    if ( arr [ i ] > k ) -- bad;
    if ( arr [ j ] > k ) ++ bad;
    ans = min ( ans, bad );
  }
  return ans;
}


FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO | int fib ( int n ) {
  if ( n < 6 ) return f [ n ];
  int t = 5, fn = 5;
  while ( t < n ) {
    fn = round ( fn * PHI );
    t ++;
  }
  return fn;
}


SORTING_ARRAY_REVERSE_AROUND_MIDDLE | bool ifPossible ( int arr [ ], int n ) {
  int cp [ n ];
  copy ( arr, arr + n, cp );
  sort ( cp, cp + n );
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( ! ( arr [ i ] == cp [ i ] ) && ! ( arr [ n - 1 - i ] == cp [ i ] ) ) return false;
  }
  return true;
}


COUNT_ROTATIONS_DIVISIBLE_4 | int countRotations ( string n ) {
  int len = n . length ( );
  if ( len == 1 ) {
    int oneDigit = n . at ( 0 ) - '0';
    if ( oneDigit % 4 == 0 ) return 1;
    return 0;
  }
  int twoDigit, count = 0;
  for ( int i = 0;
  i < ( len - 1 );
  i ++ ) {
    twoDigit = ( n . at ( i ) - '0' ) * 10 + ( n . at ( i + 1 ) - '0' );
    if ( twoDigit % 4 == 0 ) count ++;
  }
  twoDigit = ( n . at ( len - 1 ) - '0' ) * 10 + ( n . at ( 0 ) - '0' );
  if ( twoDigit % 4 == 0 ) count ++;
  return count;
}


N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2 | int findNth ( int n ) {
  int nthElement = 19 + ( n - 1 ) * 9;
  int outliersCount = ( int ) log10 ( nthElement ) - 1;
  nthElement += 9 * outliersCount;
  return nthElement;
}


PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1 | bool isPrime ( int n ) {
  if ( n <= 1 ) return false;
  if ( n <= 3 ) return true;
  if ( n % 2 == 0 || n % 3 == 0 ) return false;
  for ( int i = 5;
  i * i <= n;
  i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false;
  return true;
}


MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1 | int subset ( int arr [ ], int n ) {
  unordered_map < int, int > mp;
  for ( int i = 0;
  i < n;
  i ++ ) mp [ arr [ i ] ] ++;
  int res = 0;
  for ( auto x : mp ) res = max ( res, x . second );
  return res;
}


RECAMANS_SEQUENCE_1 | void recaman ( int n ) {
  if ( n <= 0 ) return;
  printf ( "%d, ", 0 );
  unordered_set < int > s;
  s . insert ( 0 );
  int prev = 0;
  for ( int i = 1;
  i < n;
  i ++ ) {
    int curr = prev - i;
    if ( curr < 0 || s . find ( curr ) != s . end ( ) ) curr = prev + i;
    s . insert ( curr );
    printf ( "%d, ", curr );
    prev = curr;
  }
}


GENERATE_ROTATIONS_GIVEN_STRING_1 | void printRotatedString ( char str [ ] ) {
  int n = strlen ( str );
  char temp [ 2 * n + 1 ];
  strcpy ( temp, str );
  strcat ( temp, str );
  for ( int i = 0;
  i < n;
  i ++ ) {
    for ( int j = 0;
    j != n;
    j ++ ) printf ( "%c", temp [ i + j ] );
    printf ( "\n" );
  }
}


FITTING_SHELVES_PROBLEM | void minSpacePreferLarge ( int wall, int m, int n ) {
  int num_m = 0, num_n = 0, min_empty = wall;
  int p = 0, q = 0, rem;
  while ( wall >= n ) {
    p = wall / m;
    rem = wall % m;
    if ( rem <= min_empty ) {
      num_m = p;
      num_n = q;
      min_empty = rem;
    }
    q += 1;
    wall = wall - n;
  }
  cout << num_m << " " << num_n << " " << min_empty << endl;
}


COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1 | int countStr ( int n ) {
  return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 );
}


DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER | bool isDvisibleBy12 ( string num ) {
  if ( num . length ( ) >= 3 ) {
    int d1 = ( int ) num [ num . length ( ) - 1 ];
    if ( d1 % 2 != 0 ) return ( 0 );
    int d2 = ( int ) num [ num . length ( ) - 2 ];
    int sum = 0;
    for ( int i = 0;
    i < num . length ( );
    i ++ ) sum += num [ i ];
    return ( sum % 3 == 0 && ( d2 * 10 + d1 ) % 4 == 0 );
  }
  else {
    int number = stoi ( num );
    return ( number % 12 == 0 );
  }
}


DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1 | int maxProd ( int n ) {
  if ( n == 2 || n == 3 ) return ( n - 1 );
  int res = 1;
  while ( n > 4 ) {
    n -= 3;
    res *= 3;
  }
  return ( n * res );
}


RETURN_A_PAIR_WITH_MAXIMUM_PRODUCT_IN_ARRAY_OF_INTEGERS | void maxProduct ( int arr [ ], int n ) {
  if ( n < 2 ) {
    cout << "No pairs exists\n";
    return;
  }
  int a = arr [ 0 ], b = arr [ 1 ];
  for ( int i = 0;
  i < n;
  i ++ ) for ( int j = i + 1;
  j < n;
  j ++ ) if ( arr [ i ] * arr [ j ] > a * b ) a = arr [ i ], b = arr [ j ];
  cout << "Max product pair is {" << a << ", " << b << "}";
}


SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2 | int findSum ( int n ) {
  n --;
  int sum = 0;
  sum += ( n * ( n + 1 ) ) / 2;
  sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6;
  return sum;
}


PRINT_MATRIX_ANTISPIRAL_FORM | void antiSpiralTraversal ( int m, int n, int a [ R ] [ C ] ) {
  int i, k = 0, l = 0;
  stack < int > stk;
  while ( k <= m && l <= n ) {
    for ( i = l;
    i <= n;
    ++ i ) stk . push ( a [ k ] [ i ] );
    k ++;
    for ( i = k;
    i <= m;
    ++ i ) stk . push ( a [ i ] [ n ] );
    n --;
    if ( k <= m ) {
      for ( i = n;
      i >= l;
      -- i ) stk . push ( a [ m ] [ i ] );
      m --;
    }
    if ( l <= n ) {
      for ( i = m;
      i >= k;
      -- i ) stk . push ( a [ i ] [ l ] );
      l ++;
    }
  }
  while ( ! stk . empty ( ) ) {
    cout << stk . top ( ) << " ";
    stk . pop ( );
  }
}


DICE_THROW_PROBLEM_1 | long findWays ( int f, int d, int s ) {
  long mem [ d + 1 ] [ s + 1 ];
  memset ( mem, 0, sizeof mem );
  mem [ 0 ] [ 0 ] = 1;
  for ( int i = 1;
  i <= d;
  i ++ ) {
    for ( int j = i;
    j <= s;
    j ++ ) {
      mem [ i ] [ j ] = mem [ i ] [ j - 1 ] + mem [ i - 1 ] [ j - 1 ];
      if ( j - f - 1 >= 0 ) mem [ i ] [ j ] -= mem [ i - 1 ] [ j - f - 1 ];
    }
  }
  return mem [ d ] [ s ];
}


WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN | public : int power ( int x, unsigned int y ) {
  if ( y == 0 ) return 1;
  else if ( y % 2 == 0 ) return power ( x, y / 2 ) * power ( x, y / 2 );
  else return x * power ( x, y / 2 ) * power ( x, y / 2 );
}


SMALLEST_WINDOW_CONTAINS_CHARACTERS_STRING | string findSubString ( string str ) {
  int n = str . length ( );
  int dist_count = 0;
  bool visited [ MAX_CHARS ] = {
    false };
    for ( int i = 0;
    i < n;
    i ++ ) {
      if ( visited [ str [ i ] ] == false ) {
        visited [ str [ i ] ] = true;
        dist_count ++;
      }
    }
    int start = 0, start_index = - 1, min_len = INT_MAX;
    int count = 0;
    int curr_count [ MAX_CHARS ] = {
      0 };
      for ( int j = 0;
      j < n;
      j ++ ) {
        curr_count [ str [ j ] ] ++;
        if ( curr_count [ str [ j ] ] == 1 ) count ++;
        if ( count == dist_count ) {
          while ( curr_count [ str [ start ] ] > 1 ) {
            if ( curr_count [ str [ start ] ] > 1 ) curr_count [ str [ start ] ] --;
            start ++;
          }
          int len_window = j - start + 1;
          if ( min_len > len_window ) {
            min_len = len_window;
            start_index = start;
          }
        }
      }
      return str . substr ( start_index, min_len );
    }
    

CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFERENCES_IS_MINIMUM | void solve ( int i, int par, int a [ ], int n, int k, int current_ans ) {
  if ( par > k ) return;
  if ( par == k && i == n - 1 ) {
    ans = min ( ans, current_ans );
    return;
  }
  for ( int j = i + 1;
  j < n;
  j ++ ) solve ( j, par + 1, a, n, k, current_ans + ( a [ j ] - a [ i + 1 ] ) * ( a [ j ] - a [ i + 1 ] ) );
}


PROGRAM_FIND_SMALLEST_LARGEST_WORD_STRING | void minMaxLengthWords ( string input, string & minWord, string & maxWord ) {
  int len = input . length ( );
  int si = 0, ei = 0;
  int min_length = len, min_start_index = 0, max_length = 0, max_start_index = 0;
  while ( ei <= len ) {
    if ( ei < len && input [ ei ] != ' ' ) ei ++;
    else {
      int curr_length = ei - si;
      if ( curr_length < min_length ) {
        min_length = curr_length;
        min_start_index = si;
      }
      if ( curr_length > max_length ) {
        max_length = curr_length;
        max_start_index = si;
      }
      ei ++;
      si = ei;
    }
  }
  minWord = input . substr ( min_start_index, min_length );
  maxWord = input . substr ( max_start_index, max_length );
}


CHECK_VALID_SEQUENCE_DIVISIBLE_M_1 | int isPossible ( int n, int index, int modulo, int M, int arr [ ], int dp [ ] [ MAX ] ) {
  modulo = ( ( modulo % M ) + M ) % M;
  if ( index == n ) {
    if ( modulo == 0 ) return 1;
    return 0;
  }
  if ( dp [ index ] [ modulo ] != - 1 ) return dp [ index ] [ modulo ];
  int placeAdd = isPossible ( n, index + 1, modulo + arr [ index ], M, arr, dp );
  int placeMinus = isPossible ( n, index + 1, modulo - arr [ index ], M, arr, dp );
  bool res = ( placeAdd || placeMinus );
  dp [ index ] [ modulo ] = res;
  return res;
}


MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY | int minOperation ( int arr [ ], int n ) {
  unordered_map < int, int > hash;
  for ( int i = 0;
  i < n;
  i ++ ) hash [ arr [ i ] ] ++;
  int max_count = 0;
  for ( auto i : hash ) if ( max_count < i . second ) max_count = i . second;
  return ( n - max_count );
}


HYPERCUBE_GRAPH | int power ( int n ) {
  if ( n == 1 ) return 2;
  return 2 * power ( n - 1 );
}


PROGRAM_FIND_CORRELATION_COEFFICIENT | float correlationCoefficient ( int X [ ], int Y [ ], int n ) {
  int sum_X = 0, sum_Y = 0, sum_XY = 0;
  int squareSum_X = 0, squareSum_Y = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    sum_X = sum_X + X [ i ];
    sum_Y = sum_Y + Y [ i ];
    sum_XY = sum_XY + X [ i ] * Y [ i ];
    squareSum_X = squareSum_X + X [ i ] * X [ i ];
    squareSum_Y = squareSum_Y + Y [ i ] * Y [ i ];
  }
  float corr = ( float ) ( n * sum_XY - sum_X * sum_Y ) / sqrt ( ( n * squareSum_X - sum_X * sum_X ) * ( n * squareSum_Y - sum_Y * sum_Y ) );
  return corr;
}


COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING | int countPS ( string str ) {
  int N = str . length ( );
  int cps [ N + 1 ] [ N + 1 ];
  memset ( cps, 0, sizeof ( cps ) );
  for ( int i = 0;
  i < N;
  i ++ ) cps [ i ] [ i ] = 1;
  for ( int L = 2;
  L <= N;
  L ++ ) {
    for ( int i = 0;
    i < N;
    i ++ ) {
      int k = L + i - 1;
      if ( str [ i ] == str [ k ] ) cps [ i ] [ k ] = cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] + 1;
      else cps [ i ] [ k ] = cps [ i ] [ k - 1 ] + cps [ i + 1 ] [ k ] - cps [ i + 1 ] [ k - 1 ];
    }
  }
  return cps [ 0 ] [ N - 1 ];
}


SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1 | unsigned int nextPowerOf2 ( unsigned int n ) {
  unsigned int p = 1;
  if ( n && ! ( n & ( n - 1 ) ) ) return n;
  while ( p < n ) p <<= 1;
  return p;
}


FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B | int computeLastDigit ( long long int A, long long int B ) {
  int variable = 1;
  if ( A == B ) return 1;
  else if ( ( B - A ) >= 5 ) return 0;
  else {
    for ( long long int i = A + 1;
    i <= B;
    i ++ ) variable = ( variable * ( i % 10 ) ) % 10;
    return variable % 10;
  }
}


NUMBER_SUBSTRINGS_DIVISIBLE_4_STRING_INTEGERS | int countDivisbleby4 ( char s [ ] ) {
  int n = strlen ( s );
  int count = 0;
  for ( int i = 0;
  i < n;
  ++ i ) if ( s [ i ] == '4' || s [ i ] == '8' || s [ i ] == '0' ) count ++;
  for ( int i = 0;
  i < n - 1;
  ++ i ) {
    int h = ( s [ i ] - '0' ) * 10 + ( s [ i + 1 ] - '0' );
    if ( h % 4 == 0 ) count = count + i + 1;
  }
  return count;
}


DECODE_MEDIAN_STRING_ORIGINAL_STRING | string decodeMedianString ( string s ) {
  int l = s . length ( );
  string s1 = "";
  bool isEven = ( l % 2 == 0 ) ? true : false;
  for ( int i = 0;
  i < l;
  i += 2 ) {
    if ( isEven ) {
      s1 = s [ i ] + s1;
      s1 += s [ i + 1 ];
    }
    else {
      if ( l - i > 1 ) {
        s1 += s [ i ];
        s1 = s [ i + 1 ] + s1;
      }
      else {
        s1 += s [ i ];
      }
    }
  }
  return s1;
}


NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS_IN_RANGE_M_TO_N | int maximumNumberDistinctPrimeRange ( int m, int n ) {
  long long factorCount [ n + 1 ];
  bool prime [ n + 1 ];
  for ( int i = 0;
  i <= n;
  i ++ ) {
    factorCount [ i ] = 0;
    prime [ i ] = true;
  }
  for ( int i = 2;
  i <= n;
  i ++ ) {
    if ( prime [ i ] == true ) {
      factorCount [ i ] = 1;
      for ( int j = i * 2;
      j <= n;
      j += i ) {
        factorCount [ j ] ++;
        prime [ j ] = false;
      }
    }
  }
  int max = factorCount [ m ];
  int num = m;
  for ( int i = m;
  i <= n;
  i ++ ) {
    if ( factorCount [ i ] > max ) {
      max = factorCount [ i ];
      num = i;
    }
  }
  return num;
}


NUMBER_EQUAL_PAIRS_STRING | int countPairs ( string s ) {
  int cnt [ MAX ] = {
    0 };
    for ( int i = 0;
    i < s . length ( );
    i ++ ) cnt [ s [ i ] ] ++;
    int ans = 0;
    for ( int i = 0;
    i < MAX;
    i ++ ) ans += cnt [ i ] * cnt [ i ];
    return ans;
  }
  

COUNT_NUMBER_WAYS_REACH_DESTINATION_MAZE | int countPaths ( int maze [ ] [ C ] ) {
  if ( maze [ 0 ] [ 0 ] == - 1 ) return 0;
  for ( int i = 0;
  i < R;
  i ++ ) {
    if ( maze [ i ] [ 0 ] == 0 ) maze [ i ] [ 0 ] = 1;
    else break;
  }
  for ( int i = 1;
  i < C;
  i ++ ) {
    if ( maze [ 0 ] [ i ] == 0 ) maze [ 0 ] [ i ] = 1;
    else break;
  }
  for ( int i = 1;
  i < R;
  i ++ ) {
    for ( int j = 1;
    j < C;
    j ++ ) {
      if ( maze [ i ] [ j ] == - 1 ) continue;
      if ( maze [ i - 1 ] [ j ] > 0 ) maze [ i ] [ j ] = ( maze [ i ] [ j ] + maze [ i - 1 ] [ j ] );
      if ( maze [ i ] [ j - 1 ] > 0 ) maze [ i ] [ j ] = ( maze [ i ] [ j ] + maze [ i ] [ j - 1 ] );
    }
  }
  return ( maze [ R - 1 ] [ C - 1 ] > 0 ) ? maze [ R - 1 ] [ C - 1 ] : 0;
}


FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS | int maxSum ( int stack1 [ ], int stack2 [ ], int stack3 [ ], int n1, int n2, int n3 ) {
  int sum1 = 0, sum2 = 0, sum3 = 0;
  for ( int i = 0;
  i < n1;
  i ++ ) sum1 += stack1 [ i ];
  for ( int i = 0;
  i < n2;
  i ++ ) sum2 += stack2 [ i ];
  for ( int i = 0;
  i < n3;
  i ++ ) sum3 += stack3 [ i ];
  int top1 = 0, top2 = 0, top3 = 0;
  int ans = 0;
  while ( 1 ) {
    if ( top1 == n1 || top2 == n2 || top3 == n3 ) return 0;
    if ( sum1 == sum2 && sum2 == sum3 ) return sum1;
    if ( sum1 >= sum2 && sum1 >= sum3 ) sum1 -= stack1 [ top1 ++ ];
    else if ( sum2 >= sum3 && sum2 >= sum3 ) sum2 -= stack2 [ top2 ++ ];
    else if ( sum3 >= sum2 && sum3 >= sum1 ) sum3 -= stack3 [ top3 ++ ];
  }
}


MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS | int maxSum ( int arr [ ], int N, int k ) {
  int MS [ N ];
  MS [ N - 1 ] = arr [ N - 1 ];
  for ( int i = N - 2;
  i >= 0;
  i -- ) {
    if ( i + k + 1 >= N ) MS [ i ] = max ( arr [ i ], MS [ i + 1 ] );
    else MS [ i ] = max ( arr [ i ] + MS [ i + k + 1 ], MS [ i + 1 ] );
  }
  return MS [ 0 ];
}


CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1 | bool isEven ( int n ) {
  return ( ! ( n & 1 ) );
}


SORT_ARRAY_TWO_HALVES_SORTED | void mergeTwoHalf ( int A [ ], int n ) {
  sort ( A, A + n );
}


PYTHAGOREAN_QUADRUPLE | bool pythagorean_quadruple ( int a, int b, int c, int d ) {
  int sum = a * a + b * b + c * c;
  if ( d * d == sum ) return true;
  else return false;
}


FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN_ARRAY | void printMaxOfMin ( int arr [ ], int n ) {
  for ( int k = 1;
  k <= n;
  k ++ ) {
    int maxOfMin = INT_MIN;
    for ( int i = 0;
    i <= n - k;
    i ++ ) {
      int min = arr [ i ];
      for ( int j = 1;
      j < k;
      j ++ ) {
        if ( arr [ i + j ] < min ) min = arr [ i + j ];
      }
      if ( min > maxOfMin ) maxOfMin = min;
    }
    cout << maxOfMin << " ";
  }
}


COUNT_SUM_OF_DIGITS_IN_NUMBERS_FROM_1_TO_N | int sumOfDigitsFrom1ToN ( int n ) {
  if ( n < 10 ) return n * ( n + 1 ) / 2;
  int d = log10 ( n );
  int * a = new int [ d + 1 ];
  a [ 0 ] = 0, a [ 1 ] = 45;
  for ( int i = 2;
  i <= d;
  i ++ ) a [ i ] = a [ i - 1 ] * 10 + 45 * ceil ( pow ( 10, i - 1 ) );
  int p = ceil ( pow ( 10, d ) );
  int msd = n / p;
  return msd * a [ d ] + ( msd * ( msd - 1 ) / 2 ) * p + msd * ( 1 + n % p ) + sumOfDigitsFrom1ToN ( n % p );
}


RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1 | int breakSum ( int n ) {
  int dp [ n + 1 ];
  dp [ 0 ] = 0, dp [ 1 ] = 1;
  for ( int i = 2;
  i <= n;
  i ++ ) dp [ i ] = max ( dp [ i / 2 ] + dp [ i / 3 ] + dp [ i / 4 ], i );
  return dp [ n ];
}


FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N | int findRepeatingElement ( int arr [ ], int low, int high ) {
  if ( low > high ) return - 1;
  int mid = ( low + high ) / 2;
  if ( arr [ mid ] != mid + 1 ) {
    if ( mid > 0 && arr [ mid ] == arr [ mid - 1 ] ) return mid;
    return findRepeatingElement ( arr, low, mid - 1 );
  }
  return findRepeatingElement ( arr, mid + 1, high );
}


COUNT_SUBARRAYS_EQUAL_NUMBER_1S_0S_1 | int countSubarrWithEqualZeroAndOne ( int arr [ ], int n ) {
  map < int, int > mp;
  int sum = 0;
  int count = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( arr [ i ] == 0 ) arr [ i ] = - 1;
    sum += arr [ i ];
    if ( sum == 0 ) count ++;
    if ( mp [ sum ] ) count += mp [ sum ];
    if ( mp [ sum ] == 0 ) mp [ sum ] = 1;
    else mp [ sum ] ++;
  }
  return count;
}


UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1 | int printIntersection ( int arr1 [ ], int arr2 [ ], int m, int n ) {
  int i = 0, j = 0;
  while ( i < m && j < n ) {
    if ( arr1 [ i ] < arr2 [ j ] ) i ++;
    else if ( arr2 [ j ] < arr1 [ i ] ) j ++;
    else {
      cout << arr2 [ j ] << " ";
      i ++;
      j ++;
    }
  }
}


COUNT_ALL_INCREASING_SUBSEQUENCES | int countSub ( int arr [ ], int n ) {
  int count [ 10 ] = {
    0 };
    for ( int i = 0;
    i < n;
    i ++ ) {
      for ( int j = arr [ i ] - 1;
      j >= 0;
      j -- ) count [ arr [ i ] ] += count [ j ];
      count [ arr [ i ] ] ++;
    }
    int result = 0;
    for ( int i = 0;
    i < 10;
    i ++ ) result += count [ i ];
    return result;
  }
  

SMALLEST_NUMBER_SUM_DIGITS_N_DIVISIBLE_10N | void digitsNum ( int N ) {
  if ( N == 0 ) cout << "0\n";
  if ( N % 9 != 0 ) cout << ( N % 9 );
  for ( int i = 1;
  i <= ( N / 9 );
  ++ i ) cout << "9";
  for ( int i = 1;
  i <= N;
  ++ i ) cout << "0";
  cout << "\n";
}


FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1 | int getOddOccurrence ( int arr [ ], int size ) {
  unordered_map < int, int > hash;
  for ( int i = 0;
  i < size;
  i ++ ) {
    hash [ arr [ i ] ] ++;
  }
  for ( auto i : hash ) {
    if ( i . second % 2 != 0 ) {
      return i . first;
    }
  }
  return - 1;
}


CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE | int isChangeable ( int notes [ ], int n ) {
  int fiveCount = 0;
  int tenCount = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( notes [ i ] == 5 ) fiveCount ++;
    else if ( notes [ i ] == 10 ) {
      if ( fiveCount > 0 ) {
        fiveCount --;
        tenCount ++;
      }
      else return 0;
    }
    else {
      if ( fiveCount > 0 && tenCount > 0 ) {
        fiveCount --;
        tenCount --;
      }
      else if ( fiveCount >= 3 ) {
        fiveCount -= 3;
      }
      else return 0;
    }
  }
  return 1;
}


MAXIMUM_MINIMUM_VALUES_ALGEBRAIC_EXPRESSION | e9 int minMaxValues ( int arr [ ], int n, int m ) {
  int sum = 0;
  for ( int i = 0;
  i < ( n + m );
  i ++ ) {
    sum += arr [ i ];
    arr [ i ] += 50;
  }
  bool dp [ MAX + 1 ] [ MAX * MAX + 1 ];
  memset ( dp, 0, sizeof ( dp ) );
  dp [ 0 ] [ 0 ] = 1;
  for ( int i = 0;
  i < ( n + m );
  i ++ ) {
    for ( int k = min ( n, i + 1 );
    k >= 1;
    k -- ) {
      for ( int j = 0;
      j < MAX * MAX + 1;
      j ++ ) {
        if ( dp [ k - 1 ] [ j ] ) dp [ k ] [ j + arr [ i ] ] = 1;
      }
    }
  }
  int max_value = - INF, min_value = INF;
  for ( int i = 0;
  i < MAX * MAX + 1;
  i ++ ) {
    if ( dp [ n ] [ i ] ) {
      int temp = i - 50 * n;
      max_value = max ( max_value, temp * ( sum - temp ) );
      min_value = min ( min_value, temp * ( sum - temp ) );
    }
  }
  cout << "Maximum Value: " << max_value << "\n" << "Minimum Value: " << min_value << endl;
}


MULTIPLY_AN_INTEGER_WITH_3_5 | int multiplyWith3Point5 ( int x ) {
  return ( x << 1 ) + x + ( x >> 1 );
}


MINIMUM_CELLS_REQUIRED_REACH_DESTINATION_JUMPS_EQUAL_CELL_VALUES | int minCells ( int mat [ SIZE ] [ SIZE ], int m, int n ) {
  int dp [ m ] [ n ];
  for ( int i = 0;
  i < m;
  i ++ ) for ( int j = 0;
  j < n;
  j ++ ) dp [ i ] [ j ] = INT_MAX;
  dp [ 0 ] [ 0 ] = 1;
  for ( int i = 0;
  i < m;
  i ++ ) {
    for ( int j = 0;
    j < n;
    j ++ ) {
      if ( dp [ i ] [ j ] != INT_MAX && ( j + mat [ i ] [ j ] ) < n && ( dp [ i ] [ j ] + 1 ) < dp [ i ] [ j + mat [ i ] [ j ] ] ) dp [ i ] [ j + mat [ i ] [ j ] ] = dp [ i ] [ j ] + 1;
      if ( dp [ i ] [ j ] != INT_MAX && ( i + mat [ i ] [ j ] ) < m && ( dp [ i ] [ j ] + 1 ) < dp [ i + mat [ i ] [ j ] ] [ j ] ) dp [ i + mat [ i ] [ j ] ] [ j ] = dp [ i ] [ j ] + 1;
    }
  }
  if ( dp [ m - 1 ] [ n - 1 ] != INT_MAX ) return dp [ m - 1 ] [ n - 1 ];
  return - 1;
}


FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY | int findExtra ( int arr1 [ ], int arr2 [ ], int n ) {
  for ( int i = 0;
  i < n;
  i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i;
  return n;
}


CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING | int findSum ( string str ) {
  string temp = "";
  int sum = 0;
  for ( char ch : str ) {
    if ( isdigit ( ch ) ) temp += ch;
    else {
      sum += atoi ( temp . c_str ( ) );
      temp = "";
    }
  }
  return sum + atoi ( temp . c_str ( ) );
}


CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED | bool checkReverse ( int arr [ ], int n ) {
  int temp [ n ];
  for ( int i = 0;
  i < n;
  i ++ ) temp [ i ] = arr [ i ];
  sort ( temp, temp + n );
  int front;
  for ( front = 0;
  front < n;
  front ++ ) if ( temp [ front ] != arr [ front ] ) break;
  int back;
  for ( back = n - 1;
  back >= 0;
  back -- ) if ( temp [ back ] != arr [ back ] ) break;
  if ( front >= back ) return true;
  do {
    front ++;
    if ( arr [ front - 1 ] < arr [ front ] ) return false;
  }
  while ( front != back );
  return true;
}


GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER | void evaluate ( long long int n ) {
  if ( n == 1 || n == 2 ) printf ( "No Pythagoras Triplet exists" );
  else if ( n % 2 == 0 ) {
    long long int var = 1LL * n * n / 4;
    printf ( "Pythagoras Triplets exist i.e. " );
    printf ( "%lld %lld %lld", n, var - 1, var + 1 );
  }
  else if ( n % 2 != 0 ) {
    long long int var = 1LL * n * n + 1;
    printf ( "Pythagoras Triplets exist i.e. " );
    printf ( "%lld %lld %lld", n, var / 2 - 1, var / 2 );
  }
}


PETERSON_GRAPH | bool findthepath ( char * S, int v ) {
  result [ 0 ] = v + '0';
  for ( int i = 1;
  S [ i ];
  i ++ ) {
    if ( adj [ v ] [ S [ i ] - 'A' ] || adj [ S [ i ] - 'A' ] [ v ] ) {
      v = S [ i ] - 'A';
    }
    else if ( adj [ v ] [ S [ i ] - 'A' + 5 ] || adj [ S [ i ] - 'A' + 5 ] [ v ] ) {
      v = S [ i ] - 'A' + 5;
    }
    else return false;
    result [ i ] = v + '0';
  }
  return true;
}


COUNT_NUMBER_OF_SOLUTIONS_OF_X2_1_MOD_P_IN_GIVEN_RANGE | int findCountOfSolutions ( int n, int p ) {
  ll ans = 0;
  for ( ll x = 1;
  x < p;
  x ++ ) {
    if ( ( x * x ) % p == 1 ) {
      ll last = x + p * ( n / p );
      if ( last > n ) last -= p;
      ans += ( ( last - x ) / p + 1 );
    }
  }
  return ans;
}


JUMP_SEARCH | int jumpSearch ( int arr [ ], int x, int n ) {
  int step = sqrt ( n );
  int prev = 0;
  while ( arr [ min ( step, n ) - 1 ] < x ) {
    prev = step;
    step += sqrt ( n );
    if ( prev >= n ) return - 1;
  }
  while ( arr [ prev ] < x ) {
    prev ++;
    if ( prev == min ( step, n ) ) return - 1;
  }
  if ( arr [ prev ] == x ) return prev;
  return - 1;
}


FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE | void PrintMinNumberForPattern ( string arr ) {
  int curr_max = 0;
  int last_entry = 0;
  int j;
  for ( int i = 0;
  i < arr . length ( );
  i ++ ) {
    int noOfNextD = 0;
    switch ( arr [ i ] ) {
      case 'I' : j = i + 1;
      while ( arr [ j ] == 'D' && j < arr . length ( ) ) {
        noOfNextD ++;
        j ++;
      }
      if ( i == 0 ) {
        curr_max = noOfNextD + 2;
        cout << " " << ++ last_entry;
        cout << " " << curr_max;
        last_entry = curr_max;
      }
      else {
        curr_max = curr_max + noOfNextD + 1;
        last_entry = curr_max;
        cout << " " << last_entry;
      }
      for ( int k = 0;
      k < noOfNextD;
      k ++ ) {
        cout << " " << -- last_entry;
        i ++;
      }
      break;
      case 'D' : if ( i == 0 ) {
        j = i + 1;
        while ( arr [ j ] == 'D' && j < arr . length ( ) ) {
          noOfNextD ++;
          j ++;
        }
        curr_max = noOfNextD + 2;
        cout << " " << curr_max << " " << curr_max - 1;
        last_entry = curr_max - 1;
      }
      else {
        cout << " " << last_entry - 1;
        last_entry --;
      }
      break;
    }
  }
  cout << endl;
}


GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8 | bool isSubSeqDivisible ( string str ) {
  for ( int i = 0;
  i < l;
  i ++ ) {
    for ( int j = i;
    j < l;
    j ++ ) {
      for ( int k = j;
      k < l;
      k ++ ) {
        if ( arr [ i ] % 8 == 0 ) return true;
        else if ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 && i != j ) return true;
        else if ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 && i != j && j != k && i != k ) return true;
      }
    }
  }
  return false;
}


PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES | void fib ( int n ) {
  int a = 0, b = 1, c;
  if ( n >= 0 ) cout << a << " ";
  if ( n >= 1 ) cout << b << " ";
  for ( int i = 2;
  i <= n;
  i ++ ) {
    c = a + b;
    cout << c << " ";
    a = b;
    b = c;
  }
}


INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX | void interchangeFirstLast ( int m [ ] [ n ] ) {
  int rows = n;
  for ( int i = 0;
  i < n;
  i ++ ) {
    int t = m [ 0 ] [ i ];
    m [ 0 ] [ i ] = m [ rows - 1 ] [ i ];
    m [ rows - 1 ] [ i ] = t;
  }
}


SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS | int findSum ( int n ) {
  int arr [ n ] [ n ];
  for ( int i = 0;
  i < n;
  i ++ ) for ( int j = 0;
  j < n;
  j ++ ) arr [ i ] [ j ] = abs ( i - j );
  int sum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) for ( int j = 0;
  j < n;
  j ++ ) sum += arr [ i ] [ j ];
  return sum;
}


FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASING_AND_THEN_DECREASING | int findMaximum ( int arr [ ], int low, int high ) {
  int max = arr [ low ];
  int i;
  for ( i = low + 1;
  i <= high;
  i ++ ) {
    if ( arr [ i ] > max ) max = arr [ i ];
    else break;
  }
  return max;
}


PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1 | bool isScalarMatrix ( int mat [ N ] [ N ] ) {
  for ( int i = 0;
  i < N;
  i ++ ) for ( int j = 0;
  j < N;
  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false;
  for ( int i = 0;
  i < N - 1;
  i ++ ) if ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) return false;
  return true;
}


STOOGE_SORT | void stoogesort ( int arr [ ], int l, int h ) {
  if ( l >= h ) return;
  if ( arr [ l ] > arr [ h ] ) swap ( arr [ l ], arr [ h ] );
  if ( h - l + 1 > 2 ) {
    int t = ( h - l + 1 ) / 3;
    stoogesort ( arr, l, h - t );
    stoogesort ( arr, l + t, h );
    stoogesort ( arr, l, h - t );
  }
}


DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE | int eggDrop ( int n, int k ) {
  if ( k == 1 || k == 0 ) return k;
  if ( n == 1 ) return k;
  int min = INT_MAX, x, res;
  for ( x = 1;
  x <= k;
  x ++ ) {
    res = max ( eggDrop ( n - 1, x - 1 ), eggDrop ( n, k - x ) );
    if ( res < min ) min = res;
  }
  return min + 1;
}


DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M | int numberofways ( int n, int m ) {
  int dp [ n + 2 ] [ n + 2 ];
  memset ( dp, 0, sizeof ( dp ) );
  dp [ 0 ] [ n + 1 ] = 1;
  for ( int k = n;
  k >= m;
  k -- ) {
    for ( int i = 0;
    i <= n;
    i ++ ) {
      dp [ i ] [ k ] = dp [ i ] [ k + 1 ];
      if ( i - k >= 0 ) dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i - k ] [ k ] );
    }
  }
  return dp [ n ] [ m ];
}


BUBBLE_SORT | void bubbleSort ( int arr [ ], int n ) {
  int i, j;
  for ( i = 0;
  i < n - 1;
  i ++ ) for ( j = 0;
  j < n - i - 1;
  j ++ ) if ( arr [ j ] > arr [ j + 1 ] ) swap ( & arr [ j ], & arr [ j + 1 ] );
}


GENERATE_ROTATIONS_GIVEN_STRING | void printRotatedString ( char str [ ] ) {
  int len = strlen ( str );
  char temp [ len ];
  for ( int i = 0;
  i < len;
  i ++ ) {
    int j = i;
    int k = 0;
    while ( str [ j ] != '\0' ) {
      temp [ k ] = str [ j ];
      k ++;
      j ++;
    }
    j = 0;
    while ( j < i ) {
      temp [ k ] = str [ j ];
      j ++;
      k ++;
    }
    printf ( "%s\n", temp );
  }
}


MID_POINT_LINE_GENERATION_ALGORITHM | void midPoint ( int X1, int Y1, int X2, int Y2 ) {
  int dx = X2 - X1;
  int dy = Y2 - Y1;
  int d = dy - ( dx / 2 );
  int x = X1, y = Y1;
  cout << x << "," << y << "\n";
  while ( x < X2 ) {
    x ++;
    if ( d < 0 ) d = d + dy;
    else {
      d += ( dy - dx );
      y ++;
    }
    cout << x << "," << y << "\n";
  }
}


FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA | void parabola ( float a, float b, float c ) {
  cout << "Vertex: (" << ( - b / ( 2 * a ) ) << ", " << ( ( ( 4 * a * c ) - ( b * b ) ) / ( 4 * a ) ) << ")" << endl;
  cout << "Focus: (" << ( - b / ( 2 * a ) ) << ", " << ( ( ( 4 * a * c ) - ( b * b ) + 1 ) / ( 4 * a ) ) << ")" << endl;
  cout << "Directrix: y=" << c - ( ( b * b ) + 1 ) * 4 * a << endl;
}


TRIANGULAR_NUMBERS | bool isTriangular ( int num ) {
  if ( num < 0 ) return false;
  int sum = 0;
  for ( int n = 1;
  sum <= num;
  n ++ ) {
    sum = sum + n;
    if ( sum == num ) return true;
  }
  return false;
}


PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES | int findMaximumPieces ( int n ) {
  return 1 + n * ( n + 1 ) / 2;
}


MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERATION | int minTimeForWritingChars ( int N, int insert, int remove, int copy ) {
  if ( N == 0 ) return 0;
  if ( N == 1 ) return insert;
  int dp [ N + 1 ];
  memset ( dp, 0, sizeof ( dp ) );
  for ( int i = 1;
  i <= N;
  i ++ ) {
    if ( i % 2 == 0 ) dp [ i ] = min ( dp [ i - 1 ] + insert, dp [ i / 2 ] + copy );
    else dp [ i ] = min ( dp [ i - 1 ] + insert, dp [ ( i + 1 ) / 2 ] + copy + remove );
  }
  return dp [ N ];
}


SEARCHING_ARRAY_ADJACENT_DIFFER_K | int search ( int arr [ ], int n, int x, int k ) {
  int i = 0;
  while ( i < n ) {
    if ( arr [ i ] == x ) return i;
    i = i + max ( 1, abs ( arr [ i ] - x ) / k );
  }
  cout << "number is not present!";
  return - 1;
}


FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY | int maxProduct ( int arr [ ], int n ) {
  if ( n < 3 ) return - 1;
  int max_product = INT_MIN;
  for ( int i = 0;
  i < n - 2;
  i ++ ) for ( int j = i + 1;
  j < n - 1;
  j ++ ) for ( int k = j + 1;
  k < n;
  k ++ ) max_product = max ( max_product, arr [ i ] * arr [ j ] * arr [ k ] );
  return max_product;
}


LONGEST_PALINDROME_SUBSEQUENCE_SPACE | int lps ( string & s ) {
  int n = s . length ( );
  int a [ n ];
  for ( int i = n - 1;
  i >= 0;
  i -- ) {
    int back_up = 0;
    for ( int j = i;
    j < n;
    j ++ ) {
      if ( j == i ) a [ j ] = 1;
      else if ( s [ i ] == s [ j ] ) {
        int temp = a [ j ];
        a [ j ] = back_up + 2;
        back_up = temp;
      }
      else {
        back_up = a [ j ];
        a [ j ] = max ( a [ j - 1 ], a [ j ] );
      }
    }
  }
  return a [ n - 1 ];
}


CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1 | bool checkCorrectOrNot ( string s ) {
  int count [ MAX_CHAR ] = {
    0 };
    int n = s . length ( );
    if ( n == 1 ) return true;
    for ( int i = 0, j = n - 1;
    i < j;
    i ++, j -- ) {
      count [ s [ i ] - 'a' ] ++;
      count [ s [ j ] - 'a' ] --;
    }
    for ( int i = 0;
    i < MAX_CHAR;
    i ++ ) if ( count [ i ] != 0 ) return false;
    return true;
  }
  

EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION | long int exponentiation ( long int base, long int exp ) {
  if ( exp == 0 ) return 1;
  if ( exp == 1 ) return base % N;
  long int t = exponentiation ( base, exp / 2 );
  t = ( t * t ) % N;
  if ( exp % 2 == 0 ) return t;
  else return ( ( base % N ) * t ) % N;
}


REMOVE_MINIMUM_NUMBER_ELEMENTS_NO_COMMON_ELEMENT_EXIST_ARRAY | int minRemove ( int a [ ], int b [ ], int n, int m ) {
  unordered_map < int, int > countA, countB;
  for ( int i = 0;
  i < n;
  i ++ ) countA [ a [ i ] ] ++;
  for ( int i = 0;
  i < m;
  i ++ ) countB [ b [ i ] ] ++;
  int res = 0;
  for ( auto x : countA ) if ( countB . find ( x . first ) != countB . end ( ) ) res += min ( x . second, countB [ x . first ] );
  return res;
}


FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY | int linearSearch ( int arr [ ], int n ) {
  int i;
  for ( i = 0;
  i < n;
  i ++ ) {
    if ( arr [ i ] == i ) return i;
  }
  return - 1;
}


ADD_1_TO_A_GIVEN_NUMBER | int addOne ( int x ) {
  int m = 1;
  while ( x & m ) {
    x = x ^ m;
    m <<= 1;
  }
  x = x ^ m;
  return x;
}


HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES | int height ( int N ) {
  return ceil ( log2 ( N + 1 ) ) - 1;
}


MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY | int minJumps ( int arr [ ], int n ) {
  if ( n == 1 ) return 0;
  int res = INT_MAX;
  for ( int i = n - 2;
  i >= 0;
  i -- ) {
    if ( i + arr [ i ] >= n - 1 ) {
      int sub_res = minJumps ( arr, i + 1 );
      if ( sub_res != INT_MAX ) res = min ( res, sub_res + 1 );
    }
  }
  return res;
}


PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2 | int fib ( int n ) {
  if ( n == 0 ) return 0;
  if ( n == 1 || n == 2 ) return ( f [ n ] = 1 );
  if ( f [ n ] ) return f [ n ];
  int k = ( n & 1 ) ? ( n + 1 ) / 2 : n / 2;
  f [ n ] = ( n & 1 ) ? ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( k - 1 ) ) : ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k );
  return f [ n ];
}


DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING | string decode ( string str ) {
  stack < int > integerstack;
  stack < char > stringstack;
  string temp = "", result = "";
  for ( int i = 0;
  i < str . length ( );
  i ++ ) {
    int count = 0;
    if ( str [ i ] >= '0' && str [ i ] <= '9' ) {
      while ( str [ i ] >= '0' && str [ i ] <= '9' ) {
        count = count * 10 + str [ i ] - '0';
        i ++;
      }
      i --;
      integerstack . push ( count );
    }
    else if ( str [ i ] == ']' ) {
      temp = "";
      count = 0;
      if ( ! integerstack . empty ( ) ) {
        count = integerstack . top ( );
        integerstack . pop ( );
      }
      while ( ! stringstack . empty ( ) && stringstack . top ( ) != '[' ) {
        temp = stringstack . top ( ) + temp;
        stringstack . pop ( );
      }
      if ( ! stringstack . empty ( ) && stringstack . top ( ) == '[' ) stringstack . pop ( );
      for ( int j = 0;
      j < count;
      j ++ ) result = result + temp;
      for ( int j = 0;
      j < result . length ( );
      j ++ ) stringstack . push ( result [ j ] );
      result = "";
    }
    else if ( str [ i ] == '[' ) {
      if ( str [ i - 1 ] >= '0' && str [ i - 1 ] <= '9' ) stringstack . push ( str [ i ] );
      else {
        stringstack . push ( str [ i ] );
        integerstack . push ( 1 );
      }
    }
    else stringstack . push ( str [ i ] );
  }
  while ( ! stringstack . empty ( ) ) {
    result = stringstack . top ( ) + result;
    stringstack . pop ( );
  }
  return result;
}


HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP | bool isHeap ( int arr [ ], int i, int n ) {
  if ( i > ( n - 2 ) / 2 ) return true;
  if ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 2 * i + 2 ] && isHeap ( arr, 2 * i + 1, n ) && isHeap ( arr, 2 * i + 2, n ) ) return true;
  return false;
}


HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1 | bool isHeap ( int arr [ ], int n ) {
  for ( int i = 0;
  i <= ( n - 2 ) / 2;
  i ++ ) {
    if ( arr [ 2 * i + 1 ] > arr [ i ] ) return false;
    if ( 2 * i + 2 < n && arr [ 2 * i + 2 ] > arr [ i ] ) return false;
  }
  return true;
}


CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND | int calcAngle ( double h, double m ) {
  if ( h < 0 || m < 0 || h > 12 || m > 60 ) printf ( "Wrong input" );
  if ( h == 12 ) h = 0;
  if ( m == 60 ) m = 0;
  int hour_angle = 0.5 * ( h * 60 + m );
  int minute_angle = 6 * m;
  int angle = abs ( hour_angle - minute_angle );
  angle = min ( 360 - angle, angle );
  return angle;
}


CONVERTING_DECIMAL_NUMBER_LYING_BETWEEN_1_TO_3999_TO_ROMAN_NUMERALS | int printRoman ( int number ) {
  int num [ ] = {
    1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 };
    string sym [ ] = {
      "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M" };
      int i = 12;
      while ( number > 0 ) {
        int div = number / num [ i ];
        number = number % num [ i ];
        while ( div -- ) {
          cout << sym [ i ];
        }
        i --;
      }
    }
    

SORTING_USING_TRIVIAL_HASH_FUNCTION | void sortUsingHash ( int a [ ], int n ) {
  int max = * std :: max_element ( a, a + n );
  int hash [ max + 1 ] = {
    0 };
    for ( int i = 0;
    i < n;
    i ++ ) hash [ a [ i ] ] += 1;
    for ( int i = 0;
    i <= max;
    i ++ ) {
      if ( hash [ i ] ) {
        for ( int j = 0;
        j < hash [ i ];
        j ++ ) {
          cout << i << " ";
        }
      }
    }
  }
  

SUM_PAIRWISE_PRODUCTS_2 | long long int findSum ( int n ) {
  return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24;
}


ENTRINGER_NUMBER | int zigzag ( int n, int k ) {
  if ( n == 0 && k == 0 ) return 1;
  if ( k == 0 ) return 0;
  return zigzag ( n, k - 1 ) + zigzag ( n - 1, n - k );
}


MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2 | int minSum ( int a [ ], int n ) {
  sort ( a, a + n );
  int num1 = 0;
  int num2 = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( i % 2 == 0 ) num1 = num1 * 10 + a [ i ];
    else num2 = num2 * 10 + a [ i ];
  }
  return num2 + num1;
}


SUBARRAY_NO_PAIR_SUM_DIVISIBLE_K | void subarrayDivisibleByK ( int arr [ ], int n, int k ) {
  map < int, int > mp;
  int s = 0, e = 0, maxs = 0, maxe = 0;
  mp [ arr [ 0 ] % k ] ++;
  for ( int i = 1;
  i < n;
  i ++ ) {
    int mod = arr [ i ] % k;
    while ( mp [ k - mod ] != 0 || ( mod == 0 && mp [ mod ] != 0 ) ) {
      mp [ arr [ s ] % k ] --;
      s ++;
    }
    mp [ mod ] ++;
    e ++;
    if ( ( e - s ) > ( maxe - maxs ) ) {
      maxe = e;
      maxs = s;
    }
  }
  cout << "The maximum size is " << maxe - maxs + 1 << " and " "the subarray is as follows\n";
  for ( int i = maxs;
  i <= maxe;
  i ++ ) cout << arr [ i ] << " ";
}


MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_K_TIMES | int maxProfit ( int price [ ], int n, int k ) {
  int profit [ k + 1 ] [ n + 1 ];
  for ( int i = 0;
  i <= k;
  i ++ ) profit [ i ] [ 0 ] = 0;
  for ( int j = 0;
  j <= n;
  j ++ ) profit [ 0 ] [ j ] = 0;
  for ( int i = 1;
  i <= k;
  i ++ ) {
    for ( int j = 1;
    j < n;
    j ++ ) {
      int max_so_far = INT_MIN;
      for ( int m = 0;
      m < j;
      m ++ ) max_so_far = max ( max_so_far, price [ j ] - price [ m ] + profit [ i - 1 ] [ m ] );
      profit [ i ] [ j ] = max ( profit [ i ] [ j - 1 ], max_so_far );
    }
  }
  return profit [ k ] [ n - 1 ];
}


MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED | int minValue ( int A [ ], int B [ ], int n ) {
  sort ( A, A + n );
  sort ( B, B + n );
  int result = 0;
  for ( int i = 0;
  i < n;
  i ++ ) result += ( A [ i ] * B [ n - i - 1 ] );
  return result;
}


FIND_MAXIMUM_ELEMENT_ROW_MATRIX | void maxelement ( int no_of_rows, int arr [ ] [ N ] ) {
  int i = 0;
  int max = 0;
  int result [ no_of_rows ];
  while ( i < no_of_rows ) {
    for ( int j = 0;
    j < N;
    j ++ ) {
      if ( arr [ i ] [ j ] > max ) {
        max = arr [ i ] [ j ];
      }
    }
    result [ i ] = max;
    max = 0;
    i ++;
  }
  printArray ( result, no_of_rows );
}


ROUND_OFF_NUMBER_GIVEN_NUMBER_SIGNIFICANT_DIGITS | void Round_off ( double N, double n ) {
  int h;
  double l, a, b, c, d, e, i, j, m, f, g;
  b = N;
  c = floor ( N );
  for ( i = 0;
  b >= 1;
  ++ i ) b = b / 10;
  d = n - i;
  b = N;
  b = b * pow ( 10, d );
  e = b + 0.5;
  if ( ( float ) e == ( float ) ceil ( b ) ) {
    f = ( ceil ( b ) );
    h = f - 2;
    if ( h % 2 != 0 ) {
      e = e - 1;
    }
  }
  j = floor ( e );
  m = pow ( 10, d );
  j = j / m;
  cout << "The number after rounding-off is " << j;
}


CHECK_WHETHER_POINT_EXISTS_CIRCLE_SECTOR_NOT | void checkPoint ( int radius, int x, int y, float percent, float startAngle ) {
  float endAngle = 360 / percent + startAngle;
  float polarradius = sqrt ( x * x + y * y );
  float Angle = atan ( y / x );
  if ( Angle >= startAngle && Angle <= endAngle && polarradius < radius ) printf ( "Point (%d, %d) exist in the circle sector\n", x, y );
  else printf ( "Point (%d, %d) does not exist in the circle sector\n", x, y );
}


NUMBER_IS_DIVISIBLE_BY_29_OR_NOT | bool isDivisible ( long long int n ) {
  while ( n / 100 ) {
    int last_digit = n % 10;
    n /= 10;
    n += last_digit * 3;
  }
  return ( n % 29 == 0 );
}


PRINT_ALL_DISTINCT_CHARACTERS_OF_A_STRING_IN_ORDER_3_METHODS | void printDistinct ( char * str ) {
  int count [ NO_OF_CHARS ];
  int i;
  for ( i = 0;
  * ( str + i );
  i ++ ) if ( * ( str + i ) != ' ' ) count [ * ( str + i ) ] ++;
  int n = i;
  for ( i = 0;
  i < n;
  i ++ ) if ( count [ * ( str + i ) ] == 1 ) cout << str [ i ];
}


PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE | void recursiveReverse ( string & str ) {
  stack < char > st;
  for ( int i = 0;
  i < str . length ( );
  i ++ ) st . push ( str [ i ] );
  for ( int i = 0;
  i < str . length ( );
  i ++ ) {
    str [ i ] = st . top ( );
    st . pop ( );
  }
}


PAINTING_FENCE_ALGORITHM | long countWays ( int n, int k ) {
  long total = k;
  int mod = 1000000007;
  int same = 0, diff = k;
  for ( int i = 2;
  i <= n;
  i ++ ) {
    same = diff;
    diff = total * ( k - 1 );
    diff = diff % mod;
    total = ( same + diff ) % mod;
  }
  return total;
}


COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_TIME | int CountSubstring ( char str [ ], int n ) {
  int ans = ( n * ( n + 1 ) ) / 2;
  int a_index = 0;
  int b_index = 0;
  int c_index = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( str [ i ] == 'a' ) {
      a_index = i + 1;
      ans -= min ( b_index, c_index );
    }
    else if ( str [ i ] == 'b' ) {
      b_index = i + 1;
      ans -= min ( a_index, c_index );
    }
    else {
      c_index = i + 1;
      ans -= min ( a_index, b_index );
    }
  }
  return ans;
}


CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION | long int stirlingFactorial ( int n ) {
  if ( n == 1 ) return 1;
  long int z;
  float e = 2.71;
  z = sqrt ( 2 * 3.14 * n ) * pow ( ( n / e ), n );
  return z;
}


LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRAY | string lexSmallest ( string a [ ], int n ) {
  sort ( a, a + n, compare );
  string answer = "";
  for ( int i = 0;
  i < n;
  i ++ ) answer += a [ i ];
  return answer;
}


PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND | int minMaxProduct ( int arr1 [ ], int arr2 [ ], int n1, int n2 ) {
  sort ( arr1, arr1 + n1 );
  sort ( arr2, arr2 + n2 );
  return arr1 [ n1 - 1 ] * arr2 [ 0 ];
}


FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM | bool subArrayExists ( int arr [ ], int n ) {
  unordered_set < int > sumSet;
  int sum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    sum += arr [ i ];
    if ( sum == 0 || sumSet . find ( sum ) != sumSet . end ( ) ) return true;
    sumSet . insert ( sum );
  }
  return false;
}


MINIMUM_PRODUCT_SUBSET_ARRAY | int minProductSubset ( int a [ ], int n ) {
  if ( n == 1 ) return a [ 0 ];
  int max_neg = INT_MIN;
  int min_pos = INT_MAX;
  int count_neg = 0, count_zero = 0;
  int prod = 1;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( a [ i ] == 0 ) {
      count_zero ++;
      continue;
    }
    if ( a [ i ] < 0 ) {
      count_neg ++;
      max_neg = max ( max_neg, a [ i ] );
    }
    if ( a [ i ] > 0 ) min_pos = min ( min_pos, a [ i ] );
    prod = prod * a [ i ];
  }
  if ( count_zero == n || ( count_neg == 0 && count_zero > 0 ) ) return 0;
  if ( count_neg == 0 ) return min_pos;
  if ( ! ( count_neg & 1 ) && count_neg != 0 ) {
    prod = prod / max_neg;
  }
  return prod;
}


NUMBER_NODES_TWO_VERTICES_ACYCLIC_GRAPH_DISJOINT_UNION_METHOD | int totalNodes ( vector < int > adjac [ ], int n, int x, int y ) {
  bool visited [ n + 1 ] = {
    0 };
    int p [ n ];
    queue < int > q;
    q . push ( x );
    visited [ x ] = true;
    int m;
    while ( ! q . empty ( ) ) {
      m = q . front ( );
      q . pop ( );
      for ( int i = 0;
      i < adjac [ m ] . size ( );
      ++ i ) {
        int h = adjac [ m ] [ i ];
        if ( ! visited [ h ] ) {
          visited [ h ] = true;
          p [ h ] = m;
          q . push ( h );
        }
      }
    }
    int count = 0;
    int i = p [ y ];
    while ( i != x ) {
      count ++;
      i = p [ i ];
    }
    return count;
  }
  

PRINTING_STRING_PLUS_PATTERN_MATRIX | void carveCross ( string str ) {
  int n = str . length ( );
  if ( n % 2 == 0 ) {
    cout << "Not possible. Please enter " << "odd length string.\n";
  }
  else {
    char arr [ max ] [ max ];
    int m = n / 2;
    for ( int i = 0;
    i < n;
    i ++ ) {
      for ( int j = 0;
      j < n;
      j ++ ) {
        arr [ i ] [ j ] = 'X';
      }
    }
    for ( int i = 0;
    i < n;
    i ++ ) {
      arr [ i ] [ m ] = str [ i ];
    }
    for ( int i = 0;
    i < n;
    i ++ ) {
      arr [ m ] [ i ] = str [ i ];
    }
    for ( int i = 0;
    i < n;
    i ++ ) {
      for ( int j = 0;
      j < n;
      j ++ ) {
        cout << arr [ i ] [ j ] << " ";
      }
      cout << "\n";
    }
  }
}


NEXT_GREATER_FREQUENCY_ELEMENT | void NFG ( int a [ ], int n, int freq [ ] ) {
  stack < int > s;
  s . push ( 0 );
  int res [ n ] = {
    0 };
    for ( int i = 1;
    i < n;
    i ++ ) {
      if ( freq [ a [ s . top ( ) ] ] > freq [ a [ i ] ] ) s . push ( i );
      else {
        while ( freq [ a [ s . top ( ) ] ] < freq [ a [ i ] ] && ! s . empty ( ) ) {
          res [ s . top ( ) ] = a [ i ];
          s . pop ( );
        }
        s . push ( i );
      }
    }
    while ( ! s . empty ( ) ) {
      res [ s . top ( ) ] = - 1;
      s . pop ( );
    }
    for ( int i = 0;
    i < n;
    i ++ ) {
      cout << res [ i ] << " ";
    }
  }
  

CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1 | bool checkReverse ( int arr [ ], int n ) {
  if ( n == 1 ) return true;
  int i;
  for ( i = 1;
  i < n && arr [ i - 1 ] < arr [ i ];
  i ++ );
  if ( i == n ) return true;
  int j = i;
  while ( arr [ j ] < arr [ j - 1 ] ) {
    if ( i > 1 && arr [ j ] < arr [ i - 2 ] ) return false;
    j ++;
  }
  if ( j == n ) return true;
  int k = j;
  if ( arr [ k ] < arr [ i - 1 ] ) return false;
  while ( k > 1 && k < n ) {
    if ( arr [ k ] < arr [ k - 1 ] ) return false;
    k ++;
  }
  return true;
}


FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2 | void findTriplets ( int arr [ ], int n ) {
  bool found = false;
  sort ( arr, arr + n );
  for ( int i = 0;
  i < n - 1;
  i ++ ) {
    int l = i + 1;
    int r = n - 1;
    int x = arr [ i ];
    while ( l < r ) {
      if ( x + arr [ l ] + arr [ r ] == 0 ) {
        printf ( "%d %d %d\n", x, arr [ l ], arr [ r ] );
        l ++;
        r --;
        found = true;
      }
      else if ( x + arr [ l ] + arr [ r ] < 0 ) l ++;
      else r --;
    }
  }
  if ( found == false ) cout << " No Triplet Found" << endl;
}


FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS | void findElements ( int arr [ ], int n ) {
  for ( int i = 0;
  i < n;
  i ++ ) {
    int count = 0;
    for ( int j = 0;
    j < n;
    j ++ ) if ( arr [ j ] > arr [ i ] ) count ++;
    if ( count >= 2 ) cout << arr [ i ] << " ";
  }
}


POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1 | void printArray ( int * a, int n ) {
  for ( int i = 0;
  i < n;
  i ++ ) cout << a [ i ] << " ";
  cout << endl;
  return;
}


FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE | int minRadius ( int k, int x [ ], int y [ ], int n ) {
  int dis [ n ];
  for ( int i = 0;
  i < n;
  i ++ ) dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ];
  sort ( dis, dis + n );
  return dis [ k - 1 ];
}


COUNT_SUBARRAYS_EQUAL_NUMBER_1S_0S | int countSubarrWithEqualZeroAndOne ( int arr [ ], int n ) {
  unordered_map < int, int > um;
  int curr_sum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    curr_sum += ( arr [ i ] == 0 ) ? - 1 : arr [ i ];
    um [ curr_sum ] ++;
  }
  int count = 0;
  for ( auto itr = um . begin ( );
  itr != um . end ( );
  itr ++ ) {
    if ( itr -> second > 1 ) count += ( ( itr -> second * ( itr -> second - 1 ) ) / 2 );
  }
  if ( um . find ( 0 ) != um . end ( ) ) count += um [ 0 ];
  return count;
}


MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS | void find ( vector < string > list1, vector < string > list2 ) {
  vector < string > res;
  int max_possible_sum = list1 . size ( ) + list2 . size ( ) - 2;
  for ( int sum = 0;
  sum <= max_possible_sum;
  sum ++ ) {
    for ( int i = 0;
    i <= sum;
    i ++ ) if ( i < list1 . size ( ) && ( sum - i ) < list2 . size ( ) && list1 [ i ] == list2 [ sum - i ] ) res . push_back ( list1 [ i ] );
    if ( res . size ( ) > 0 ) break;
  }
  for ( int i = 0;
  i < res . size ( );
  i ++ ) cout << res [ i ] << " ";
}


CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT | bool checkJumbled ( int num ) {
  if ( num / 10 == 0 ) return true;
  while ( num != 0 ) {
    if ( num / 10 == 0 ) return true;
    int digit1 = num % 10;
    int digit2 = ( num / 10 ) % 10;
    if ( abs ( digit2 - digit1 ) > 1 ) return false;
    num = num / 10;
  }
  return true;
}


CEILING_IN_A_SORTED_ARRAY_1 | int ceilSearch ( int arr [ ], int low, int high, int x ) {
  int mid;
  if ( x <= arr [ low ] ) return low;
  if ( x > arr [ high ] ) return - 1;
  mid = ( low + high ) / 2;
  if ( arr [ mid ] == x ) return mid;
  else if ( arr [ mid ] < x ) {
    if ( mid + 1 <= high && x <= arr [ mid + 1 ] ) return mid + 1;
    else return ceilSearch ( arr, mid + 1, high, x );
  }
  else {
    if ( mid - 1 >= low && x > arr [ mid - 1 ] ) return mid;
    else return ceilSearch ( arr, low, mid - 1, x );
  }
}


GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2 | int largestPower ( int n, int p ) {
  int x = 0;
  while ( n ) {
    n /= p;
    x += n;
  }
  return x;
}


MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY | int maxSum ( int arr [ ], int n ) {
  int res = INT_MIN;
  for ( int i = 0;
  i < n;
  i ++ ) {
    int curr_sum = 0;
    for ( int j = 0;
    j < n;
    j ++ ) {
      int index = ( i + j ) % n;
      curr_sum += j * arr [ index ];
    }
    res = max ( res, curr_sum );
  }
  return res;
}


MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1 | int smallestSubWithSum ( int arr [ ], int n, int x ) {
  int curr_sum = 0, min_len = n + 1;
  int start = 0, end = 0;
  while ( end < n ) {
    while ( curr_sum <= x && end < n ) {
      if ( curr_sum <= 0 && x > 0 ) {
        start = end;
        curr_sum = 0;
      }
      curr_sum += arr [ end ++ ];
    }
    while ( curr_sum > x && start < n ) {
      if ( end - start < min_len ) min_len = end - start;
      curr_sum -= arr [ start ++ ];
    }
  }
  return min_len;
}


LEXICOGRAPHICALLY_SMALLEST_STRING_WHOSE_HAMMING_DISTANCE_GIVEN_STRING_EXACTLY_K | void findString ( string str, int n, int k ) {
  if ( k == 0 ) {
    cout << str << endl;
    return;
  }
  string str2 = str;
  int p = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( str2 [ i ] != 'a' ) {
      str2 [ i ] = 'a';
      p ++;
      if ( p == k ) break;
    }
  }
  if ( p < k ) {
    for ( int i = n - 1;
    i >= 0;
    i -- ) if ( str [ i ] == 'a' ) {
      str2 [ i ] = 'b';
      p ++;
      if ( p == k ) break;
    }
  }
  cout << str2 << endl;
}


SUBSET_SUM_DIVISIBLE_M | bool modularSum ( int arr [ ], int n, int m ) {
  if ( n > m ) return true;
  bool DP [ m ];
  memset ( DP, false, m );
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( DP [ 0 ] ) return true;
    bool temp [ m ];
    memset ( temp, false, m );
    for ( int j = 0;
    j < m;
    j ++ ) {
      if ( DP [ j ] == true ) {
        if ( DP [ ( j + arr [ i ] ) % m ] == false ) temp [ ( j + arr [ i ] ) % m ] = true;
      }
    }
    for ( int j = 0;
    j < m;
    j ++ ) if ( temp [ j ] ) DP [ j ] = true;
    DP [ arr [ i ] % m ] = true;
  }
  return DP [ 0 ];
}


FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1 | int evenbinomialCoeffSum ( int n ) {
  return ( 1 << ( n - 1 ) );
}


EVEN_FIBONACCI_NUMBERS_SUM | int evenFibSum ( int limit ) {
  if ( limit < 2 ) return 0;
  long long int ef1 = 0, ef2 = 2;
  long long int sum = ef1 + ef2;
  while ( ef2 <= limit ) {
    long long int ef3 = 4 * ef2 + ef1;
    if ( ef3 > limit ) break;
    ef1 = ef2;
    ef2 = ef3;
    sum += ef2;
  }
  return sum;
}


MAKING_ELEMENTS_OF_TWO_ARRAYS_SAME_WITH_MINIMUM_INCREMENTDECREMENT | int MinOperation ( int a [ ], int b [ ], int n ) {
  sort ( a, a + n );
  sort ( b, b + n );
  int result = 0;
  for ( int i = 0;
  i < n;
  ++ i ) {
    result = result + abs ( a [ i ] - b [ i ] );
  }
  return result;
}


REQUIRED_MINIMUM_DIGITS_REMOVE_NUMBER_MAKE_PERFECT_SQUARE | int perfectSquare ( string s ) {
  int n = s . size ( );
  int ans = - 1;
  string num;
  for ( int i = 1;
  i < ( 1 << n );
  i ++ ) {
    string str = "";
    for ( int j = 0;
    j < n;
    j ++ ) {
      if ( ( i >> j ) & 1 ) {
        str += s [ j ];
      }
    }
    if ( str [ 0 ] != '0' ) {
      int temp = 0;
      for ( int j = 0;
      j < str . size ( );
      j ++ ) temp = temp * 10 + ( int ) ( str [ j ] - '0' );
      int k = sqrt ( temp );
      if ( k * k == temp ) {
        if ( ans < ( int ) str . size ( ) ) {
          ans = ( int ) str . size ( );
          num = str;
        }
      }
    }
  }
  if ( ans == - 1 ) return ans;
  else {
    cout << num << " ";
    return n - ans;
  }
}


COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS | int countWords ( string str [ ], int n ) {
  unordered_map < string, int > m;
  for ( int i = 0;
  i < n;
  i ++ ) m [ str [ i ] ] += 1;
  int res = 0;
  for ( auto it = m . begin ( );
  it != m . end ( );
  it ++ ) if ( ( it -> second == 2 ) ) res ++;
  return res;
}


COUNT_SET_BITS_IN_AN_INTEGER_4 | unsigned int countSetBitsRec ( unsigned int num ) {
  int nibble = 0;
  if ( 0 == num ) return num_to_bits [ 0 ];
  nibble = num & 0xf;
  return num_to_bits [ nibble ] + countSetBitsRec ( num >> 4 );
}


MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX | int maxCost ( int mat [ ] [ MAX ], int N ) {
  int dp [ N ] [ N ];
  memset ( dp, 0, sizeof ( dp ) );
  dp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ];
  for ( int i = 1;
  i < N;
  i ++ ) dp [ i ] [ 0 ] = mat [ i ] [ 0 ] + dp [ i - 1 ] [ 0 ];
  for ( int i = 1;
  i < N;
  i ++ ) for ( int j = 1;
  j < i + 1 && j < N;
  j ++ ) dp [ i ] [ j ] = mat [ i ] [ j ] + max ( dp [ i - 1 ] [ j - 1 ], dp [ i - 1 ] [ j ] );
  int result = 0;
  for ( int i = 0;
  i < N;
  i ++ ) if ( result < dp [ N - 1 ] [ i ] ) result = dp [ N - 1 ] [ i ];
  return result;
}


PERFECT_REVERSIBLE_STRING | bool isReversible ( string str ) {
  int i = 0, j = str . length ( ) - 1;
  while ( i < j ) {
    if ( str [ i ] != str [ j ] ) return false;
    i ++;
    j --;
  }
  return true;
}


FIND_SUM_ODD_FACTORS_NUMBER | int sumofoddFactors ( int n ) {
  int res = 1;
  while ( n % 2 == 0 ) n = n / 2;
  for ( int i = 3;
  i <= sqrt ( n );
  i ++ ) {
    int count = 0, curr_sum = 1;
    int curr_term = 1;
    while ( n % i == 0 ) {
      count ++;
      n = n / i;
      curr_term *= i;
      curr_sum += curr_term;
    }
    res *= curr_sum;
  }
  if ( n >= 2 ) res *= ( 1 + n );
  return res;
}


MAXIMUM_SUM_PATH_MATRIX_TOP_BOTTOM | int maxSum ( int mat [ SIZE ] [ SIZE ], int n ) {
  if ( n == 1 ) return mat [ 0 ] [ 0 ];
  int dp [ n ] [ n ];
  int maxSum = INT_MIN, max;
  for ( int j = 0;
  j < n;
  j ++ ) dp [ n - 1 ] [ j ] = mat [ n - 1 ] [ j ];
  for ( int i = n - 2;
  i >= 0;
  i -- ) {
    for ( int j = 0;
    j < n;
    j ++ ) {
      max = INT_MIN;
      if ( ( ( j - 1 ) >= 0 ) && ( max < dp [ i + 1 ] [ j - 1 ] ) ) max = dp [ i + 1 ] [ j - 1 ];
      if ( ( ( j + 1 ) < n ) && ( max < dp [ i + 1 ] [ j + 1 ] ) ) max = dp [ i + 1 ] [ j + 1 ];
      dp [ i ] [ j ] = mat [ i ] [ j ] + max;
    }
  }
  for ( int j = 0;
  j < n;
  j ++ ) if ( maxSum < dp [ 0 ] [ j ] ) maxSum = dp [ 0 ] [ j ];
  return maxSum;
}


COUNT_DIGITS_FACTORIAL_SET_1 | int findDigits ( int n ) {
  if ( n < 0 ) return 0;
  if ( n <= 1 ) return 1;
  double digits = 0;
  for ( int i = 2;
  i <= n;
  i ++ ) digits += log10 ( i );
  return floor ( digits ) + 1;
}


FIND_UNCOMMON_CHARACTERS_TWO_STRINGS | void findAndPrintUncommonChars ( string str1, string str2 ) {
  int present [ MAX_CHAR ];
  for ( int i = 0;
  i < MAX_CHAR;
  i ++ ) present [ i ] = 0;
  int l1 = str1 . size ( );
  int l2 = str2 . size ( );
  for ( int i = 0;
  i < l1;
  i ++ ) present [ str1 [ i ] - 'a' ] = 1;
  for ( int i = 0;
  i < l2;
  i ++ ) {
    if ( present [ str2 [ i ] - 'a' ] == 1 || present [ str2 [ i ] - 'a' ] == - 1 ) present [ str2 [ i ] - 'a' ] = - 1;
    else present [ str2 [ i ] - 'a' ] = 2;
  }
  for ( int i = 0;
  i < MAX_CHAR;
  i ++ ) if ( present [ i ] == 1 || present [ i ] == 2 ) cout << ( char ( i + 'a' ) ) << " ";
}


SQUARE_ROOT_OF_AN_INTEGER_1 | int floorSqrt ( int x ) {
  if ( x == 0 || x == 1 ) return x;
  int start = 1, end = x, ans;
  while ( start <= end ) {
    int mid = ( start + end ) / 2;
    if ( mid * mid == x ) return mid;
    if ( mid * mid < x ) {
      start = mid + 1;
      ans = mid;
    }
    else end = mid - 1;
  }
  return ans;
}


CHECK_POSSIBLE_PATH_2D_MATRIX | bool isPath ( int arr [ row ] [ col ] ) {
  arr [ 0 ] [ 0 ] = 1;
  for ( int i = 1;
  i < row;
  i ++ ) if ( arr [ i ] [ 0 ] != - 1 ) arr [ i ] [ 0 ] = arr [ i - 1 ] [ 0 ];
  for ( int j = 1;
  j < col;
  j ++ ) if ( arr [ 0 ] [ j ] != - 1 ) arr [ 0 ] [ j ] = arr [ 0 ] [ j - 1 ];
  for ( int i = 1;
  i < row;
  i ++ ) for ( int j = 1;
  j < col;
  j ++ ) if ( arr [ i ] [ j ] != - 1 ) arr [ i ] [ j ] = max ( arr [ i ] [ j - 1 ], arr [ i - 1 ] [ j ] );
  return ( arr [ row - 1 ] [ col - 1 ] == 1 );
}


NEWMAN_CONWAY_SEQUENCE_1 | int sequence ( int n ) {
  int f [ n + 1 ];
  int i;
  f [ 0 ] = 0;
  f [ 1 ] = 1;
  f [ 2 ] = 1;
  for ( i = 3;
  i <= n;
  i ++ ) f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ];
  return f [ n ];
}


PRINT_WORDS_STRING_REVERSE_ORDER | string wordReverse ( string str ) {
  int i = str . length ( ) - 1;
  int start, end = i + 1;
  string result = "";
  while ( i >= 0 ) {
    if ( str [ i ] == ' ' ) {
      start = i + 1;
      while ( start != end ) result += str [ start ++ ];
      result += ' ';
      end = i;
    }
    i --;
  }
  start = 0;
  while ( start != end ) result += str [ start ++ ];
  return result;
}


FIND_NUMBER_ENDLESS_POINTS | int countEndless ( bool input [ ] [ MAX ], int n ) {
  bool row [ n ] [ n ], col [ n ] [ n ];
  for ( int j = 0;
  j < n;
  j ++ ) {
    bool isEndless = 1;
    for ( int i = n - 1;
    i >= 0;
    i -- ) {
      if ( input [ i ] [ j ] == 0 ) isEndless = 0;
      col [ i ] [ j ] = isEndless;
    }
  }
  for ( int i = 0;
  i < n;
  i ++ ) {
    bool isEndless = 1;
    for ( int j = n - 1;
    j >= 0;
    j -- ) {
      if ( input [ i ] [ j ] == 0 ) isEndless = 0;
      row [ i ] [ j ] = isEndless;
    }
  }
  int ans = 0;
  for ( int i = 0;
  i < n;
  i ++ ) for ( int j = 1;
  j < n;
  j ++ ) if ( row [ i ] [ j ] && col [ i ] [ j ] ) ans ++;
  return ans;
}


CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER | bool check ( string s1, string s2 ) {
  int n = s1 . length ( );
  int m = s2 . length ( );
  bool dp [ n + 1 ] [ m + 1 ];
  for ( int i = 0;
  i <= n;
  i ++ ) {
    for ( int j = 0;
    j <= m;
    j ++ ) {
      dp [ i ] [ j ] = false;
    }
  }
  dp [ 0 ] [ 0 ] = true;
  for ( int i = 0;
  i < s1 . length ( );
  i ++ ) {
    for ( int j = 0;
    j <= s2 . length ( );
    j ++ ) {
      if ( dp [ i ] [ j ] ) {
        if ( j < s2 . length ( ) && ( toupper ( s1 [ i ] ) == s2 [ j ] ) ) dp [ i + 1 ] [ j + 1 ] = true;
        if ( ! isupper ( s1 [ i ] ) ) dp [ i + 1 ] [ j ] = true;
      }
    }
  }
  return ( dp [ n ] [ m ] );
}


CALCULATE_VOLUME_DODECAHEDRON | double vol_of_dodecahedron ( int side ) {
  return ( ( ( 15 + ( 7 * ( sqrt ( 5 ) ) ) ) / 4 ) * ( pow ( side, 3 ) ) );
}


PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11 | int remainder ( string str ) {
  int len = str . length ( );
  int num, rem = 0;
  for ( int i = 0;
  i < len;
  i ++ ) {
    num = rem * 10 + ( str [ i ] - '0' );
    rem = num % 11;
  }
  return rem;
}


SORT_STRING_CHARACTERS | void sortString ( string & str ) {
  sort ( str . begin ( ), str . end ( ) );
  cout << str;
}


BIRTHDAY_PARADOX | int find ( double p ) {
  return ceil ( sqrt ( 2 * 365 * log ( 1 / ( 1 - p ) ) ) );
}


CHECK_LINE_PASSES_ORIGIN | bool checkOrigin ( int x1, int y1, int x2, int y2 ) {
  return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) );
}


FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_2 | void findElements ( int arr [ ], int n ) {
  int first = INT_MIN, second = INT_MIN;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( arr [ i ] > first ) {
      second = first;
      first = arr [ i ];
    }
    else if ( arr [ i ] > second ) second = arr [ i ];
  }
  for ( int i = 0;
  i < n;
  i ++ ) if ( arr [ i ] < second ) cout << arr [ i ] << " ";
}


MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEMENTS_PICKED_1 | int minSum ( int ar [ ], int n ) {
  if ( n <= 4 ) return * min_element ( ar, ar + n );
  int sum [ n ];
  sum [ 0 ] = ar [ 0 ];
  sum [ 1 ] = ar [ 1 ];
  sum [ 2 ] = ar [ 2 ];
  sum [ 3 ] = ar [ 3 ];
  for ( int i = 4;
  i < n;
  i ++ ) sum [ i ] = ar [ i ] + ( * min_element ( sum + i - 4, sum + i ) );
  return * min_element ( sum + n - 4, sum + n );
}


CEILING_IN_A_SORTED_ARRAY | int ceilSearch ( int arr [ ], int low, int high, int x ) {
  int i;
  if ( x <= arr [ low ] ) return low;
  for ( i = low;
  i < high;
  i ++ ) {
    if ( arr [ i ] == x ) return i;
    if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1;
  }
  return - 1;
}


SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1 | void swap ( int * xp, int * yp ) {
  if ( xp == yp ) return;
  * xp = * xp + * yp;
  * yp = * xp - * yp;
  * xp = * xp - * yp;
}


MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ANAGRAM_WITHOUT_DELETION_OF_CHARACTER | int countManipulations ( string s1, string s2 ) {
  int count = 0;
  int char_count [ 26 ];
  for ( int i = 0;
  i < 26;
  i ++ ) {
    char_count [ i ] = 0;
  }
  for ( int i = 0;
  i < s1 . length ( );
  i ++ ) char_count [ s1 [ i ] - 'a' ] ++;
  for ( int i = 0;
  i < s2 . length ( );
  i ++ ) {
    char_count [ s2 [ i ] - 'a' ] --;
    if ( char_count [ s2 [ i ] - 'a' ] < 0 ) count ++;
  }
  return count;
}


CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS | bool flipsPossible ( int a [ ], int n ) {
  int count_odd = 0, count_even = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( a [ i ] & 1 ) count_odd ++;
    else count_even ++;
  }
  if ( count_odd % 2 && count_even % 2 ) return false;
  else return true;
}


CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL | int substringConversions ( string str, int k, int b ) {
  for ( int i = 0;
  i + k <= str . size ( );
  i ++ ) {
    string sub = str . substr ( i, k );
    int sum = 0, counter = 0;
    for ( int i = sub . size ( ) - 1;
    i >= 0;
    i -- ) {
      sum = sum + ( ( sub . at ( i ) - '0' ) * pow ( b, counter ) );
      counter ++;
    }
    cout << sum << " ";
  }
}


FIND_K_SUCH_THAT_ALL_ELEMENTS_IN_KTH_ROW_ARE_0_AND_KTH_COLUMN_ARE_1_IN_A_BOOLEAN_MATRIX | int find ( bool arr [ n ] [ n ] ) {
  int i = 0, j = n - 1;
  int res = - 1;
  while ( i < n && j >= 0 ) {
    if ( arr [ i ] [ j ] == 0 ) {
      while ( j >= 0 && ( arr [ i ] [ j ] == 0 || i == j ) ) j --;
      if ( j == - 1 ) {
        res = i;
        break;
      }
      else i ++;
    }
    else {
      while ( i < n && ( arr [ i ] [ j ] == 1 || i == j ) ) i ++;
      if ( i == n ) {
        res = j;
        break;
      }
      else j --;
    }
  }
  if ( res == - 1 ) return res;
  for ( int i = 0;
  i < n;
  i ++ ) if ( res != i && arr [ i ] [ res ] != 1 ) return - 1;
  for ( int j = 0;
  j < n;
  j ++ ) if ( res != j && arr [ res ] [ j ] != 0 ) return - 1;
  return res;
}


NUMBER_ORDERED_PAIRS_AI_AJ_0 | int countPairs ( int a [ ], int n ) {
  int count = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    for ( int j = i + 1;
    j < n;
    j ++ ) if ( ( a [ i ] & a [ j ] ) == 0 ) count += 2;
  }
  return count;
}


CIRCLE_LATTICE_POINTS | int countLattice ( int r ) {
  if ( r <= 0 ) return 0;
  int result = 4;
  for ( int x = 1;
  x < r;
  x ++ ) {
    int ySquare = r * r - x * x;
    int y = sqrt ( ySquare );
    if ( y * y == ySquare ) result += 4;
  }
  return result;
}


MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME | bool ispalindrome ( string s ) {
  int l = s . length ( );
  int j;
  for ( int i = 0, j = l - 1;
  i <= j;
  i ++, j -- ) {
    if ( s [ i ] != s [ j ] ) return false;
  }
  return true;
}


K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SEQUENCE | int find ( int a [ ], int b [ ], int k, int n1, int n2 ) {
  unordered_set < int > s;
  for ( int i = 0;
  i < n2;
  i ++ ) s . insert ( b [ i ] );
  int missing = 0;
  for ( int i = 0;
  i < n1;
  i ++ ) {
    if ( s . find ( a [ i ] ) == s . end ( ) ) missing ++;
    if ( missing == k ) return a [ i ];
  }
  return - 1;
}


PROGRAM_CHECK_ISBN | bool isValidISBN ( string & isbn ) {
  int n = isbn . length ( );
  if ( n != 10 ) return false;
  int sum = 0;
  for ( int i = 0;
  i < 9;
  i ++ ) {
    int digit = isbn [ i ] - '0';
    if ( 0 > digit || 9 < digit ) return false;
    sum += ( digit * ( 10 - i ) );
  }
  char last = isbn [ 9 ];
  if ( last != 'X' && ( last < '0' || last > '9' ) ) return false;
  sum += ( ( last == 'X' ) ? 10 : ( last - '0' ) );
  return ( sum % 11 == 0 );
}


COUNT_WAYS_INCREASE_LCS_LENGTH_TWO_STRINGS_ONE | int waysToIncreaseLCSBy1 ( string str1, string str2 ) {
  int m = str1 . length ( ), n = str2 . length ( );
  vector < int > position [ M ];
  for ( int i = 1;
  i <= n;
  i ++ ) position [ toInt ( str2 [ i - 1 ] ) ] . push_back ( i );
  int lcsl [ m + 2 ] [ n + 2 ];
  int lcsr [ m + 2 ] [ n + 2 ];
  for ( int i = 0;
  i <= m + 1;
  i ++ ) for ( int j = 0;
  j <= n + 1;
  j ++ ) lcsl [ i ] [ j ] = lcsr [ i ] [ j ] = 0;
  for ( int i = 1;
  i <= m;
  i ++ ) {
    for ( int j = 1;
    j <= n;
    j ++ ) {
      if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) lcsl [ i ] [ j ] = 1 + lcsl [ i - 1 ] [ j - 1 ];
      else lcsl [ i ] [ j ] = max ( lcsl [ i - 1 ] [ j ], lcsl [ i ] [ j - 1 ] );
    }
  }
  for ( int i = m;
  i >= 1;
  i -- ) {
    for ( int j = n;
    j >= 1;
    j -- ) {
      if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) lcsr [ i ] [ j ] = 1 + lcsr [ i + 1 ] [ j + 1 ];
      else lcsr [ i ] [ j ] = max ( lcsr [ i + 1 ] [ j ], lcsr [ i ] [ j + 1 ] );
    }
  }
  int ways = 0;
  for ( int i = 0;
  i <= m;
  i ++ ) {
    for ( char c = 'a';
    c <= 'z';
    c ++ ) {
      for ( int j = 0;
      j < position [ toInt ( c ) ] . size ( );
      j ++ ) {
        int p = position [ toInt ( c ) ] [ j ];
        if ( lcsl [ i ] [ p - 1 ] + lcsr [ i + 1 ] [ p + 1 ] == lcsl [ m ] [ n ] ) ways ++;
      }
    }
  }
  return ways;
}


DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1 | int eggDrop ( int n, int k ) {
  int eggFloor [ n + 1 ] [ k + 1 ];
  int res;
  int i, j, x;
  for ( i = 1;
  i <= n;
  i ++ ) {
    eggFloor [ i ] [ 1 ] = 1;
    eggFloor [ i ] [ 0 ] = 0;
  }
  for ( j = 1;
  j <= k;
  j ++ ) eggFloor [ 1 ] [ j ] = j;
  for ( i = 2;
  i <= n;
  i ++ ) {
    for ( j = 2;
    j <= k;
    j ++ ) {
      eggFloor [ i ] [ j ] = INT_MAX;
      for ( x = 1;
      x <= j;
      x ++ ) {
        res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ], eggFloor [ i ] [ j - x ] );
        if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j ] = res;
      }
    }
  }
  return eggFloor [ n ] [ k ];
}


WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS | int countWays ( int n ) {
  int table [ n + 1 ];
  memset ( table, 0, sizeof ( table ) );
  table [ 0 ] = 1;
  for ( int i = 1;
  i < n;
  i ++ ) for ( int j = i;
  j <= n;
  j ++ ) table [ j ] += table [ j - i ];
  return table [ n ];
}


PROGRAM_SUM_COSX_SERIES | double cosXSertiesSum ( double x, int n ) {
  x = x * ( PI / 180.0 );
  double res = 1;
  double sign = 1, fact = 1, pow = 1;
  for ( int i = 1;
  i < 5;
  i ++ ) {
    sign = sign * - 1;
    fact = fact * ( 2 * i - 1 ) * ( 2 * i );
    pow = pow * x * x;
    res = res + sign * pow / fact;
  }
  return res;
}


UNIQUE_CELLS_BINARY_MATRIX | int countUnique ( int mat [ ] [ MAX ], int n, int m ) {
  int rowsum [ n ], colsum [ m ];
  memset ( colsum, 0, sizeof ( colsum ) );
  memset ( rowsum, 0, sizeof ( rowsum ) );
  for ( int i = 0;
  i < n;
  i ++ ) for ( int j = 0;
  j < m;
  j ++ ) if ( mat [ i ] [ j ] ) {
    rowsum [ i ] ++;
    colsum [ j ] ++;
  }
  int uniquecount = 0;
  for ( int i = 0;
  i < n;
  i ++ ) for ( int j = 0;
  j < m;
  j ++ ) if ( mat [ i ] [ j ] && rowsum [ i ] == 1 && colsum [ j ] == 1 ) uniquecount ++;
  return uniquecount;
}


GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS | void findMin ( int V ) {
  vector < int > ans;
  for ( int i = n - 1;
  i >= 0;
  i -- ) {
    while ( V >= deno [ i ] ) {
      V -= deno [ i ];
      ans . push_back ( deno [ i ] );
    }
  }
  for ( int i = 0;
  i < ans . size ( );
  i ++ ) cout << ans [ i ] << "  ";
}


CHECK_INTEGER_OVERFLOW_MULTIPLICATION | bool isOverflow ( long long a, long long b ) {
  if ( a == 0 || b == 0 ) return false;
  long long result = a * b;
  if ( a == result / b ) return false;
  else return true;
}


DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_1 | int findDiff ( int arr [ ], int n ) {
  unordered_map < int, int > hm;
  for ( int i = 0;
  i < n;
  i ++ ) hm [ arr [ i ] ] ++;
  int max_count = 0, min_count = n;
  for ( auto x : hm ) {
    max_count = max ( max_count, x . second );
    min_count = min ( min_count, x . second );
  }
  return ( max_count - min_count );
}


COMPOSITE_NUMBER | bool isComposite ( int n ) {
  if ( n <= 1 ) return false;
  if ( n <= 3 ) return false;
  if ( n % 2 == 0 || n % 3 == 0 ) return true;
  for ( int i = 5;
  i * i <= n;
  i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return true;
  return false;
}


LARGEST_INCREASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS | int findLIS ( int A [ ], int n ) {
  unordered_map < int, int > hash;
  int LIS_size = 1;
  int LIS_index = 0;
  hash [ A [ 0 ] ] = 1;
  for ( int i = 1;
  i < n;
  i ++ ) {
    hash [ A [ i ] ] = hash [ A [ i ] - 1 ] + 1;
    if ( LIS_size < hash [ A [ i ] ] ) {
      LIS_size = hash [ A [ i ] ];
      LIS_index = A [ i ];
    }
  }
  cout << "LIS_size = " << LIS_size << "\n";
  cout << "LIS : ";
  int start = LIS_index - LIS_size + 1;
  while ( start <= LIS_index ) {
    cout << start << " ";
    start ++;
  }
}


COUNT_SET_BITS_IN_AN_INTEGER_2 | public : unsigned int countSetBits ( int n ) {
  unsigned int count = 0;
  while ( n ) {
    n &= ( n - 1 );
    count ++;
  }
  return count;
}


FIND_FOUR_ELEMENTS_A_B_C_AND_D_IN_AN_ARRAY_SUCH_THAT_AB_CD | bool findPairs ( int arr [ ], int n ) {
  map < int, pair < int, int > > Hash;
  for ( int i = 0;
  i < n;
  ++ i ) {
    for ( int j = i + 1;
    j < n;
    ++ j ) {
      int sum = arr [ i ] + arr [ j ];
      if ( Hash . find ( sum ) == Hash . end ( ) ) Hash [ sum ] = make_pair ( i, j );
      else {
        pair < int, int > pp = Hash [ sum ];
        cout << "(" << arr [ pp . first ] << ", " << arr [ pp . second ] << ") and (" << arr [ i ] << ", " << arr [ j ] << ")n";
        return true;
      }
    }
  }
  cout << "No pairs found";
  return false;
}


COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINTS | int countObtuseAngles ( int a, int b, int k ) {
  int c1 = ( b - a ) - 1;
  int c2 = ( k - b ) + ( a - 1 );
  if ( c1 == c2 ) return 0;
  return min ( c1, c2 );
}


NUMBER_TRIANGLES_N_MOVES_1 | int numberOfTriangles ( int n ) {
  int ans = 2 * ( pow ( 3, n ) ) - 1;
  return ans;
}


FIND_A_REPEATING_AND_A_MISSING_NUMBER | void printTwoElements ( int arr [ ], int size ) {
  int i;
  cout << " The repeating element is ";
  for ( i = 0;
  i < size;
  i ++ ) {
    if ( arr [ abs ( arr [ i ] ) - 1 ] > 0 ) arr [ abs ( arr [ i ] ) - 1 ] = - arr [ abs ( arr [ i ] ) - 1 ];
    else cout << abs ( arr [ i ] ) << "\n";
  }
  cout << "and the missing element is ";
  for ( i = 0;
  i < size;
  i ++ ) {
    if ( arr [ i ] > 0 ) cout << ( i + 1 );
  }
}


MINIMUM_DIFFERENCE_BETWEEN_GROUPS_OF_SIZE_TWO | ll calculate ( ll a [ ], ll n ) {
  sort ( a, a + n );
  vector < ll > s;
  for ( int i = 0, j = n - 1;
  i < j;
  i ++, j -- ) s . push_back ( a [ i ] + a [ j ] );
  ll mini = * min_element ( s . begin ( ), s . end ( ) );
  ll maxi = * max_element ( s . begin ( ), s . end ( ) );
  return abs ( maxi - mini );
}


FIND_PERIMETER_CYLINDER | int perimeter ( int diameter, int height ) {
  return 2 * ( diameter + height );
}


MAGICAL_INDICES_ARRAY | make_pair push_back int solve ( int A [ ], int n ) {
  int i, cnt = 0, j;
  int parent [ n + 1 ];
  int vis [ n + 1 ];
  memset ( parent, - 1, sizeof ( parent ) );
  memset ( vis, 0, sizeof ( vis ) );
  for ( i = 0;
  i < n;
  i ++ ) {
    j = i;
    if ( parent [ j ] == - 1 ) {
      while ( parent [ j ] == - 1 ) {
        parent [ j ] = i;
        j = ( j + A [ j ] + 1 ) % n;
      }
      if ( parent [ j ] == i ) {
        while ( ! vis [ j ] ) {
          vis [ j ] = 1;
          cnt ++;
          j = ( j + A [ j ] + 1 ) % n;
        }
      }
    }
  }
  return cnt;
}


FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY_1 | int binarySearch ( int arr [ ], int low, int high ) {
  if ( high >= low ) {
    int mid = ( low + high ) / 2;
    if ( mid == arr [ mid ] ) return mid;
    if ( mid > arr [ mid ] ) return binarySearch ( arr, ( mid + 1 ), high );
    else return binarySearch ( arr, low, ( mid - 1 ) );
  }
  return - 1;
}


FIND_SIZE_OF_THE_LARGEST_FORMED_BY_ALL_ONES_IN_A_BINARY_MATRIX | int findLargestPlus ( int mat [ N ] [ N ] ) {
  int left [ N ] [ N ], right [ N ] [ N ], top [ N ] [ N ], bottom [ N ] [ N ];
  for ( int i = 0;
  i < N;
  i ++ ) {
    top [ 0 ] [ i ] = mat [ 0 ] [ i ];
    bottom [ N - 1 ] [ i ] = mat [ N - 1 ] [ i ];
    left [ i ] [ 0 ] = mat [ i ] [ 0 ];
    right [ i ] [ N - 1 ] = mat [ i ] [ N - 1 ];
  }
  for ( int i = 0;
  i < N;
  i ++ ) {
    for ( int j = 1;
    j < N;
    j ++ ) {
      if ( mat [ i ] [ j ] == 1 ) left [ i ] [ j ] = left [ i ] [ j - 1 ] + 1;
      else left [ i ] [ j ] = 0;
      if ( mat [ j ] [ i ] == 1 ) top [ j ] [ i ] = top [ j - 1 ] [ i ] + 1;
      else top [ j ] [ i ] = 0;
      j = N - 1 - j;
      if ( mat [ j ] [ i ] == 1 ) bottom [ j ] [ i ] = bottom [ j + 1 ] [ i ] + 1;
      else bottom [ j ] [ i ] = 0;
      if ( mat [ i ] [ j ] == 1 ) right [ i ] [ j ] = right [ i ] [ j + 1 ] + 1;
      else right [ i ] [ j ] = 0;
      j = N - 1 - j;
    }
  }
  int n = 0;
  for ( int i = 0;
  i < N;
  i ++ ) {
    for ( int j = 0;
    j < N;
    j ++ ) {
      int len = min ( min ( top [ i ] [ j ], bottom [ i ] [ j ] ), min ( left [ i ] [ j ], right [ i ] [ j ] ) );
      if ( len > n ) n = len;
    }
  }
  if ( n ) return 4 * ( n - 1 ) + 1;
  return 0;
}


LEVEL_NODE_TREE_SOURCE_NODE_USING_BFS | void printLevels ( vector < int > graph [ ], int V, int x ) {
  int level [ V ];
  bool marked [ V ];
  queue < int > que;
  que . push ( x );
  level [ x ] = 0;
  marked [ x ] = true;
  while ( ! que . empty ( ) ) {
    x = que . front ( );
    que . pop ( );
    for ( int i = 0;
    i < graph [ x ] . size ( );
    i ++ ) {
      int b = graph [ x ] [ i ];
      if ( ! marked [ b ] ) {
        que . push ( b );
        level [ b ] = level [ x ] + 1;
        marked [ b ] = true;
      }
    }
  }
  cout << "Nodes" << "    " << "Level" << endl;
  for ( int i = 0;
  i < V;
  i ++ ) cout << " " << i << "   -->   " << level [ i ] << endl;
}


FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I_3 | void squareRoot ( int n, int p ) {
  n = n % p;
  for ( int x = 2;
  x < p;
  x ++ ) {
    if ( ( x * x ) % p == n ) {
      cout << "Square root is " << x;
      return;
    }
  }
  cout << "Square root doesn't exist";
}


CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE | bool areConsecutive ( int arr [ ], int n ) {
  if ( n < 1 ) return false;
  int min = getMin ( arr, n );
  int max = getMax ( arr, n );
  if ( max - min + 1 == n ) {
    bool * visited = ( bool * ) calloc ( n, sizeof ( bool ) );
    int i;
    for ( i = 0;
    i < n;
    i ++ ) {
      if ( visited [ arr [ i ] - min ] != false ) return false;
      visited [ arr [ i ] - min ] = true;
    }
    return true;
  }
  return false;
}


SMALLEST_SUBSET_SUM_GREATER_ELEMENTS | int minElements ( int arr [ ], int n ) {
  int halfSum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) halfSum = halfSum + arr [ i ];
  halfSum = halfSum / 2;
  sort ( arr, arr + n, greater < int > ( ) );
  int res = 0, curr_sum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    curr_sum += arr [ i ];
    res ++;
    if ( curr_sum > halfSum ) return res;
  }
  return res;
}


SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1 | long long int calculateSum ( int n ) {
  long long int sum = 0;
  sum = 1 << n;
  return ( sum - 1 );
}


SWAP_TWO_NIBBLES_BYTE | int swapNibbles ( int x ) {
  return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 );
}


CHECK_CHARACTERS_GIVEN_STRING_CAN_REARRANGED_FORM_PALINDROME_1 | bool canFormPalindrome ( string str ) {
  vector < char > list;
  for ( int i = 0;
  i < str . length ( );
  i ++ ) {
    auto pos = find ( list . begin ( ), list . end ( ), str [ i ] );
    if ( pos != list . end ( ) ) {
      auto posi = find ( list . begin ( ), list . end ( ), str [ i ] );
      list . erase ( posi );
    }
    else list . push_back ( str [ i ] );
  }
  if ( str . length ( ) % 2 == 0 && list . empty ( ) || ( str . length ( ) % 2 == 1 && list . size ( ) == 1 ) ) return true;
  else return false;
}


WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER | int countWays ( string s ) {
  int count [ 26 ] = {
    0 };
    for ( char x : s ) count [ x - 'a' ] ++;
    count [ s [ 0 ] - 'a' ] = 1;
    int ans = 1;
    for ( int i = 0;
    i < 26;
    ++ i ) if ( count [ i ] != 0 ) ans *= count [ i ];
    return ans;
  }
  

ENTRINGER_NUMBER_1 | int zigzag ( int n, int k ) {
  int dp [ n + 1 ] [ k + 1 ];
  memset ( dp, 0, sizeof ( dp ) );
  dp [ 0 ] [ 0 ] = 1;
  for ( int i = 1;
  i <= n;
  i ++ ) dp [ i ] [ 0 ] = 0;
  for ( int i = 1;
  i <= n;
  i ++ ) {
    for ( int j = 1;
    j <= i;
    j ++ ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ i - j ];
    return dp [ n ] [ k ];
  }
  int main ( ) {
    int n = 4, k = 3;
    cout << zigzag ( n, k ) << endl;
    return 0;
  }
  

COUNT_PAIRS_DIFFERENCE_EQUAL_K | int countPairsWithDiffK ( int arr [ ], int n, int k ) {
  int count = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    for ( int j = i + 1;
    j < n;
    j ++ ) if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr [ i ] == k ) count ++;
  }
  return count;
}


EXPECTATION_EXPECTED_VALUE_ARRAY | float calc_Expectation ( float a [ ], float n ) {
  float prb = ( 1 / n );
  float sum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) sum += a [ i ] * prb;
  return sum;
}


GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE | void printGrouped ( string str ) {
  int n = str . length ( );
  int count [ MAX_CHAR ] = {
    0 };
    for ( int i = 0;
    i < n;
    i ++ ) count [ str [ i ] - 'a' ] ++;
    for ( int i = 0;
    i < n;
    i ++ ) {
      while ( count [ str [ i ] - 'a' ] -- ) cout << str [ i ];
      count [ str [ i ] - 'a' ] = 0;
    }
  }
  

MAXIMUM_PATH_SUM_POSITION_JUMPS_DIVISIBILITY_CONDITION | void printMaxSum ( int arr [ ], int n ) {
  int dp [ n ];
  memset ( dp, 0, sizeof dp );
  for ( int i = 0;
  i < n;
  i ++ ) {
    dp [ i ] = arr [ i ];
    int maxi = 0;
    for ( int j = 1;
    j <= sqrt ( i + 1 );
    j ++ ) {
      if ( ( ( i + 1 ) % j == 0 ) && ( i + 1 ) != j ) {
        if ( dp [ j - 1 ] > maxi ) maxi = dp [ j - 1 ];
        if ( dp [ ( i + 1 ) / j - 1 ] > maxi && j != 1 ) maxi = dp [ ( i + 1 ) / j - 1 ];
      }
    }
    dp [ i ] += maxi;
  }
  for ( int i = 0;
  i < n;
  i ++ ) cout << dp [ i ] << " ";
}


PROGRAM_CIRCUMFERENCE_PARALLELOGRAM | float circumferenceparallelogram ( float a, float b ) {
  return ( ( 2 * a ) + ( 2 * b ) );
}


COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2 | int numberOfPaths ( int m, int n ) {
  int dp [ n ] = {
    1 };
    dp [ 0 ] = 1;
    for ( int i = 0;
    i < m;
    i ++ ) {
      for ( int j = 1;
      j < n;
      j ++ ) {
        dp [ j ] += dp [ j - 1 ];
      }
    }
    return dp [ n - 1 ];
  }
  

REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM | int remAnagram ( string str1, string str2 ) {
  int count1 [ CHARS ] = {
    0 },
    count2 [ CHARS ] = {
      0 };
      for ( int i = 0;
      str1 [ i ] != '\0';
      i ++ ) count1 [ str1 [ i ] - 'a' ] ++;
      for ( int i = 0;
      str2 [ i ] != '\0';
      i ++ ) count2 [ str2 [ i ] - 'a' ] ++;
      int result = 0;
      for ( int i = 0;
      i < 26;
      i ++ ) result += abs ( count1 [ i ] - count2 [ i ] );
      return result;
    }
    

SUM_DIVISORS_1_N_1 | int divisorSum ( int n ) {
  int sum = 0;
  for ( int i = 1;
  i <= n;
  ++ i ) sum += ( n / i ) * i;
  return sum;
}


FIND_LENGTH_LONGEST_SUBSEQUENCE_ONE_STRING_SUBSTRING_ANOTHER_STRING | int maxSubsequenceSubstring ( char x [ ], char y [ ], int n, int m ) {
  int dp [ MAX ] [ MAX ];
  for ( int i = 0;
  i <= m;
  i ++ ) for ( int j = 0;
  j <= n;
  j ++ ) dp [ i ] [ j ] = 0;
  for ( int i = 1;
  i <= m;
  i ++ ) {
    for ( int j = 1;
    j <= n;
    j ++ ) {
      if ( x [ j - 1 ] == y [ i - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];
      else dp [ i ] [ j ] = dp [ i ] [ j - 1 ];
    }
  }
  int ans = 0;
  for ( int i = 1;
  i <= m;
  i ++ ) ans = max ( ans, dp [ i ] [ n ] );
  return ans;
}


SUM_FAI_AJ_PAIRS_ARRAY_N_INTEGERS | int sum ( int a [ ], int n ) {
  unordered_map < int, int > cnt;
  int ans = 0, pre_sum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    ans += ( i * a [ i ] ) - pre_sum;
    pre_sum += a [ i ];
    if ( cnt [ a [ i ] - 1 ] ) ans -= cnt [ a [ i ] - 1 ];
    if ( cnt [ a [ i ] + 1 ] ) ans += cnt [ a [ i ] + 1 ];
    cnt [ a [ i ] ] ++;
  }
  return ans;
}


BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER | void bin ( unsigned n ) {
  if ( n > 1 ) bin ( n / 2 );
  cout << n % 2;
}


KNAPSACK_PROBLEM | int knapSack ( int W, int wt [ ], int val [ ], int n ) {
  if ( n == 0 || W == 0 ) return 0;
  if ( wt [ n - 1 ] > W ) return knapSack ( W, wt, val, n - 1 );
  else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 ], wt, val, n - 1 ), knapSack ( W, wt, val, n - 1 ) );
}


DOUBLE_FACTORIAL_1 | unsigned int doublefactorial ( unsigned int n ) {
  int res = 1;
  for ( int i = n;
  i >= 0;
  i = i - 2 ) {
    if ( i == 0 || i == 1 ) return res;
    else res *= i;
  }
}


COUNT_DIGITS_FACTORIAL_SET_2 | long long findDigits ( int n ) {
  if ( n < 0 ) return 0;
  if ( n <= 1 ) return 1;
  double x = ( ( n * log10 ( n / M_E ) + log10 ( 2 * M_PI * n ) / 2.0 ) );
  return floor ( x ) + 1;
}


DELANNOY_NUMBER_1 | int dealnnoy ( int n, int m ) {
  int dp [ m + 1 ] [ n + 1 ];
  for ( int i = 0;
  i <= m;
  i ++ ) dp [ i ] [ 0 ] = 1;
  for ( int i = 0;
  i <= m;
  i ++ ) dp [ 0 ] [ i ] = 1;
  for ( int i = 1;
  i <= m;
  i ++ ) for ( int j = 1;
  j <= n;
  j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j - 1 ] + dp [ i ] [ j - 1 ];
  return dp [ m ] [ n ];
}


FIND_THE_MISSING_NUMBER_2 | int getMissingNo ( int a [ ], int n ) {
  int x1 = a [ 0 ];
  int x2 = 1;
  for ( int i = 1;
  i < n;
  i ++ ) x1 = x1 ^ a [ i ];
  for ( int i = 2;
  i <= n + 1;
  i ++ ) x2 = x2 ^ i;
  return ( x1 ^ x2 );
}


FIND_NUMBER_OF_TRIANGLES_POSSIBLE | int findNumberOfTriangles ( int arr [ ], int n ) {
  qsort ( arr, n, sizeof ( arr [ 0 ] ), comp );
  int count = 0;
  for ( int i = 0;
  i < n - 2;
  ++ i ) {
    int k = i + 2;
    for ( int j = i + 1;
    j < n;
    ++ j ) {
      while ( k < n && arr [ i ] + arr [ j ] > arr [ k ] ) ++ k;
      if ( k > j ) count += k - j - 1;
    }
  }
  return count;
}


NUMBER_TRIANGLES_N_MOVES | int numberOfTriangles ( int n ) {
  int answer [ n + 1 ] = {
    0 };
    answer [ 0 ] = 1;
    for ( int i = 1;
    i <= n;
    i ++ ) answer [ i ] = answer [ i - 1 ] * 3 + 2;
    return answer [ n ];
  }
  

CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX | bool areSumSame ( int a [ ] [ MAX ], int n, int m ) {
  int sum1 = 0, sum2 = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    sum1 = 0, sum2 = 0;
    for ( int j = 0;
    j < m;
    j ++ ) {
      sum1 += a [ i ] [ j ];
      sum2 += a [ j ] [ i ];
    }
    if ( sum1 == sum2 ) return true;
  }
  return false;
}


WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO | bool isPowerOfTwo ( int n ) {
  if ( n == 0 ) return 0;
  while ( n != 1 ) {
    if ( n % 2 != 0 ) return 0;
    n = n / 2;
  }
  return 1;
}


PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS | void amendSentence ( string str ) {
  for ( int i = 0;
  i < str . length ( );
  i ++ ) {
    if ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) {
      str [ i ] = str [ i ] + 32;
      if ( i != 0 ) cout << " ";
      cout << str [ i ];
    }
    else cout << str [ i ];
  }
}


CHECK_DIVISIBILITY_BINARY_STRING_2K | bool isDivisible ( char str [ ], int k ) {
  int n = strlen ( str );
  int c = 0;
  for ( int i = 0;
  i < k;
  i ++ ) if ( str [ n - i - 1 ] == '0' ) c ++;
  return ( c == k );
}


SUBSEQUENCES_SIZE_THREE_ARRAY_WHOSE_SUM_DIVISIBLE_M | int coutSubSeq ( int A [ ], int N, int M ) {
  int sum = 0;
  int ans = 0;
  for ( int i = 0;
  i < N;
  i ++ ) {
    for ( int j = i + 1;
    j < N;
    j ++ ) {
      for ( int k = j + 1;
      k < N;
      k ++ ) {
        sum = A [ i ] + A [ j ] + A [ k ];
        if ( sum % M == 0 ) ans ++;
      }
    }
  }
  return ans;
}


LONGEST_CONSECUTIVE_SUBSEQUENCE | int findLongestConseqSubseq ( int arr [ ], int n ) {
  unordered_set < int > S;
  int ans = 0;
  for ( int i = 0;
  i < n;
  i ++ ) S . insert ( arr [ i ] );
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( S . find ( arr [ i ] - 1 ) == S . end ( ) ) {
      int j = arr [ i ];
      while ( S . find ( j ) != S . end ( ) ) j ++;
      ans = max ( ans, j - arr [ i ] );
    }
  }
  return ans;
}


FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1 | int findIndex ( int n ) {
  float fibo = 2.078087 * log ( n ) + 1.672276;
  return round ( fibo );
}


LARGEST_DIVISIBLE_PAIRS_SUBSET | int largestSubset ( int a [ ], int n ) {
  sort ( a, a + n );
  int dp [ n ];
  dp [ n - 1 ] = 1;
  for ( int i = n - 2;
  i >= 0;
  i -- ) {
    int mxm = 0;
    for ( int j = i + 1;
    j < n;
    j ++ ) if ( a [ j ] % a [ i ] == 0 ) mxm = max ( mxm, dp [ j ] );
    dp [ i ] = 1 + mxm;
  }
  return * max_element ( dp, dp + n );
}


FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2 | bool isPowerOfFour ( unsigned int n ) {
  return n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ! ( n & 0xAAAAAAAA );
}


COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLUTION | int nCrModp ( int n, int r, int p ) {
  int C [ r + 1 ];
  memset ( C, 0, sizeof ( C ) );
  C [ 0 ] = 1;
  for ( int i = 1;
  i <= n;
  i ++ ) {
    for ( int j = min ( i, r );
    j > 0;
    j -- ) C [ j ] = ( C [ j ] + C [ j - 1 ] ) % p;
  }
  return C [ r ];
}


ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10 | int round ( int n ) {
  int a = ( n / 10 ) * 10;
  int b = a + 10;
  return ( n - a > b - n ) ? b : a;
}


SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING_ORDER_1 | void twoWaySort ( int arr [ ], int n ) {
  for ( int i = 0;
  i < n;
  i ++ ) if ( arr [ i ] & 1 ) arr [ i ] *= - 1;
  sort ( arr, arr + n );
  for ( int i = 0;
  i < n;
  i ++ ) if ( arr [ i ] & 1 ) arr [ i ] *= - 1;
}


POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS | void pointClip ( int XY [ ] [ 2 ], int n, int Xmin, int Ymin, int Xmax, int Ymax ) {
  cout << "Point inside the viewing pane:" << endl;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( ( XY [ i ] [ 0 ] >= Xmin ) && ( XY [ i ] [ 0 ] <= Xmax ) ) {
      if ( ( XY [ i ] [ 1 ] >= Ymin ) && ( XY [ i ] [ 1 ] <= Ymax ) ) cout << "[" << XY [ i ] [ 0 ] << "," << XY [ i ] [ 1 ] << "] ";
    }
  }
  cout << "\n" << endl;
  cout << "Point outside the viewing pane:" << endl;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( ( XY [ i ] [ 0 ] < Xmin ) || ( XY [ i ] [ 0 ] > Xmax ) ) cout << "[" << XY [ i ] [ 0 ] << "," << XY [ i ] [ 1 ] << "] ";
    if ( ( XY [ i ] [ 1 ] < Ymin ) || ( XY [ i ] [ 1 ] > Ymax ) ) cout << "[" << XY [ i ] [ 0 ] << "," << XY [ i ] [ 1 ] << "] ";
  }
}


WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS | int countTransformation ( string a, string b ) {
  int n = a . size ( ), m = b . size ( );
  if ( m == 0 ) return 1;
  int dp [ m + 1 ] [ n + 1 ];
  memset ( dp, 0, sizeof ( dp ) );
  for ( int i = 0;
  i < m;
  i ++ ) {
    for ( int j = i;
    j < n;
    j ++ ) {
      if ( i == 0 ) {
        if ( j == 0 ) dp [ i ] [ j ] = ( a [ j ] == b [ i ] ) ? 1 : 0;
        else if ( a [ j ] == b [ i ] ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1;
        else dp [ i ] [ j ] = dp [ i ] [ j - 1 ];
      }
      else {
        if ( a [ j ] == b [ i ] ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ];
        else dp [ i ] [ j ] = dp [ i ] [ j - 1 ];
      }
    }
  }
  return dp [ m - 1 ] [ n - 1 ];
}


FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS | void relativeComplement ( int arr1 [ ], int arr2 [ ], int n, int m ) {
  int i = 0, j = 0;
  while ( i < n && j < m ) {
    if ( arr1 [ i ] < arr2 [ j ] ) {
      cout << arr1 [ i ] << " ";
      i ++;
    }
    else if ( arr1 [ i ] > arr2 [ j ] ) {
      j ++;
    }
    else if ( arr1 [ i ] == arr2 [ j ] ) {
      i ++;
      j ++;
    }
  }
  while ( i < n ) cout << arr1 [ i ] << " ";
}


COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY | int countPairs ( int arr [ ], int n ) {
  int ans = 0;
  for ( int i = 0;
  i < n;
  i ++ ) for ( int j = i + 1;
  j < n;
  j ++ ) if ( arr [ i ] == arr [ j ] ) ans ++;
  return ans;
}


GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT | void findSymPairs ( int arr [ ] [ 2 ], int row ) {
  unordered_map < int, int > hM;
  for ( int i = 0;
  i < row;
  i ++ ) {
    int first = arr [ i ] [ 0 ];
    int sec = arr [ i ] [ 1 ];
    if ( hM . find ( sec ) != hM . end ( ) && hM [ sec ] == first ) cout << "(" << sec << ", " << first << ")" << endl;
    else hM [ first ] = sec;
  }
}


COUNT_SUBSEQUENCES_PRODUCT_LESS_K | int productSubSeqCount ( vector < int > & arr, int k ) {
  int n = arr . size ( );
  int dp [ k + 1 ] [ n + 1 ];
  memset ( dp, 0, sizeof ( dp ) );
  for ( int i = 1;
  i <= k;
  i ++ ) {
    for ( int j = 1;
    j <= n;
    j ++ ) {
      dp [ i ] [ j ] = dp [ i ] [ j - 1 ];
      if ( arr [ j - 1 ] <= i && arr [ j - 1 ] > 0 ) dp [ i ] [ j ] += dp [ i / arr [ j - 1 ] ] [ j - 1 ] + 1;
    }
  }
  return dp [ k ] [ n ];
}


REARRANGE_ARRAY_ARRI_ARRJ_EVEN_ARRI | void rearrangeArr ( int arr [ ], int n ) {
  int evenPos = n / 2;
  int oddPos = n - evenPos;
  int tempArr [ n ];
  for ( int i = 0;
  i < n;
  i ++ ) tempArr [ i ] = arr [ i ];
  sort ( tempArr, tempArr + n );
  int j = oddPos - 1;
  for ( int i = 0;
  i < n;
  i += 2 ) {
    arr [ i ] = tempArr [ j ];
    j --;
  }
  j = oddPos;
  for ( int i = 1;
  i < n;
  i += 2 ) {
    arr [ i ] = tempArr [ j ];
    j ++;
  }
  for ( int i = 0;
  i < n;
  i ++ ) cout << arr [ i ] << " ";
}


MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK | int minRotation ( int input, int unlock_code ) {
  int rotation = 0;
  int input_digit, code_digit;
  while ( input || unlock_code ) {
    input_digit = input % 10;
    code_digit = unlock_code % 10;
    rotation += min ( abs ( input_digit - code_digit ), 10 - abs ( input_digit - code_digit ) );
    input /= 10;
    unlock_code /= 10;
  }
  return rotation;
}


REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURRENCES | void arrangeString ( string str, int x, int y ) {
  int count_0 = 0;
  int count_1 = 0;
  int len = str . length ( );
  for ( int i = 0;
  i < len;
  i ++ ) {
    if ( str [ i ] == '0' ) count_0 ++;
    else count_1 ++;
  }
  while ( count_0 > 0 || count_1 > 0 ) {
    for ( int j = 0;
    j < x && count_0 > 0;
    j ++ ) {
      if ( count_0 > 0 ) {
        cout << "0";
        count_0 --;
      }
    }
    for ( int j = 0;
    j < y && count_1 > 0;
    j ++ ) {
      if ( count_1 > 0 ) {
        cout << "1";
        count_1 --;
      }
    }
  }
}


DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE | int maxSumIS ( int arr [ ], int n ) {
  int i, j, max = 0;
  int msis [ n ];
  for ( i = 0;
  i < n;
  i ++ ) msis [ i ] = arr [ i ];
  for ( i = 1;
  i < n;
  i ++ ) for ( j = 0;
  j < i;
  j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j ] + arr [ i ] ) msis [ i ] = msis [ j ] + arr [ i ];
  for ( i = 0;
  i < n;
  i ++ ) if ( max < msis [ i ] ) max = msis [ i ];
  return max;
}


NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES | int countRect ( int n ) {
  int ans = 0;
  for ( int length = 1;
  length <= sqrt ( n );
  ++ length ) for ( int height = length;
  height * length <= n;
  ++ height ) ans ++;
  return ans;
}


PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM | void printSeries ( int n ) {
  for ( int i = 1;
  i <= n;
  i ++ ) {
    int num = i * ( i + 1 ) * ( i + 2 ) / 6;
    cout << num << " ";
  }
}


PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX | void transpose ( int A [ ] [ N ], int B [ ] [ N ] ) {
  int i, j;
  for ( i = 0;
  i < N;
  i ++ ) for ( j = 0;
  j < N;
  j ++ ) B [ i ] [ j ] = A [ j ] [ i ];
}


PROGRAM_DECIMAL_BINARY_CONVERSION_1 | int decToBinary ( int n ) {
  for ( int i = 31;
  i >= 0;
  i -- ) {
    int k = n >> i;
    if ( k & 1 ) cout << "1";
    else cout << "0";
  }
}


REARRANGE_ARRAY_ORDER_SMALLEST_LARGEST_2ND_SMALLEST_2ND_LARGEST | void rearrangeArray ( int arr [ ], int n ) {
  sort ( arr, arr + n );
  int tempArr [ n ];
  int ArrIndex = 0;
  for ( int i = 0, j = n - 1;
  i <= n / 2 || j > n / 2;
  i ++, j -- ) {
    tempArr [ ArrIndex ] = arr [ i ];
    ArrIndex ++;
    tempArr [ ArrIndex ] = arr [ j ];
    ArrIndex ++;
  }
  for ( int i = 0;
  i < n;
  i ++ ) arr [ i ] = tempArr [ i ];
}


SUM_AREA_RECTANGLES_POSSIBLE_ARRAY | int MaxTotalRectangleArea ( int a [ ], int n ) {
  sort ( a, a + n, greater < int > ( ) );
  int sum = 0;
  bool flag = false;
  int len;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) && ( ! flag ) ) {
      flag = true;
      len = a [ i + 1 ];
      i ++;
    }
    else if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 1 ) && ( flag ) ) {
      sum = sum + a [ i + 1 ] * len;
      flag = false;
      i ++;
    }
  }
  return sum;
}


GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1 | int countSubStr ( char str [ ] ) {
  int res = 0;
  for ( int i = 0;
  str [ i ] != '\0';
  i ++ ) {
    if ( str [ i ] == '1' ) {
      for ( int j = i + 1;
      str [ j ] != '\0';
      j ++ ) if ( str [ j ] == '1' ) res ++;
    }
  }
  return res;
}


DYNAMIC_PROGRAMMING_SET_31_OPTIMAL_STRATEGY_FOR_A_GAME | int optimalStrategyOfGame ( int * arr, int n ) {
  int table [ n ] [ n ];
  for ( int gap = 0;
  gap < n;
  ++ gap ) {
    for ( int i = 0, j = gap;
    j < n;
    ++ i, ++ j ) {
      int x = ( ( i + 2 ) <= j ) ? table [ i + 2 ] [ j ] : 0;
      int y = ( ( i + 1 ) <= ( j - 1 ) ) ? table [ i + 1 ] [ j - 1 ] : 0;
      int z = ( i <= ( j - 2 ) ) ? table [ i ] [ j - 2 ] : 0;
      table [ i ] [ j ] = max ( arr [ i ] + min ( x, y ), arr [ j ] + min ( y, z ) );
    }
  }
  return table [ 0 ] [ n - 1 ];
}


REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S | string replace ( string s, char c1, char c2 ) {
  int l = s . length ( );
  for ( int i = 0;
  i < l;
  i ++ ) {
    if ( s [ i ] == c1 ) s [ i ] = c2;
    else if ( s [ i ] == c2 ) s [ i ] = c1;
  }
  return s;
}


FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1 | int maxLen ( int arr [ ], int n ) {
  unordered_map < int, int > presum;
  int sum = 0;
  int max_len = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    sum += arr [ i ];
    if ( arr [ i ] == 0 && max_len == 0 ) max_len = 1;
    if ( sum == 0 ) max_len = i + 1;
    if ( presum . find ( sum ) != presum . end ( ) ) {
      max_len = max ( max_len, i - presum [ sum ] );
    }
    else {
      presum [ sum ] = i;
    }
  }
  return max_len;
}


PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1 | int summingSeries ( long n ) {
  return pow ( n, 2 );
}


RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY | int recSearch ( int arr [ ], int l, int r, int x ) {
  if ( r < l ) return - 1;
  if ( arr [ l ] == x ) return l;
  if ( arr [ r ] == x ) return r;
  return recSearch ( arr, l + 1, r - 1, x );
}


PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN | void printPath ( string str ) {
  int i = 0;
  int curX = 0, curY = 0;
  while ( i < str . length ( ) ) {
    int nextX = ( str [ i ] - 'A' ) / 5;
    int nextY = ( str [ i ] - 'B' + 1 ) % 5;
    while ( curX > nextX ) {
      cout << "Move Up" << endl;
      curX --;
    }
    while ( curY > nextY ) {
      cout << "Move Left" << endl;
      curY --;
    }
    while ( curX < nextX ) {
      cout << "Move Down" << endl;
      curX ++;
    }
    while ( curY < nextY ) {
      cout << "Move Right" << endl;
      curY ++;
    }
    cout << "Press OK" << endl;
    i ++;
  }
}


COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX | int count ( int n, int x ) {
  int count == 0;
  for ( int i = 1;
  i <= n && i <= x;
  i ++ ) {
    if ( x / i <= n && x % i == 0 ) count ++;
  }
  return count;
}


PROGRAM_FIND_LINE_PASSING_2_POINTS | pair < double, double > void lineFromPoints ( pdd P, pdd Q ) {
  double a = Q . second - P . second;
  double b = P . first - Q . first;
  double c = a * ( P . first ) + b * ( P . second );
  if ( b < 0 ) {
    cout << "The line passing through points P and Q is: " << a << "x " << b << "y = " << c << endl;
  }
  else {
    cout << "The line passing through points P and Q is: " << a << "x + " << b << "y = " << c << endl;
  }
}


REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT | int solve ( int dp [ ] [ MAX ], int a [ ], int low, int high, int turn ) {
  if ( low == high ) return a [ low ] * turn;
  if ( dp [ low ] [ high ] != 0 ) return dp [ low ] [ high ];
  dp [ low ] [ high ] = max ( a [ low ] * turn + solve ( dp, a, low + 1, high, turn + 1 ), a [ high ] * turn + solve ( dp, a, low, high - 1, turn + 1 ) );
  return dp [ low ] [ high ];
}


CHECK_GRAPHS_CYCLE_ODD_LENGTH | bool containsOdd ( int G [ ] [ V ], int src ) {
  int colorArr [ V ];
  for ( int i = 0;
  i < V;
  ++ i ) colorArr [ i ] = - 1;
  colorArr [ src ] = 1;
  queue < int > q;
  q . push ( src );
  while ( ! q . empty ( ) ) {
    int u = q . front ( );
    q . pop ( );
    if ( G [ u ] [ u ] == 1 ) return true;
    for ( int v = 0;
    v < V;
    ++ v ) {
      if ( G [ u ] [ v ] && colorArr [ v ] == - 1 ) {
        colorArr [ v ] = 1 - colorArr [ u ];
        q . push ( v );
      }
      else if ( G [ u ] [ v ] && colorArr [ v ] == colorArr [ u ] ) return true;
    }
  }
  return false;
}


SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP | int seiresSum ( int n, int a [ ] ) {
  int res = 0;
  for ( int i = 0;
  i < 2 * n;
  i ++ ) {
    if ( i % 2 == 0 ) res += a [ i ] * a [ i ];
    else res -= a [ i ] * a [ i ];
  }
  return res;
}


PROGRAM_DECIMAL_BINARY_CONVERSION | void decToBinary ( int n ) {
  int binaryNum [ 32 ];
  int i = 0;
  while ( n > 0 ) {
    binaryNum [ i ] = n % 2;
    n = n / 2;
    i ++;
  }
  for ( int j = i - 1;
  j >= 0;
  j -- ) cout << binaryNum [ j ];
}


LONGEST_ALTERNATING_POSITIVE_NEGATIVE_SUBARRAY_STARTING_EVERY_INDEX | void longestAlternating ( int arr [ ], int n ) {
  int count [ n ];
  count [ n - 1 ] = 1;
  for ( int i = n - 2;
  i >= 0;
  i -- ) {
    if ( arr [ i ] * arr [ i + 1 ] < 0 ) count [ i ] = count [ i + 1 ] + 1;
    else count [ i ] = 1;
  }
  for ( int i = 0;
  i < n;
  i ++ ) cout << count [ i ] << " ";
}


FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS | string lexNext ( string s, int n ) {
  for ( int i = n - 1;
  i >= 0;
  i -- ) {
    if ( s [ i ] != 'z' ) {
      s [ i ] ++;
      return s;
    }
    s [ i ] = 'a';
  }
}


NUMBER_DECIMAL_NUMBERS_LENGTH_K_STRICT_MONOTONE | int getNumStrictMonotone ( int len ) {
  int DP [ len ] [ DP_s ];
  memset ( DP, 0, sizeof ( DP ) );
  for ( int i = 0;
  i < DP_s;
  ++ i ) DP [ 0 ] [ i ] = i + 1;
  for ( int i = 1;
  i < len;
  ++ i ) for ( int j = 1;
  j < DP_s;
  ++ j ) DP [ i ] [ j ] = DP [ i - 1 ] [ j - 1 ] + DP [ i ] [ j - 1 ];
  return DP [ len - 1 ] [ DP_s - 1 ];
}


PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES | void constructTree ( int n, int d, int h ) {
  if ( d == 1 ) {
    if ( n == 2 && h == 1 ) {
      cout << "1 2" << endl;
      return;
    }
    cout << "-1" << endl;
    return;
  }
  if ( d > 2 * h ) {
    cout << "-1" << endl;
    return;
  }
  for ( int i = 1;
  i <= h;
  i ++ ) cout << i << " " << i + 1 << endl;
  if ( d > h ) {
    cout << "1" << " " << h + 2 << endl;
    for ( int i = h + 2;
    i <= d;
    i ++ ) {
      cout << i << " " << i + 1 << endl;
    }
  }
  for ( int i = d + 1;
  i < n;
  i ++ ) {
    int k = 1;
    if ( d == h ) k = 2;
    cout << k << " " << i + 1 << endl;
  }
}


MINIMAL_OPERATIONS_MAKE_NUMBER_MAGICAL | int calculate ( string s ) {
  int ans = 6;
  for ( int i = 0;
  i < 10;
  ++ i ) {
    for ( int j = 0;
    j < 10;
    ++ j ) {
      for ( int k = 0;
      k < 10;
      ++ k ) {
        for ( int l = 0;
        l < 10;
        ++ l ) {
          for ( int m = 0;
          m < 10;
          ++ m ) {
            for ( int n = 0;
            n < 10;
            ++ n ) {
              if ( i + j + k == l + m + n ) {
                int c = 0;
                if ( i != s [ 0 ] - '0' ) c ++;
                if ( j != s [ 1 ] - '0' ) c ++;
                if ( k != s [ 2 ] - '0' ) c ++;
                if ( l != s [ 3 ] - '0' ) c ++;
                if ( m != s [ 4 ] - '0' ) c ++;
                if ( n != s [ 5 ] - '0' ) c ++;
                if ( c < ans ) ans = c;
              }
            }
          }
        }
      }
    }
  }
  return ans;
}


FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE | bool find3Numbers ( int A [ ], int arr_size, int sum ) {
  int l, r;
  for ( int i = 0;
  i < arr_size - 2;
  i ++ ) {
    for ( int j = i + 1;
    j < arr_size - 1;
    j ++ ) {
      for ( int k = j + 1;
      k < arr_size;
      k ++ ) {
        if ( A [ i ] + A [ j ] + A [ k ] == sum ) {
          cout << "Triplet is " << A [ i ] << ", " << A [ j ] << ", " << A [ k ];
          return true;
        }
      }
    }
  }
  return false;
}


AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_IN_IT | float getArea ( int a ) {
  float area = ( M_PI * a * a ) / 4.0;
  return area;
}


GIVEN_TWO_UNSORTED_ARRAYS_FIND_PAIRS_WHOSE_SUM_X_1 | void findPairs ( int arr1 [ ], int arr2 [ ], int n, int m, int x ) {
  unordered_set < int > s;
  for ( int i = 0;
  i < n;
  i ++ ) s . insert ( arr1 [ i ] );
  for ( int j = 0;
  j < m;
  j ++ ) if ( s . find ( x - arr2 [ j ] ) != s . end ( ) ) cout << x - arr2 [ j ] << " " << arr2 [ j ] << endl;
}


QUICK_WAY_CHECK_CHARACTERS_STRING | bool allCharactersSame ( string s ) {
  int n = s . length ( );
  for ( int i = 1;
  i < n;
  i ++ ) if ( s [ i ] != s [ 0 ] ) return false;
  return true;
}


REARRANGE_ARRAY_ARRI | int fix ( int A [ ], int len ) {
  for ( int i = 0;
  i < len;
  i ++ ) {
    if ( A [ i ] != - 1 && A [ i ] != i ) {
      int x = A [ i ];
      while ( A [ x ] != - 1 && A [ x ] != x ) {
        int y = A [ x ];
        A [ x ] = x;
        x = y;
      }
      A [ x ] = x;
      if ( A [ i ] != i ) {
        A [ i ] = - 1;
      }
    }
  }
}


PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS | bool isProduct ( int arr [ ], int n, int x ) {
  for ( int i = 0;
  i < n - 1;
  i ++ ) for ( int j = i + 1;
  i < n;
  i ++ ) if ( arr [ i ] * arr [ j ] == x ) return true;
  return false;
}


SORT_GIVEN_STRING_USING_CHARACTER_SEARCH | string sortString ( string str, int n ) {
  string new_str = "";
  for ( int i = 'a';
  i <= 'z';
  i ++ ) for ( int j = 0;
  j < n;
  j ++ ) if ( str [ j ] == i ) new_str += str [ j ];
  return new_str;
}


COUNT_OF_OCCURRENCES_OF_A_101_PATTERN_IN_A_STRING | int countPattern ( string str ) {
  int len = str . size ( );
  bool oneSeen = 0;
  int count = 0;
  for ( int i = 0;
  i < len;
  i ++ ) {
    if ( str [ i ] == '1' && oneSeen == 1 ) if ( str [ i - 1 ] == '0' ) count ++;
    if ( str [ i ] == '1' && oneSeen == 0 ) {
      oneSeen = 1;
      continue;
    }
    if ( str [ i ] != '0' && str [ i ] != '1' ) oneSeen = 0;
  }
  return count;
}


C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE | void rotate ( int arr [ ], int n ) {
  int x = arr [ n - 1 ], i;
  for ( i = n - 1;
  i > 0;
  i -- ) arr [ i ] = arr [ i - 1 ];
  arr [ 0 ] = x;
}


QUEUE_BASED_APPROACH_FOR_FIRST_NON_REPEATING_CHARACTER_IN_A_STREAM | void firstnonrepeating ( char str [ ] ) {
  queue < char > q;
  int charCount [ MAX_CHAR ] = {
    0 };
    for ( int i = 0;
    str [ i ];
    i ++ ) {
      q . push ( str [ i ] );
      charCount [ str [ i ] - 'a' ] ++;
      while ( ! q . empty ( ) ) {
        if ( charCount [ q . front ( ) - 'a' ] > 1 ) q . pop ( );
        else {
          cout << q . front ( ) << " ";
          break;
        }
      }
      if ( q . empty ( ) ) cout << - 1 << " ";
    }
    cout << endl;
  }
  

CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT | bool check ( string str ) {
  int n = str . length ( );
  if ( ( str [ n - 1 ] - '0' ) % 2 != 0 ) return false;
  int digitSum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) digitSum += ( str [ i ] - '0' );
  return ( digitSum % 3 == 0 );
}


MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N | int getMinSquares ( unsigned int n ) {
  if ( sqrt ( n ) - floor ( sqrt ( n ) ) == 0 ) return 1;
  if ( n <= 3 ) return n;
  int res = n;
  for ( int x = 1;
  x <= n;
  x ++ ) {
    int temp = x * x;
    if ( temp > n ) break;
    else res = min ( res, 1 + getMinSquares ( n - temp ) );
  }
  return res;
}


OVERLAPPING_SUM_TWO_ARRAY | int findSum ( int A [ ], int B [ ], int n ) {
  unordered_map < int, int > hash;
  for ( int i = 0;
  i < n;
  i ++ ) {
    hash [ A [ i ] ] ++;
    hash [ B [ i ] ] ++;
  }
  int sum = 0;
  for ( auto x : hash ) if ( x . second == 1 ) sum += x . first;
  return sum;
}


MOBILE_NUMERIC_KEYPAD_PROBLEM | int getCount ( char keypad [ ] [ 3 ], int n ) {
  if ( keypad == NULL || n <= 0 ) return 0;
  if ( n == 1 ) return 10;
  int odd [ 10 ], even [ 10 ];
  int i = 0, j = 0, useOdd = 0, totalCount = 0;
  for ( i = 0;
  i <= 9;
  i ++ ) odd [ i ] = 1;
  for ( j = 2;
  j <= n;
  j ++ ) {
    useOdd = 1 - useOdd;
    if ( useOdd == 1 ) {
      even [ 0 ] = odd [ 0 ] + odd [ 8 ];
      even [ 1 ] = odd [ 1 ] + odd [ 2 ] + odd [ 4 ];
      even [ 2 ] = odd [ 2 ] + odd [ 1 ] + odd [ 3 ] + odd [ 5 ];
      even [ 3 ] = odd [ 3 ] + odd [ 2 ] + odd [ 6 ];
      even [ 4 ] = odd [ 4 ] + odd [ 1 ] + odd [ 5 ] + odd [ 7 ];
      even [ 5 ] = odd [ 5 ] + odd [ 2 ] + odd [ 4 ] + odd [ 8 ] + odd [ 6 ];
      even [ 6 ] = odd [ 6 ] + odd [ 3 ] + odd [ 5 ] + odd [ 9 ];
      even [ 7 ] = odd [ 7 ] + odd [ 4 ] + odd [ 8 ];
      even [ 8 ] = odd [ 8 ] + odd [ 0 ] + odd [ 5 ] + odd [ 7 ] + odd [ 9 ];
      even [ 9 ] = odd [ 9 ] + odd [ 6 ] + odd [ 8 ];
    }
    else {
      odd [ 0 ] = even [ 0 ] + even [ 8 ];
      odd [ 1 ] = even [ 1 ] + even [ 2 ] + even [ 4 ];
      odd [ 2 ] = even [ 2 ] + even [ 1 ] + even [ 3 ] + even [ 5 ];
      odd [ 3 ] = even [ 3 ] + even [ 2 ] + even [ 6 ];
      odd [ 4 ] = even [ 4 ] + even [ 1 ] + even [ 5 ] + even [ 7 ];
      odd [ 5 ] = even [ 5 ] + even [ 2 ] + even [ 4 ] + even [ 8 ] + even [ 6 ];
      odd [ 6 ] = even [ 6 ] + even [ 3 ] + even [ 5 ] + even [ 9 ];
      odd [ 7 ] = even [ 7 ] + even [ 4 ] + even [ 8 ];
      odd [ 8 ] = even [ 8 ] + even [ 0 ] + even [ 5 ] + even [ 7 ] + even [ 9 ];
      odd [ 9 ] = even [ 9 ] + even [ 6 ] + even [ 8 ];
    }
  }
  totalCount = 0;
  if ( useOdd == 1 ) {
    for ( i = 0;
    i <= 9;
    i ++ ) totalCount += even [ i ];
  }
  else {
    for ( i = 0;
    i <= 9;
    i ++ ) totalCount += odd [ i ];
  }
  return totalCount;
}


FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY | void findLarger ( int arr [ ], int n ) {
  sort ( arr, arr + n );
  for ( int i = n - 1;
  i >= n / 2;
  i -- ) cout << arr [ i ] << " ";
}


SUM_BINOMIAL_COEFFICIENTS | int binomialCoeffSum ( int n ) {
  int C [ n + 1 ] [ n + 1 ];
  for ( int i = 0;
  i <= n;
  i ++ ) {
    for ( int j = 0;
    j <= min ( i, n );
    j ++ ) {
      if ( j == 0 || j == i ) C [ i ] [ j ] = 1;
      else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ];
    }
  }
  int sum = 0;
  for ( int i = 0;
  i <= n;
  i ++ ) sum += C [ n ] [ i ];
  return sum;
}


FIND_COMMON_ELEMENT_ROWS_ROW_WISE_SORTED_MATRIX_1 | int findCommon ( int mat [ M ] [ N ] ) {
  unordered_map < int, int > cnt;
  int i, j;
  for ( i = 0;
  i < M;
  i ++ ) {
    cnt [ mat [ i ] [ 0 ] ] ++;
    for ( j = 1;
    j < N;
    j ++ ) {
      if ( mat [ i ] [ j ] != mat [ i ] [ j - 1 ] ) cnt [ mat [ i ] [ j ] ] ++;
    }
  }
  for ( auto ele : cnt ) {
    if ( ele . second == M ) return ele . first;
  }
  return - 1;
}


SIEVE_ERATOSTHENES_0N_TIME_COMPLEXITY | void manipulated_seive ( int N ) {
  isprime [ 0 ] = isprime [ 1 ] = false;
  for ( long long int i = 2;
  i < N;
  i ++ ) {
    if ( isprime [ i ] ) {
      prime . push_back ( i );
      SPF [ i ] = i;
    }
    for ( long long int j = 0;
    j < ( int ) prime . size ( ) && i * prime [ j ] < N && prime [ j ] <= SPF [ i ];
    j ++ ) {
      isprime [ i * prime [ j ] ] = false;
      SPF [ i * prime [ j ] ] = prime [ j ];
    }
  }
}


COUNT_SORTED_ROWS_MATRIX | int sortedCount ( int mat [ ] [ MAX ], int r, int c ) {
  int result = 0;
  for ( int i = 0;
  i < r;
  i ++ ) {
    int j;
    for ( j = 0;
    j < c - 1;
    j ++ ) if ( mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] ) break;
    if ( j == c - 1 ) result ++;
  }
  for ( int i = 0;
  i < r;
  i ++ ) {
    int j;
    for ( j = c - 1;
    j > 0;
    j -- ) if ( mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] ) break;
    if ( c > 1 && j == 0 ) result ++;
  }
  return result;
}


NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECTED_GRAPH_N_NODES | int numOfways ( int n, int k ) {
  int p = 1;
  if ( k % 2 ) p = - 1;
  return ( pow ( n - 1, k ) + p * ( n - 1 ) ) / n;
}


DICE_THROW_PROBLEM | int findWays ( int m, int n, int x ) {
  int table [ n + 1 ] [ x + 1 ];
  memset ( table, 0, sizeof ( table ) );
  for ( int j = 1;
  j <= m && j <= x;
  j ++ ) table [ 1 ] [ j ] = 1;
  for ( int i = 2;
  i <= n;
  i ++ ) for ( int j = 1;
  j <= x;
  j ++ ) for ( int k = 1;
  k <= m && k < j;
  k ++ ) table [ i ] [ j ] += table [ i - 1 ] [ j - k ];
  return table [ n ] [ x ];
}


MINIMUM_NUMBER_DELETIONS_MAKE_STRING_PALINDROME_SET_2 | int getLevenstein ( string const & input ) {
  string revInput ( input . rbegin ( ), input . rend ( ) );
  int n = input . size ( );
  vector < vector < int > > dp ( n + 1, vector < int > ( n + 1, - 1 ) );
  for ( int i = 0;
  i <= n;
  ++ i ) {
    dp [ 0 ] [ i ] = i;
    dp [ i ] [ 0 ] = i;
  }
  for ( int i = 1;
  i <= n;
  ++ i ) {
    for ( int j = 1;
    j <= n;
    ++ j ) {
      if ( input [ i - 1 ] == revInput [ j - 1 ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ];
      else dp [ i ] [ j ] = 1 + min ( {
        dp [ i - 1 ] [ j ], dp [ i ] [ j - 1 ] }
        );
      }
    }
    int res = numeric_limits < int > :: max ( );
    for ( int i = n, j = 0;
    i >= 0;
    -- i, ++ j ) {
      res = min ( res, dp [ i ] [ j ] );
      if ( i < n ) res = min ( res, dp [ i + 1 ] [ j ] );
      if ( i > 0 ) res = min ( res, dp [ i - 1 ] [ j ] );
    }
    return res;
  }
  

DYNAMIC_PROGRAMMING_SET_37_BOOLEAN_PARENTHESIZATION_PROBLEM | int countParenth ( char symb [ ], char oper [ ], int n ) {
  int F [ n ] [ n ], T [ n ] [ n ];
  for ( int i = 0;
  i < n;
  i ++ ) {
    F [ i ] [ i ] = ( symb [ i ] == 'F' ) ? 1 : 0;
    T [ i ] [ i ] = ( symb [ i ] == 'T' ) ? 1 : 0;
  }
  for ( int gap = 1;
  gap < n;
  ++ gap ) {
    for ( int i = 0, j = gap;
    j < n;
    ++ i, ++ j ) {
      T [ i ] [ j ] = F [ i ] [ j ] = 0;
      for ( int g = 0;
      g < gap;
      g ++ ) {
        int k = i + g;
        int tik = T [ i ] [ k ] + F [ i ] [ k ];
        int tkj = T [ k + 1 ] [ j ] + F [ k + 1 ] [ j ];
        if ( oper [ k ] == '&' ) {
          T [ i ] [ j ] += T [ i ] [ k ] * T [ k + 1 ] [ j ];
          F [ i ] [ j ] += ( tik * tkj - T [ i ] [ k ] * T [ k + 1 ] [ j ] );
        }
        if ( oper [ k ] == '|' ) {
          F [ i ] [ j ] += F [ i ] [ k ] * F [ k + 1 ] [ j ];
          T [ i ] [ j ] += ( tik * tkj - F [ i ] [ k ] * F [ k + 1 ] [ j ] );
        }
        if ( oper [ k ] == '^' ) {
          T [ i ] [ j ] += F [ i ] [ k ] * T [ k + 1 ] [ j ] + T [ i ] [ k ] * F [ k + 1 ] [ j ];
          F [ i ] [ j ] += T [ i ] [ k ] * T [ k + 1 ] [ j ] + F [ i ] [ k ] * F [ k + 1 ] [ j ];
        }
      }
    }
  }
  return T [ 0 ] [ n - 1 ];
}


PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_1 | int Circumference ( int l, int w ) {
  return ( 2 * ( l + w ) );
}


THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1 | void thirdLargest ( int arr [ ], int arr_size ) {
  if ( arr_size < 3 ) {
    printf ( " Invalid Input " );
    return;
  }
  int first = arr [ 0 ], second = INT_MIN, third = INT_MIN;
  for ( int i = 1;
  i < arr_size;
  i ++ ) {
    if ( arr [ i ] > first ) {
      third = second;
      second = first;
      first = arr [ i ];
    }
    else if ( arr [ i ] > second ) {
      third = second;
      second = arr [ i ];
    }
    else if ( arr [ i ] > third ) third = arr [ i ];
  }
  printf ( "The third Largest element is %d\n", third );
}


MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE | int findMinRooms ( string slots [ ], int n, int m ) {
  int counts [ m ] = {
    0 };
    for ( int i = 0;
    i < n;
    i ++ ) for ( int j = 0;
    j < m;
    j ++ ) if ( slots [ i ] [ j ] == '1' ) counts [ j ] ++;
    return * max_element ( counts, counts + m );
  }
  

DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM | bool isSubsetSum ( int set [ ], int n, int sum ) {
  if ( sum == 0 ) return true;
  if ( n == 0 && sum != 0 ) return false;
  if ( set [ n - 1 ] > sum ) return isSubsetSum ( set, n - 1, sum );
  return isSubsetSum ( set, n - 1, sum ) || isSubsetSum ( set, n - 1, sum - set [ n - 1 ] );
}


COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS | int chordCnt ( int A ) {
  int n = 2 * A;
  int dpArray [ n + 1 ] = {
    0 };
    dpArray [ 0 ] = 1;
    dpArray [ 2 ] = 1;
    for ( int i = 4;
    i <= n;
    i += 2 ) {
      for ( int j = 0;
      j < i - 1;
      j += 2 ) {
        dpArray [ i ] += ( dpArray [ j ] * dpArray [ i - 2 - j ] );
      }
    }
    return dpArray [ n ];
  }
  

BREAK_NUMBER_THREE_PARTS_1 | ll count_of_ways ( ll n ) {
  ll count;
  count = ( n + 1 ) * ( n + 2 ) / 2;
  return count;
}


PRINT_DIGITS_POSITION_REMOVED_MAKE_NUMBER_DIVISIBLE_6 | void greatest ( string s ) {
  int n = s . length ( );
  int a [ n ];
  int sum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    a [ i ] = s [ i ] - '0';
    sum += a [ i ];
  }
  if ( a [ n - 1 ] % 2 ) {
    if ( a [ n - 2 ] % 2 != 0 or ( sum - a [ n - 1 ] ) % 3 != 0 ) {
      cout << "-1" << endl;
    }
    else {
      cout << n << endl;
    }
  }
  else {
    int re = sum % 3;
    int del = - 1;
    int flag = 0;
    for ( int i = 0;
    i < n - 1;
    i ++ ) {
      if ( ( a [ i ] ) % 3 == re ) {
        if ( a [ i + 1 ] > a [ i ] ) {
          del = i;
          flag = 1;
          break;
        }
        else {
          del = i;
        }
      }
    }
    if ( flag == 0 ) {
      if ( a [ n - 2 ] % 2 == 0 and re == a [ n - 1 ] % 3 ) del = n - 1;
    }
    if ( del == - 1 ) cout << - 1 << endl;
    else {
      cout << del + 1 << endl;
    }
  }
}


MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES | int MaximumHeight ( int a [ ], int n ) {
  int result = 1;
  for ( int i = 1;
  i <= n;
  ++ i ) {
    long long y = ( i * ( i + 1 ) ) / 2;
    if ( y < n ) result = i;
    else break;
  }
  return result;
}


SQUARED_TRIANGULAR_NUMBER_SUM_CUBES | int findS ( int s ) {
  int sum = 0;
  for ( int n = 1;
  sum < s;
  n ++ ) {
    sum += n * n * n;
    if ( sum == s ) return n;
  }
  return - 1;
}


EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING | int evaluateBoolExpr ( string s ) {
  int n = s . length ( );
  for ( int i = 0;
  i < n;
  i += 2 ) {
    if ( s [ i + 1 ] == 'A' ) {
      if ( s [ i + 2 ] == '0' || s [ i ] == '0' ) s [ i + 2 ] = '0';
      else s [ i + 2 ] = '1';
    }
    else if ( s [ i + 1 ] == 'B' ) {
      if ( s [ i + 2 ] == '1' || s [ i ] == '1' ) s [ i + 2 ] = '1';
      else s [ i + 2 ] = '0';
    }
    else {
      if ( s [ i + 2 ] == s [ i ] ) s [ i + 2 ] = '0';
      else s [ i + 2 ] = '1';
    }
  }
  return s [ n - 1 ] - '0';
}


PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT | int assignValue ( int a, int b, bool x ) {
  int arr [ ] = {
    a, b };
    return ( arr [ x ] );
  }
  

MINIMUM_SUM_SQUARES_CHARACTERS_COUNTS_GIVEN_STRING_REMOVING_K_CHARACTERS | int minStringValue ( string str, int k ) {
  int l = str . length ( );
  if ( k >= l ) return 0;
  int frequency [ MAX_CHAR ] = {
    0 };
    for ( int i = 0;
    i < l;
    i ++ ) frequency [ str [ i ] - 'a' ] ++;
    priority_queue < int > q;
    for ( int i = 0;
    i < MAX_CHAR;
    i ++ ) q . push ( frequency [ i ] );
    while ( k -- ) {
      int temp = q . top ( );
      q . pop ( );
      temp = temp - 1;
      q . push ( temp );
    }
    int result = 0;
    while ( ! q . empty ( ) ) {
      int temp = q . top ( );
      result += temp * temp;
      q . pop ( );
    }
    return result;
  }
  

MAJORITY_ELEMENT_1 | void findMajority ( int arr [ ], int size ) {
  unordered_map < int, int > m;
  for ( int i = 0;
  i < size;
  i ++ ) m [ arr [ i ] ] ++;
  int count = 0;
  for ( auto i : m ) {
    if ( i . second > size / 2 ) {
      count = 1;
      cout << "Majority found :- " << i . first << endl;
      break;
    }
  }
  if ( count == 0 ) cout << "No Majority element" << endl;
}


LARGEST_SUBSET_GRAPH_VERTICES_EDGES_2_COLORS | int subsetGraph ( int C [ ] [ N ] ) {
  set < int > vertices;
  for ( int i = 0;
  i < N;
  ++ i ) vertices . insert ( i );
  while ( ! vertices . empty ( ) ) {
    if ( vertices . size ( ) == 1 ) return 1;
    bool someone_removed = false;
    for ( int x : vertices ) {
      set < int > values;
      for ( int y : vertices ) if ( y != x ) values . insert ( C [ x ] [ y ] );
      if ( values . size ( ) == 1 ) {
        vertices . erase ( x );
        someone_removed = true;
        break;
      }
    }
    if ( ! someone_removed ) break;
  }
  return ( vertices . size ( ) );
}


FLOOR_IN_A_SORTED_ARRAY_1 | int floorSearch ( int arr [ ], int low, int high, int x ) {
  if ( low > high ) return - 1;
  if ( x >= arr [ high ] ) return high;
  int mid = ( low + high ) / 2;
  if ( arr [ mid ] == x ) return mid;
  if ( mid > 0 && arr [ mid - 1 ] <= x && x < arr [ mid ] ) return mid - 1;
  if ( x < arr [ mid ] ) return floorSearch ( arr, low, mid - 1, x );
  return floorSearch ( arr, mid + 1, high, x );
}


LONGEST_PREFIX_ALSO_SUFFIX_1 | int longestPrefixSuffix ( string s ) {
  int n = s . length ( );
  int lps [ n ];
  lps [ 0 ] = 0;
  int len = 0;
  int i = 1;
  while ( i < n ) {
    if ( s [ i ] == s [ len ] ) {
      len ++;
      lps [ i ] = len;
      i ++;
    }
    else {
      if ( len != 0 ) {
        len = lps [ len - 1 ];
      }
      else {
        lps [ i ] = 0;
        i ++;
      }
    }
  }
  int res = lps [ n - 1 ];
  return ( res > n / 2 ) ? n / 2 : res;
}


COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS | int countP ( int n, int k ) {
  if ( n == 0 || k == 0 || k > n ) return 0;
  if ( k == 1 || k == n ) return 1;
  return k * countP ( n - 1, k ) + countP ( n - 1, k - 1 );
}


C_PROGRAM_FACTORIAL_NUMBER_2 | int factorial ( int n ) {
  return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 );
}


FIND_REPEATED_CHARACTER_PRESENT_FIRST_STRING_1 | int findRepeatFirst ( char * s ) {
  int p = - 1, i, k;
  int hash [ MAX_CHAR ] = {
    0 };
    int pos [ MAX_CHAR ];
    for ( i = 0;
    i < strlen ( s );
    i ++ ) {
      k = ( int ) s [ i ];
      if ( hash [ k ] == 0 ) {
        hash [ k ] ++;
        pos [ k ] = i;
      }
      else if ( hash [ k ] == 1 ) hash [ k ] ++;
    }
    for ( i = 0;
    i < MAX_CHAR;
    i ++ ) {
      if ( hash [ i ] == 2 ) {
        if ( p == - 1 ) p = pos [ i ];
        else if ( p > pos [ i ] ) p = pos [ i ];
      }
    }
    return p;
  }
  

NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS | int numberOfPermWithKInversion ( int N, int K ) {
  if ( N == 0 ) return 0;
  if ( K == 0 ) return 1;
  if ( memo [ N ] [ K ] != 0 ) return memo [ N ] [ K ];
  int sum = 0;
  for ( int i = 0;
  i <= K;
  i ++ ) {
    if ( i <= N - 1 ) sum += numberOfPermWithKInversion ( N - 1, K - i );
  }
  memo [ N ] [ K ] = sum;
  return sum;
}


K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY | int kthLargestSum ( int arr [ ], int n, int k ) {
  int sum [ n + 1 ];
  sum [ 0 ] = 0;
  sum [ 1 ] = arr [ 0 ];
  for ( int i = 2;
  i <= n;
  i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i - 1 ];
  priority_queue < int, vector < int >, greater < int > > Q;
  for ( int i = 1;
  i <= n;
  i ++ ) {
    for ( int j = i;
    j <= n;
    j ++ ) {
      int x = sum [ j ] - sum [ i - 1 ];
      if ( Q . size ( ) < k ) Q . push ( x );
      else {
        if ( Q . top ( ) < x ) {
          Q . pop ( );
          Q . push ( x );
        }
      }
    }
  }
  return Q . top ( );
}


FIND_THE_LARGEST_THREE_ELEMENTS_IN_AN_ARRAY | void find3largest ( int arr [ ], int n ) {
  sort ( arr, arr + n );
  int check = 0, count = 1;
  for ( int i = 1;
  i <= n;
  i ++ ) {
    if ( count < 4 ) {
      if ( check != arr [ n - i ] ) {
        cout << arr [ n - i ] << " ";
        check = arr [ n - i ];
        count ++;
      }
    }
    else break;
  }
}


MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE | int maxLower ( string str ) {
  int n = str . length ( );
  int i = 0;
  for (;
  i < n;
  i ++ ) {
    if ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) {
      i ++;
      break;
    }
  }
  int maxCount = 0;
  int count [ MAX_CHAR ] = {
    0 };
    for (;
    i < n;
    i ++ ) {
      if ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) {
        int currCount = 0;
        for ( int j = 0;
        j < MAX_CHAR;
        j ++ ) if ( count [ j ] > 0 ) currCount ++;
        maxCount = max ( maxCount, currCount );
        memset ( count, 0, sizeof ( count ) );
      }
      if ( str [ i ] >= 'a' && str [ i ] <= 'z' ) count [ str [ i ] - 'a' ] ++;
    }
    return maxCount;
  }
  

CHECK_IF_A_STRING_HAS_ALL_CHARACTERS_WITH_SAME_FREQUENCY_WITH_ONE_VARIATION_ALLOWED | bool isValidString ( string str ) {
  int freq [ CHARS ] = {
    0 };
    for ( int i = 0;
    i < str . length ( );
    i ++ ) freq [ str [ i ] - 'a' ] ++;
    int i, freq1 = 0, count_freq1 = 0;
    for ( i = 0;
    i < CHARS;
    i ++ ) {
      if ( freq [ i ] != 0 ) {
        freq1 = freq [ i ];
        count_freq1 = 1;
        break;
      }
    }
    int j, freq2 = 0, count_freq2 = 0;
    for ( j = i + 1;
    j < CHARS;
    j ++ ) {
      if ( freq [ j ] != 0 ) {
        if ( freq [ j ] == freq1 ) count_freq1 ++;
        else {
          count_freq2 = 1;
          freq2 = freq [ j ];
          break;
        }
      }
    }
    for ( int k = j + 1;
    k < CHARS;
    k ++ ) {
      if ( freq [ k ] != 0 ) {
        if ( freq [ k ] == freq1 ) count_freq1 ++;
        if ( freq [ k ] == freq2 ) count_freq2 ++;
        else return false;
      }
      if ( count_freq1 > 1 && count_freq2 > 1 ) return false;
    }
    return true;
  }
  

MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY | double largestSumOfAverages ( vector < int > & A, int K ) {
  int n = A . size ( );
  double pre_sum [ n + 1 ];
  pre_sum [ 0 ] = 0;
  for ( int i = 0;
  i < n;
  i ++ ) pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ];
  double dp [ n ] = {
    0 };
    double sum = 0;
    for ( int i = 0;
    i < n;
    i ++ ) dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n - i );
    for ( int k = 0;
    k < K - 1;
    k ++ ) for ( int i = 0;
    i < n;
    i ++ ) for ( int j = i + 1;
    j < n;
    j ++ ) dp [ i ] = max ( dp [ i ], ( pre_sum [ j ] - pre_sum [ i ] ) / ( j - i ) + dp [ j ] );
    return dp [ 0 ];
  }
  

FIND_SUBARRAY_WITH_GIVEN_SUM_IN_ARRAY_OF_INTEGERS | void subArraySum ( int arr [ ], int n, int sum ) {
  unordered_map < int, int > map;
  int curr_sum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    curr_sum = curr_sum + arr [ i ];
    if ( curr_sum == sum ) {
      cout << "Sum found between indexes " << 0 << " to " << i << endl;
      return;
    }
    if ( map . find ( curr_sum - sum ) != map . end ( ) ) {
      cout << "Sum found between indexes " << map [ curr_sum - sum ] + 1 << " to " << i << endl;
      return;
    }
    map [ curr_sum ] = i;
  }
  cout << "No subarray with given sum exists";
}


REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX | int minRemovalsDP ( int arr [ ], int n ) {
  int longest_start = - 1, longest_end = 0;
  for ( int start = 0;
  start < n;
  start ++ ) {
    int min = INT_MAX, max = INT_MIN;
    for ( int end = start;
    end < n;
    end ++ ) {
      int val = arr [ end ];
      if ( val < min ) min = val;
      if ( val > max ) max = val;
      if ( 2 * min <= max ) break;
      if ( end - start > longest_end - longest_start || longest_start == - 1 ) {
        longest_start = start;
        longest_end = end;
      }
    }
  }
  if ( longest_start == - 1 ) return n;
  return ( n - ( longest_end - longest_start + 1 ) );
}


FIND_THE_MISSING_NUMBER_1 | int getMissingNo ( int a [ ], int n ) {
  int i, total = 1;
  for ( i = 2;
  i <= ( n + 1 );
  i ++ ) {
    total += i;
    total -= a [ i - 2 ];
  }
  return total;
}


SIEVE_SUNDARAM_PRINT_PRIMES_SMALLER_N | int SieveOfSundaram ( int n ) {
  int nNew = ( n - 2 ) / 2;
  bool marked [ nNew + 1 ];
  memset ( marked, false, sizeof ( marked ) );
  for ( int i = 1;
  i <= nNew;
  i ++ ) for ( int j = i;
  ( i + j + 2 * i * j ) <= nNew;
  j ++ ) marked [ i + j + 2 * i * j ] = true;
  if ( n > 2 ) cout << 2 << " ";
  for ( int i = 1;
  i <= nNew;
  i ++ ) if ( marked [ i ] == false ) cout << 2 * i + 1 << " ";
}


MAXIMUM_PRODUCT_SUBSET_ARRAY | int maxProductSubset ( int a [ ], int n ) {
  if ( n == 1 ) return a [ 0 ];
  int max_neg = INT_MIN;
  int count_neg = 0, count_zero = 0;
  int prod = 1;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( a [ i ] == 0 ) {
      count_zero ++;
      continue;
    }
    if ( a [ i ] < 0 ) {
      count_neg ++;
      max_neg = max ( max_neg, a [ i ] );
    }
    prod = prod * a [ i ];
  }
  if ( count_zero == n ) return 0;
  if ( count_neg & 1 ) {
    if ( count_neg == 1 && count_zero > 0 && count_zero + count_neg == n ) return 0;
    prod = prod / max_neg;
  }
  return prod;
}


FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY | void printPrevSmaller ( int arr [ ], int n ) {
  cout << "_, ";
  for ( int i = 1;
  i < n;
  i ++ ) {
    int j;
    for ( j = i - 1;
    j >= 0;
    j -- ) {
      if ( arr [ j ] < arr [ i ] ) {
        cout << arr [ j ] << ", ";
        break;
      }
    }
    if ( j == - 1 ) cout << "_, ";
  }
}


FIND_NUMBER_PAIRS_ARRAY_XOR_0_1 | int calculate ( int a [ ], int n ) {
  int * maximum = max_element ( a, a + 5 );
  int frequency [ * maximum + 1 ] = {
    0 };
    for ( int i = 0;
    i < n;
    i ++ ) {
      frequency [ a [ i ] ] += 1;
    }
    int answer = 0;
    for ( int i = 0;
    i < ( * maximum ) + 1;
    i ++ ) {
      answer = answer + frequency [ i ] * ( frequency [ i ] - 1 );
    }
    return answer / 2;
  }
  

SUM_BINOMIAL_COEFFICIENTS_1 | int binomialCoeffSum ( int n ) {
  return ( 1 << n );
}


MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1 | int maxSumPairWithDifferenceLessThanK ( int arr [ ], int N, int k ) {
  int maxSum = 0;
  sort ( arr, arr + N );
  for ( int i = N - 1;
  i > 0;
  -- i ) {
    if ( arr [ i ] - arr [ i - 1 ] < k ) {
      maxSum += arr [ i ];
      maxSum += arr [ i - 1 ];
      -- i;
    }
  }
  return maxSum;
}


KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT | void printkthnode ( vector < pair < int, int > > adj [ ], int wt [ ], int n, int k ) {
  for ( int i = 0;
  i < n;
  i ++ ) sort ( adj [ i ] . begin ( ), adj [ i ] . end ( ) );
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( adj [ i ] . size ( ) >= k ) cout << adj [ i ] [ adj [ i ] . size ( ) - k ] . second;
    else cout << "-1";
  }
}


SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM | int KnapSack ( int val [ ], int wt [ ], int n, int W ) {
  int mat [ 2 ] [ W + 1 ];
  memset ( mat, 0, sizeof ( mat ) );
  int i = 0;
  while ( i < n ) {
    int j = 0;
    if ( i % 2 != 0 ) {
      while ( ++ j <= W ) {
        if ( wt [ i ] <= j ) mat [ 1 ] [ j ] = max ( val [ i ] + mat [ 0 ] [ j - wt [ i ] ], mat [ 0 ] [ j ] );
        else mat [ 1 ] [ j ] = mat [ 0 ] [ j ];
      }
    }
    else {
      while ( ++ j <= W ) {
        if ( wt [ i ] <= j ) mat [ 0 ] [ j ] = max ( val [ i ] + mat [ 1 ] [ j - wt [ i ] ], mat [ 1 ] [ j ] );
        else mat [ 0 ] [ j ] = mat [ 1 ] [ j ];
      }
    }
    i ++;
  }
  return ( n % 2 != 0 ) ? mat [ 0 ] [ W ] : mat [ 1 ] [ W ];
}


BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1 | void bin ( unsigned n ) {
  if ( n > 1 ) bin ( n >> 1 );
  printf ( "%d", n & 1 );
}


PRIME_FACTORS_BIG_NUMBER | void factorize ( long long n ) {
  int count = 0;
  while ( ! ( n % 2 ) ) {
    n >>= 1;
    count ++;
  }
  if ( count ) cout << 2 << "  " << count << endl;
  for ( long long i = 3;
  i <= sqrt ( n );
  i += 2 ) {
    count = 0;
    while ( n % i == 0 ) {
      count ++;
      n = n / i;
    }
    if ( count ) cout << i << "  " << count << endl;
  }
  if ( n > 2 ) cout << n << "  " << 1 << endl;
}


COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1 | int countSubstringWithEqualEnds ( string s ) {
  int result = 0;
  int n = s . length ( );
  int count [ MAX_CHAR ] = {
    0 };
    for ( int i = 0;
    i < n;
    i ++ ) count [ s [ i ] - 'a' ] ++;
    for ( int i = 0;
    i < MAX_CHAR;
    i ++ ) result += ( count [ i ] * ( count [ i ] + 1 ) / 2 );
    return result;
  }
  

LONGEST_PALINDROME_SUBSTRING_SET_1 | void printSubStr ( string str, int low, int high ) {
  for ( int i = low;
  i <= high;
  ++ i ) cout << str [ i ];
}


FIND_THE_SMALLEST_WINDOW_IN_A_STRING_CONTAINING_ALL_CHARACTERS_OF_ANOTHER_STRING | string findSubString ( string str, string pat ) {
  int len1 = str . length ( );
  int len2 = pat . length ( );
  if ( len1 < len2 ) {
    cout << "No such window exists";
    return "";
  }
  int hash_pat [ no_of_chars ] = {
    0 };
    int hash_str [ no_of_chars ] = {
      0 };
      for ( int i = 0;
      i < len2;
      i ++ ) hash_pat [ pat [ i ] ] ++;
      int start = 0, start_index = - 1, min_len = INT_MAX;
      int count = 0;
      for ( int j = 0;
      j < len1;
      j ++ ) {
        hash_str [ str [ j ] ] ++;
        if ( hash_pat [ str [ j ] ] != 0 && hash_str [ str [ j ] ] <= hash_pat [ str [ j ] ] ) count ++;
        if ( count == len2 ) {
          while ( hash_str [ str [ start ] ] > hash_pat [ str [ start ] ] || hash_pat [ str [ start ] ] == 0 ) {
            if ( hash_str [ str [ start ] ] > hash_pat [ str [ start ] ] ) hash_str [ str [ start ] ] --;
            start ++;
          }
          int len_window = j - start + 1;
          if ( min_len > len_window ) {
            min_len = len_window;
            start_index = start;
          }
        }
      }
      if ( start_index == - 1 ) {
        cout << "No such window exists";
        return "";
      }
      return str . substr ( start_index, min_len );
    }
    

MARKOV_MATRIX | bool checkMarkov ( double m [ ] [ n ] ) {
  for ( int i = 0;
  i < n;
  i ++ ) {
    double sum = 0;
    for ( int j = 0;
    j < n;
    j ++ ) sum = sum + m [ i ] [ j ];
    if ( sum != 1 ) return false;
  }
  return true;
}


LEAF_NODES_PREORDER_BINARY_SEARCH_TREE | void leafNode ( int preorder [ ], int n ) {
  stack < int > s;
  for ( int i = 0, j = 1;
  j < n;
  i ++, j ++ ) {
    bool found = false;
    if ( preorder [ i ] > preorder [ j ] ) s . push ( preorder [ i ] );
    else {
      while ( ! s . empty ( ) ) {
        if ( preorder [ j ] > s . top ( ) ) {
          s . pop ( );
          found = true;
        }
        else break;
      }
    }
    if ( found ) cout << preorder [ i ] << " ";
  }
  cout << preorder [ n - 1 ];
}


SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N | unsigned int nextPowerOf2 ( unsigned int n ) {
  unsigned count = 0;
  if ( n && ! ( n & ( n - 1 ) ) ) return n;
  while ( n != 0 ) {
    n >>= 1;
    count += 1;
  }
  return 1 << count;
}


PROGRAM_CHECK_WATER_TANK_OVERFLOWS_N_SOLID_BALLS_DIPPED_WATER_TANK | void overflow ( int H, int r, int h, int N, int R ) {
  float tank_cap = 3.14 * r * r * H;
  float water_vol = 3.14 * r * r * h;
  float balls_vol = N * ( 4 / 3 ) * 3.14 * R * R * R;
  float vol = water_vol + balls_vol;
  if ( vol > tank_cap ) {
    cout << "Overflow" << endl;
  }
  else {
    cout << "Not in overflow state" << endl;
  }
}


SMALLEST_DERANGEMENT_SEQUENCE | void generate_derangement ( int N ) {
  int S [ N + 1 ];
  for ( int i = 1;
  i <= N;
  i ++ ) S [ i ] = i;
  int D [ N + 1 ];
  for ( int i = 1;
  i <= N;
  i += 2 ) {
    if ( i == N && i % N != 0 ) {
      int temp = D [ N ] D [ N ] = D [ N - 1 ];
      D [ N - 1 ] = temp;
    }
    else {
      D [ i ] = i + 1;
      D [ i + 1 ] = i;
    }
  }
  for ( int i = 1;
  i <= N;
  i ++ ) printf ( "%d ", D [ i ] );
  printf ( "\n" );
}


MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE | ll lis ( ll arr [ ], ll n ) {
  ll mpis [ n ];
  for ( int i = 0;
  i < n;
  i ++ ) mpis [ i ] = arr [ i ];
  for ( int i = 1;
  i < n;
  i ++ ) for ( int j = 0;
  j < i;
  j ++ ) if ( arr [ i ] > arr [ j ] && mpis [ i ] < ( mpis [ j ] * arr [ i ] ) ) mpis [ i ] = mpis [ j ] * arr [ i ];
  return * max_element ( mpis, mpis + n );
}


CHANGE_BITS_CAN_MADE_ONE_FLIP | bool canMakeAllSame ( string str ) {
  int zeros = 0, ones = 0;
  for ( char ch : str ) ( ch == '0' ) ? ++ zeros : ++ ones;
  return ( zeros == 1 || ones == 1 );
}


FIND_NUMBER_PAIRS_ARRAY_XOR_0 | int calculate ( int a [ ], int n ) {
  sort ( a, a + n );
  int count = 1;
  int answer = 0;
  for ( int i = 1;
  i < n;
  i ++ ) {
    if ( a [ i ] == a [ i - 1 ] ) {
      count += 1;
    }
    else {
      answer = answer + ( count * ( count - 1 ) ) / 2;
      count = 1;
    }
  }
  answer = answer + ( count * ( count - 1 ) ) / 2;
  return answer;
}


FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN | int findRoot ( pair < int, int > arr [ ], int n ) {
  int root = 0;
  for ( int i = 0;
  i < n;
  i ++ ) root += ( arr [ i ] . first - arr [ i ] . second );
  return root;
}


BINARY_SEARCH | int binarySearch ( int arr [ ], int l, int r, int x ) {
  if ( r >= l ) {
    int mid = l + ( r - l ) / 2;
    if ( arr [ mid ] == x ) return mid;
    if ( arr [ mid ] > x ) return binarySearch ( arr, l, mid - 1, x );
    return binarySearch ( arr, mid + 1, r, x );
  }
  return - 1;
}


FIBONACCI_MODULO_P | int findMinZero ( int p ) {
  int first = 1, second = 1, number = 2, next = 1;
  while ( next ) {
    next = ( first + second ) % p;
    first = second;
    second = next;
    number ++;
  }
  return number;
}


K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY | void kLargest ( int arr [ ], int n, int k ) {
  sort ( arr, arr + n, greater < int > ( ) );
  for ( int i = 0;
  i < k;
  i ++ ) cout << arr [ i ] << " ";
}


C_PROGRAM_FIND_AREA_CIRCLE | float findArea ( float r ) {
  return ( pi * r * r );
}


SUM_TWO_LARGE_NUMBERS | string findSum ( string str1, string str2 ) {
  if ( str1 . length ( ) > str2 . length ( ) ) swap ( str1, str2 );
  string str = "";
  int n1 = str1 . length ( ), n2 = str2 . length ( );
  reverse ( str1 . begin ( ), str1 . end ( ) );
  reverse ( str2 . begin ( ), str2 . end ( ) );
  int carry = 0;
  for ( int i = 0;
  i < n1;
  i ++ ) {
    int sum = ( ( str1 [ i ] - '0' ) + ( str2 [ i ] - '0' ) + carry );
    str . push_back ( sum % 10 + '0' );
    carry = sum / 10;
  }
  for ( int i = n1;
  i < n2;
  i ++ ) {
    int sum = ( ( str2 [ i ] - '0' ) + carry );
    str . push_back ( sum % 10 + '0' );
    carry = sum / 10;
  }
  if ( carry ) str . push_back ( carry + '0' );
  reverse ( str . begin ( ), str . end ( ) );
  return str;
}


ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE | int solveQuery ( int start, int end, int arr [ ] ) {
  unordered_map < int, int > frequency;
  for ( int i = start;
  i <= end;
  i ++ ) frequency [ arr [ i ] ] ++;
  int count = 0;
  for ( auto x : frequency ) if ( x . first == x . second ) count ++;
  return count;
}


COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS | int countSubstringWithEqualEnds ( string s ) {
  int result = 0;
  int n = s . length ( );
  for ( int i = 0;
  i < n;
  i ++ ) for ( int j = i;
  j < n;
  j ++ ) if ( s [ i ] == s [ j ] ) result ++;
  return result;
}


DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM | int maxTasks ( int high [ ], int low [ ], int n ) {
  if ( n <= 0 ) return 0;
  return max ( high [ n - 1 ] + maxTasks ( high, low, ( n - 2 ) ), low [ n - 1 ] + maxTasks ( high, low, ( n - 1 ) ) );
}


MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX | int maxRowDiff ( int mat [ ] [ MAX ], int m, int n ) {
  int rowSum [ m ];
  for ( int i = 0;
  i < m;
  i ++ ) {
    int sum = 0;
    for ( int j = 0;
    j < n;
    j ++ ) sum += mat [ i ] [ j ];
    rowSum [ i ] = sum;
  }
  int max_diff = rowSum [ 1 ] - rowSum [ 0 ];
  int min_element = rowSum [ 0 ];
  for ( int i = 1;
  i < m;
  i ++ ) {
    if ( rowSum [ i ] - min_element > max_diff ) max_diff = rowSum [ i ] - min_element;
    if ( rowSum [ i ] < min_element ) min_element = rowSum [ i ];
  }
  return max_diff;
}


PAPER_CUT_MINIMUM_NUMBER_SQUARES | int minimumSquare ( int a, int b ) {
  long long result = 0, rem = 0;
  if ( a < b ) swap ( a, b );
  while ( b > 0 ) {
    result += a / b;
    long long rem = a % b;
    a = b;
    b = rem;
  }
  return result;
}


SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACENT_ELEMENTS_IS_1 | int search ( int arr [ ], int n, int x ) {
  int i = 0;
  while ( i < n ) {
    if ( arr [ i ] == x ) return i;
    i = i + abs ( arr [ i ] - x );
  }
  cout << "number is not present!";
  return - 1;
}


PANGRAM_CHECKING | bool checkPangram ( string & str ) {
  vector < bool > mark ( 26, false );
  int index;
  for ( int i = 0;
  i < str . length ( );
  i ++ ) {
    if ( 'A' <= str [ i ] && str [ i ] <= 'Z' ) index = str [ i ] - 'A';
    else if ( 'a' <= str [ i ] && str [ i ] <= 'z' ) index = str [ i ] - 'a';
    mark [ index ] = true;
  }
  for ( int i = 0;
  i <= 25;
  i ++ ) if ( mark [ i ] == false ) return ( false );
  return ( true );
}


PRINT_SHORTEST_COMMON_SUPERSEQUENCE | string printShortestSuperSeq ( string X, string Y ) {
  int m = X . length ( );
  int n = Y . length ( );
  int dp [ m + 1 ] [ n + 1 ];
  for ( int i = 0;
  i <= m;
  i ++ ) {
    for ( int j = 0;
    j <= n;
    j ++ ) {
      if ( i == 0 ) dp [ i ] [ j ] = j;
      else if ( j == 0 ) dp [ i ] [ j ] = i;
      else if ( X [ i - 1 ] == Y [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];
      else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ], dp [ i ] [ j - 1 ] );
    }
  }
  int index = dp [ m ] [ n ];
  string str;
  int i = m, j = n;
  while ( i > 0 && j > 0 ) {
    if ( X [ i - 1 ] == Y [ j - 1 ] ) {
      str . push_back ( X [ i - 1 ] );
      i --, j --, index --;
    }
    else if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j - 1 ] ) {
      str . push_back ( Y [ j - 1 ] );
      j --, index --;
    }
    else {
      str . push_back ( X [ i - 1 ] );
      i --, index --;
    }
  }
  while ( i > 0 ) {
    str . push_back ( X [ i - 1 ] );
    i --, index --;
  }
  while ( j > 0 ) {
    str . push_back ( Y [ j - 1 ] );
    j --, index --;
  }
  reverse ( str . begin ( ), str . end ( ) );
  return str;
}


FIND_PAIR_MAXIMUM_GCD_ARRAY_1 | int findMaxGCD ( int arr [ ], int n ) {
  int high = 0;
  for ( int i = 0;
  i < n;
  i ++ ) high = max ( high, arr [ i ] );
  int count [ high + 1 ] = {
    0 };
    for ( int i = 0;
    i < n;
    i ++ ) count [ arr [ i ] ] ++;
    int counter = 0;
    for ( int i = high;
    i >= 1;
    i -- ) {
      int j = i;
      counter = 0;
      while ( j <= high ) {
        if ( count [ j ] >= 2 ) return j;
        else if ( count [ j ] == 1 ) counter ++;
        j += i;
        if ( counter == 2 ) return i;
      }
    }
  }
  

PROGRAM_CALCULATE_AREA_OCTAGON | double areaOctagon ( double side ) {
  return ( float ) ( 2 * ( 1 + sqrt ( 2 ) ) * side * side );
}


FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_1 | int findExtra ( int arr1 [ ], int arr2 [ ], int n ) {
  int index = n;
  int left = 0, right = n - 1;
  while ( left <= right ) {
    int mid = ( left + right ) / 2;
    if ( arr2 [ mid ] == arr1 [ mid ] ) left = mid + 1;
    else {
      index = mid;
      right = mid - 1;
    }
  }
  return index;
}


NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL_TO_VALUE_1 | int nobleInteger ( int arr [ ], int n ) {
  sort ( arr, arr + n );
  for ( int i = 0;
  i < n - 1;
  i ++ ) {
    if ( arr [ i ] == arr [ i + 1 ] ) continue;
    if ( arr [ i ] == n - i - 1 ) return arr [ i ];
  }
  if ( arr [ n - 1 ] == 0 ) return arr [ n - 1 ];
  return - 1;
}


MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_ISOSCELES_TRIANGLE | int maxSquare ( int b, int m ) {
  return ( b / m - 1 ) * ( b / m ) / 2;
}


HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER | int mod ( string num, int a ) {
  int res = 0;
  for ( int i = 0;
  i < num . length ( );
  i ++ ) res = ( res * 10 + ( int ) num [ i ] - '0' ) % a;
  return res;
}


LONGEST_COMMON_SUBSTRING_1 | int lcs ( int i, int j, int count ) {
  if ( i == 0 || j == 0 ) return count;
  if ( X [ i - 1 ] == Y [ j - 1 ] ) {
    count = lcs ( i - 1, j - 1, count + 1 );
  }
  count = max ( count, max ( lcs ( i, j - 1, 0 ), lcs ( i - 1, j, 0 ) ) );
  return count;
}


FIND_PATTERNS_101_GIVEN_STRING | int patternCount ( string str ) {
  char last = str [ 0 ];
  int i = 1, counter = 0;
  while ( i < str . size ( ) ) {
    if ( str [ i ] == '0' && last == '1' ) {
      while ( str [ i ] == '0' ) i ++;
      if ( str [ i ] == '1' ) counter ++;
    }
    last = str [ i ];
    i ++;
  }
  return counter;
}


LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE | int longOddEvenIncSeq ( int arr [ ], int n ) {
  int lioes [ n ];
  int maxLen = 0;
  for ( int i = 0;
  i < n;
  i ++ ) lioes [ i ] = 1;
  for ( int i = 1;
  i < n;
  i ++ ) for ( int j = 0;
  j < i;
  j ++ ) if ( arr [ i ] > arr [ j ] && ( arr [ i ] + arr [ j ] ) % 2 != 0 && lioes [ i ] < lioes [ j ] + 1 ) lioes [ i ] = lioes [ j ] + 1;
  for ( int i = 0;
  i < n;
  i ++ ) if ( maxLen < lioes [ i ] ) maxLen = lioes [ i ];
  return maxLen;
}


COUNT_NUMBER_OF_SUBSTRINGS_WITH_EXACTLY_K_DISTINCT_CHARACTERS | int countkDist ( string str, int k ) {
  int n = str . length ( );
  int res = 0;
  int cnt [ 26 ];
  for ( int i = 0;
  i < n;
  i ++ ) {
    int dist_count = 0;
    memset ( cnt, 0, sizeof ( cnt ) );
    for ( int j = i;
    j < n;
    j ++ ) {
      if ( cnt [ str [ j ] - 'a' ] == 0 ) dist_count ++;
      cnt [ str [ j ] - 'a' ] ++;
      if ( dist_count == k ) res ++;
      if ( dist_count > k ) break;
    }
  }
  return res;
}


C_PROGRAM_FACTORIAL_NUMBER_1 | unsigned int factorial ( unsigned int n ) {
  int res = 1, i;
  for ( i = 2;
  i <= n;
  i ++ ) res *= i;
  return res;
}


K_MAXIMUM_SUMS_NON_OVERLAPPING_CONTIGUOUS_SUB_ARRAYS | void kmax ( int arr [ ], int k, int n ) {
  for ( int c = 0;
  c < k;
  c ++ ) {
    int max_so_far = numeric_limits < int > :: min ( );
    int max_here = 0;
    int start = 0, end = 0, s = 0;
    for ( int i = 0;
    i < n;
    i ++ ) {
      max_here += arr [ i ];
      if ( max_so_far < max_here ) {
        max_so_far = max_here;
        start = s;
        end = i;
      }
      if ( max_here < 0 ) {
        max_here = 0;
        s = i + 1;
      }
    }
    cout << "Maximum non-overlapping sub-array sum" << ( c + 1 ) << ": " << max_so_far << ", starting index: " << start << ", ending index: " << end << "." << endl;
    for ( int l = start;
    l <= end;
    l ++ ) arr [ l ] = numeric_limits < int > :: min ( );
  }
  cout << endl;
}


DISTANCE_NEAREST_CELL_1_BINARY_MATRIX | void printDistance ( int mat [ N ] [ M ] ) {
  int ans [ N ] [ M ];
  for ( int i = 0;
  i < N;
  i ++ ) for ( int j = 0;
  j < M;
  j ++ ) ans [ i ] [ j ] = INT_MAX;
  for ( int i = 0;
  i < N;
  i ++ ) for ( int j = 0;
  j < M;
  j ++ ) {
    for ( int k = 0;
    k < N;
    k ++ ) for ( int l = 0;
    l < M;
    l ++ ) {
      if ( mat [ k ] [ l ] == 1 ) ans [ i ] [ j ] = min ( ans [ i ] [ j ], abs ( i - k ) + abs ( j - l ) );
    }
  }
  for ( int i = 0;
  i < N;
  i ++ ) {
    for ( int j = 0;
    j < M;
    j ++ ) cout << ans [ i ] [ j ] << " ";
    cout << endl;
  }
}


MINIMUM_NUMBER_OF_BRACKET_REVERSALS_NEEDED_TO_MAKE_AN_EXPRESSION_BALANCED | int countMinReversals ( string expr ) {
  int len = expr . length ( );
  if ( len % 2 ) return - 1;
  stack < char > s;
  for ( int i = 0;
  i < len;
  i ++ ) {
    if ( expr [ i ] == '}' && ! s . empty ( ) ) {
      if ( s . top ( ) == '{' ) s . pop ( );
      else s . push ( expr [ i ] );
    }
    else s . push ( expr [ i ] );
  }
  int red_len = s . size ( );
  int n = 0;
  while ( ! s . empty ( ) && s . top ( ) == '{' ) {
    s . pop ( );
    n ++;
  }
  return ( red_len / 2 + n % 2 );
}


FIRST_NEGATIVE_INTEGER_EVERY_WINDOW_SIZE_K_1 | void printFirstNegativeInteger ( int arr [ ], int n, int k ) {
  deque < int > Di;
  int i;
  for ( i = 0;
  i < k;
  i ++ ) if ( arr [ i ] < 0 ) Di . push_back ( i );
  for (;
  i < n;
  i ++ ) {
    if ( ! Di . empty ( ) ) cout << arr [ Di . front ( ) ] << " ";
    else cout << "0" << " ";
    while ( ( ! Di . empty ( ) ) && Di . front ( ) < ( i - k + 1 ) ) Di . pop_front ( );
    if ( arr [ i ] < 0 ) Di . push_back ( i );
  }
  if ( ! Di . empty ( ) ) cout << arr [ Di . front ( ) ] << " ";
  else cout << "0" << " ";
}


MAGIC_SQUARE | void generateSquare ( int n ) {
  int magicSquare [ n ] [ n ];
  memset ( magicSquare, 0, sizeof ( magicSquare ) );
  int i = n / 2;
  int j = n - 1;
  for ( int num = 1;
  num <= n * n;
  ) {
    if ( i == - 1 && j == n ) {
      j = n - 2;
      i = 0;
    }
    else {
      if ( j == n ) j = 0;
      if ( i < 0 ) i = n - 1;
    }
    if ( magicSquare [ i ] [ j ] ) {
      j -= 2;
      i ++;
      continue;
    }
    else magicSquare [ i ] [ j ] = num ++;
    j ++;
    i --;
  }
  cout << "The Magic Square for n=" << n << ":\nSum of " "each row or column " << n * ( n * n + 1 ) / 2 << ":\n\n";
  for ( i = 0;
  i < n;
  i ++ ) {
    for ( j = 0;
    j < n;
    j ++ ) cout << magicSquare [ i ] [ j ] << " ";
    cout << endl;
  }
}


PROGRAM_BINOMIAL_COEFFICIENTS_TABLE | int printbinomial ( int max ) {
  for ( int m = 0;
  m <= max;
  m ++ ) {
    printf ( "%2d", m );
    int binom = 1;
    for ( int x = 0;
    x <= m;
    x ++ ) {
      if ( m != 0 && x != 0 ) binom = binom * ( m - x + 1 ) / x;
      printf ( "%4d", binom );
    }
    printf ( "\n" );
  }
}


CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION | int findMinX ( int num [ ], int rem [ ], int k ) {
  int x = 1;
  while ( true ) {
    int j;
    for ( j = 0;
    j < k;
    j ++ ) if ( x % num [ j ] != rem [ j ] ) break;
    if ( j == k ) return x;
    x ++;
  }
  return x;
}


MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_AXIS | int findmin ( Point p [ ], int n ) {
  int a = 0, b = 0, c = 0, d = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( p [ i ] . x <= 0 ) a ++;
    else if ( p [ i ] . x >= 0 ) b ++;
    if ( p [ i ] . y >= 0 ) c ++;
    else if ( p [ i ] . y <= 0 ) d ++;
  }
  return min ( {
    a, b, c, d }
    );
  }
  

REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE | void translate ( char * str ) {
  if ( str [ 0 ] == '' ) return;
  for ( int i = 1;
  str [ i ] != '';
  i ++ ) {
    if ( str [ i - 1 ] == 'A' && str [ i ] == 'B' ) {
      str [ i - 1 ] = 'C';
      for ( int j = i;
      str [ j ] != '';
      j ++ ) str [ j ] = str [ j + 1 ];
    }
  }
  return;
}


PAIRS_OF_POSITIVE_NEGATIVE_VALUES_IN_AN_ARRAY | void printPairs ( int arr [ ], int n ) {
  vector < int > v;
  for ( int i = 0;
  i < n;
  i ++ ) for ( int j = i + 1;
  j < n;
  j ++ ) if ( abs ( arr [ i ] ) == abs ( arr [ j ] ) ) v . push_back ( abs ( arr [ i ] ) );
  if ( v . size ( ) == 0 ) return;
  sort ( v . begin ( ), v . end ( ) );
  for ( int i = 0;
  i < v . size ( );
  i ++ ) cout << - v [ i ] << " " << v [ i ];
}


NON_REPEATING_ELEMENT_1 | int firstNonRepeating ( int arr [ ], int n ) {
  unordered_map < int, int > mp;
  for ( int i = 0;
  i < n;
  i ++ ) mp [ arr [ i ] ] ++;
  for ( int i = 0;
  i < n;
  i ++ ) if ( mp [ arr [ i ] ] == 1 ) return arr [ i ];
  return - 1;
}


PRINT_FIBONACCI_SERIES_REVERSE_ORDER | void reverseFibonacci ( int n ) {
  int a [ n ];
  a [ 0 ] = 0;
  a [ 1 ] = 1;
  for ( int i = 2;
  i < n;
  i ++ ) {
    a [ i ] = a [ i - 2 ] + a [ i - 1 ];
  }
  for ( int i = n - 1;
  i >= 0;
  i -- ) {
    cout << a [ i ] << " ";
  }
}


FIND_MINIMUM_DIFFERENCE_PAIR_1 | int findMinDiff ( int arr [ ], int n ) {
  sort ( arr, arr + n );
  int diff = INT_MAX;
  for ( int i = 0;
  i < n - 1;
  i ++ ) if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [ i + 1 ] - arr [ i ];
  return diff;
}


MINIMUM_NUMBER_PLATFORMS_REQUIRED_RAILWAYBUS_STATION | int findPlatform ( int arr [ ], int dep [ ], int n ) {
  sort ( arr, arr + n );
  sort ( dep, dep + n );
  int plat_needed = 1, result = 1;
  int i = 1, j = 0;
  while ( i < n && j < n ) {
    if ( arr [ i ] <= dep [ j ] ) {
      plat_needed ++;
      i ++;
      if ( plat_needed > result ) result = plat_needed;
    }
    else {
      plat_needed --;
      j ++;
    }
  }
  return result;
}


MULTIPLICATIVE_INVERSE_UNDER_MODULO_M_1 | int modInverse ( int a, int m ) {
  int m0 = m;
  int y = 0, x = 1;
  if ( m == 1 ) return 0;
  while ( a > 1 ) {
    int q = a / m;
    int t = m;
    m = a % m, a = t;
    t = y;
    y = x - q * y;
    x = t;
  }
  if ( x < 0 ) x += m0;
  return x;
}


NUMBER_N_DIGIT_STEPPING_NUMBERS | long long answer ( int n ) {
  int dp [ n + 1 ] [ 10 ];
  if ( n == 1 ) return 10;
  for ( int j = 0;
  j <= 9;
  j ++ ) dp [ 1 ] [ j ] = 1;
  for ( int i = 2;
  i <= n;
  i ++ ) {
    for ( int j = 0;
    j <= 9;
    j ++ ) {
      if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ];
      else if ( j == 9 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ];
      else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ];
    }
  }
  long long sum = 0;
  for ( int j = 1;
  j <= 9;
  j ++ ) sum += dp [ n ] [ j ];
  return sum;
}


CREATE_A_MATRIX_WITH_ALTERNATING_RECTANGLES_OF_0_AND_X | void fill0X ( int m, int n ) {
  int i, k = 0, l = 0;
  int r = m, c = n;
  char a [ m ] [ n ];
  char x = 'X';
  while ( k < m && l < n ) {
    for ( i = l;
    i < n;
    ++ i ) a [ k ] [ i ] = x;
    k ++;
    for ( i = k;
    i < m;
    ++ i ) a [ i ] [ n - 1 ] = x;
    n --;
    if ( k < m ) {
      for ( i = n - 1;
      i >= l;
      -- i ) a [ m - 1 ] [ i ] = x;
      m --;
    }
    if ( l < n ) {
      for ( i = m - 1;
      i >= k;
      -- i ) a [ i ] [ l ] = x;
      l ++;
    }
    x = ( x == '0' ) ? 'X' : '0';
  }
  for ( i = 0;
  i < r;
  i ++ ) {
    for ( int j = 0;
    j < c;
    j ++ ) printf ( "%c ", a [ i ] [ j ] );
    printf ( "\n" );
  }
}


FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY | long long int findSubarraySum ( int arr [ ], int n ) {
  int res = 0;
  unordered_map < int, int > m;
  for ( int i = 0;
  i < n;
  i ++ ) {
    int sum = 0;
    for ( int j = i;
    j < n;
    j ++ ) {
      sum += arr [ j ];
      m [ sum ] ++;
    }
  }
  for ( auto x : m ) if ( x . second == 1 ) res += x . first;
  return res;
}


REVERSE_A_STRING_USING_RECURSION | void reverse ( string str ) {
  if ( str . size ( ) == 0 ) {
    return;
  }
  reverse ( str . substr ( 1 ) );
  cout << str [ 0 ];
}


PRINTING_ITEMS_01_KNAPSACK | void printknapSack ( int W, int wt [ ], int val [ ], int n ) {
  int i, w;
  int K [ n + 1 ] [ W + 1 ];
  for ( i = 0;
  i <= n;
  i ++ ) {
    for ( w = 0;
    w <= W;
    w ++ ) {
      if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0;
      else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ], K [ i - 1 ] [ w ] );
      else K [ i ] [ w ] = K [ i - 1 ] [ w ];
    }
  }
  int res = K [ n ] [ W ];
  printf ( "%d\n", res );
  w = W;
  for ( i = n;
  i > 0 && res > 0;
  i -- ) {
    if ( res == K [ i - 1 ] [ w ] ) continue;
    else {
      printf ( "%d ", wt [ i - 1 ] );
      res = res - val [ i - 1 ];
      w = w - wt [ i - 1 ];
    }
  }
}


FIND_LARGEST_PRIME_FACTOR_NUMBER | long long maxPrimeFactors ( long long n ) {
  long long maxPrime = - 1;
  while ( n % 2 == 0 ) {
    maxPrime = 2;
    n >>= 1;
  }
  for ( int i = 3;
  i <= sqrt ( n );
  i += 2 ) {
    while ( n % i == 0 ) {
      maxPrime = i;
      n = n / i;
    }
  }
  if ( n > 2 ) maxPrime = n;
  return maxPrime;
}


FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_GREATER_THAN_IT | int findElement ( int arr [ ], int n ) {
  int leftMax [ n ];
  leftMax [ 0 ] = INT_MIN;
  for ( int i = 1;
  i < n;
  i ++ ) leftMax [ i ] = max ( leftMax [ i - 1 ], arr [ i - 1 ] );
  int rightMin = INT_MAX;
  for ( int i = n - 1;
  i >= 0;
  i -- ) {
    if ( leftMax [ i ] < arr [ i ] && rightMin > arr [ i ] ) return i;
    rightMin = min ( rightMin, arr [ i ] );
  }
  return - 1;
}


COMMON_CHARACTERS_N_STRINGS | void commonCharacters ( string str [ ], int n ) {
  bool prim [ MAX_CHAR ];
  memset ( prim, true, sizeof ( prim ) );
  for ( int i = 0;
  i < n;
  i ++ ) {
    bool sec [ MAX_CHAR ] = {
      false };
      for ( int j = 0;
      str [ i ] [ j ];
      j ++ ) {
        if ( prim [ str [ i ] [ j ] - 'a' ] ) sec [ str [ i ] [ j ] - 'a' ] = true;
      }
      memcpy ( prim, sec, MAX_CHAR );
    }
    for ( int i = 0;
    i < 26;
    i ++ ) if ( prim [ i ] ) printf ( "%c ", i + 'a' );
  }
  

MINIMAL_MOVES_FORM_STRING_ADDING_CHARACTERS_APPENDING_STRING | int minimalSteps ( string s, int n ) {
  int dp [ n ];
  for ( int i = 0;
  i < n;
  i ++ ) dp [ i ] = INT_MAX;
  string s1 = "", s2 = "";
  dp [ 0 ] = 1;
  s1 += s [ 0 ];
  for ( int i = 1;
  i < n;
  i ++ ) {
    s1 += s [ i ];
    s2 = s . substr ( i + 1, i + 1 );
    dp [ i ] = min ( dp [ i ], dp [ i - 1 ] + 1 );
    if ( s1 == s2 ) dp [ i * 2 + 1 ] = min ( dp [ i ] + 1, dp [ i * 2 + 1 ] );
  }
  return dp [ n - 1 ];
}


SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1 | int findSum ( int n ) {
  int sum = 0;
  for ( int i = 0;
  i < n;
  i ++ ) sum += i * ( n - i );
  return 2 * sum;
}


FIND_FREQUENCY_EVEN_ODD_NUMBERS_MATRIX | void freq ( int ar [ ] [ MAX ], int m, int n ) {
  int even = 0, odd = 0;
  for ( int i = 0;
  i < m;
  ++ i ) {
    for ( int j = 0;
    j < n;
    ++ j ) {
      if ( ( ar [ i ] [ j ] % 2 ) == 0 ) ++ even;
      else ++ odd;
    }
  }
  printf ( " Frequency of odd number = %d \n", odd );
  printf ( " Frequency of even number = %d \n", even );
}


COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS | int countSubarrays ( int arr [ ], int n ) {
  int difference = 0;
  int ans = 0;
  int hash_positive [ n + 1 ], hash_negative [ n + 1 ];
  fill_n ( hash_positive, n + 1, 0 );
  fill_n ( hash_negative, n + 1, 0 );
  hash_positive [ 0 ] = 1;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( arr [ i ] & 1 == 1 ) difference ++;
    else difference --;
    if ( difference < 0 ) {
      ans += hash_negative [ - difference ];
      hash_negative [ - difference ] ++;
    }
    else {
      ans += hash_positive [ difference ];
      hash_positive [ difference ] ++;
    }
  }
  return ans;
}


PASCAL_TRIANGLE_1 | void printPascal ( int n ) {
  for ( int line = 1;
  line <= n;
  line ++ ) {
    int C = 1;
    for ( int i = 1;
    i <= line;
    i ++ ) {
      cout << C << " ";
      C = C * ( line - i ) / i;
    }
    cout << "\n";
  }
}


NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE_COLLINEAR | int countNumberOfTriangles ( int n ) {
  return n * ( n - 1 ) * ( n - 2 ) / 6;
}


MERGE_TWO_SORTED_ARRAYS_O1_EXTRA_SPACE | void merge ( int ar1 [ ], int ar2 [ ], int m, int n ) {
  for ( int i = n - 1;
  i >= 0;
  i -- ) {
    int j, last = ar1 [ m - 1 ];
    for ( j = m - 2;
    j >= 0 && ar1 [ j ] > ar2 [ i ];
    j -- ) ar1 [ j + 1 ] = ar1 [ j ];
    if ( j != m - 2 || last > ar2 [ i ] ) {
      ar1 [ j + 1 ] = ar2 [ i ];
      ar2 [ i ] = last;
    }
  }
}


NEWMAN_SHANKS_WILLIAMS_PRIME | int nswp ( int n ) {
  if ( n == 0 || n == 1 ) return 1;
  return 2 * nswp ( n - 1 ) + nswp ( n - 2 );
}


SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS | int smallest ( int x, int y, int z ) {
  int c = 0;
  while ( x && y && z ) {
    x --;
    y --;
    z --;
    c ++;
  }
  return c;
}


COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X | int countPairs ( int arr1 [ ], int arr2 [ ], int m, int n, int x ) {
  int count = 0;
  for ( int i = 0;
  i < m;
  i ++ ) for ( int j = 0;
  j < n;
  j ++ ) if ( ( arr1 [ i ] + arr2 [ j ] ) == x ) count ++;
  return count;
}


SORT_ARRAY_APPLYING_GIVEN_EQUATION | void sortArray ( int arr [ ], int n, int A, int B, int C ) {
  for ( int i = 0;
  i < n;
  i ++ ) arr [ i ] = A * arr [ i ] * arr [ i ] + B * arr [ i ] + C;
  int index, maximum = INT_MIN;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( maximum < arr [ i ] ) {
      index = i;
      maximum = arr [ i ];
    }
  }
  int i = 0, j = n - 1;
  int new_arr [ n ], k = 0;
  while ( i < index && j > index ) {
    if ( arr [ i ] < arr [ j ] ) new_arr [ k ++ ] = arr [ i ++ ];
    else new_arr [ k ++ ] = arr [ j -- ];
  }
  while ( i < index ) new_arr [ k ++ ] = arr [ i ++ ];
  while ( j > index ) new_arr [ k ++ ] = arr [ j -- ];
  new_arr [ n - 1 ] = maximum;
  for ( int i = 0;
  i < n;
  i ++ ) arr [ i ] = new_arr [ i ];
}


PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON | float findArea ( float a ) {
  float area;
  area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) ) * a * a ) / 4;
  return area;
}


MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY | int maxSum ( int arr [ ], int n ) {
  int sum = 0;
  sort ( arr, arr + n );
  for ( int i = 0;
  i < n / 2;
  i ++ ) {
    sum -= ( 2 * arr [ i ] );
    sum += ( 2 * arr [ n - i - 1 ] );
  }
  return sum;
}


COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES | int countarray ( int n, int k, int x ) {
  int dp [ MAXN ] = {
    0 };
    dp [ 0 ] = 0;
    dp [ 1 ] = 1;
    for ( int i = 2;
    i < n;
    i ++ ) dp [ i ] = ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) * dp [ i - 2 ];
    return ( x == 1 ? ( k - 1 ) * dp [ n - 2 ] : dp [ n - 1 ] );
  }
  

SUM_SERIES_12_32_52_2N_12 | int sumOfSeries ( int n ) {
  int sum = 0;
  for ( int i = 1;
  i <= n;
  i ++ ) sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 );
  return sum;
}


FIND_THE_NEAREST_SMALLER_NUMBERS_ON_LEFT_SIDE_IN_AN_ARRAY_1 | void printPrevSmaller ( int arr [ ], int n ) {
  stack < int > S;
  for ( int i = 0;
  i < n;
  i ++ ) {
    while ( ! S . empty ( ) && S . top ( ) >= arr [ i ] ) S . pop ( );
    if ( S . empty ( ) ) cout << "_, ";
    else cout << S . top ( ) << ", ";
    S . push ( arr [ i ] );
  }
}


FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1 | void CountTriangles ( vector < int > A ) {
  int n = A . size ( );
  sort ( A . begin ( ), A . end ( ) );
  int count = 0;
  for ( int i = n - 1;
  i >= 1;
  i -- ) {
    int l = 0, r = i - 1;
    while ( l < r ) {
      if ( A [ l ] + A [ r ] > A [ i ] ) {
        count += r - l;
        r --;
      }
      else l ++;
    }
  }
  cout << "No of possible solutions: " << count;
}


MAXIMUM_GAMES_PLAYED_WINNER | int maxGameByWinner ( int N ) {
  int dp [ N ];
  dp [ 0 ] = 1;
  dp [ 1 ] = 2;
  int i = 2;
  do {
    dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ];
  }
  while ( dp [ i ++ ] <= N );
  return ( i - 2 );
}


NUMBER_OF_SUBSTRINGS_WITH_ODD_DECIMAL_VALUE_IN_A_BINARY_STRING | int countSubstr ( string s ) {
  int n = s . length ( );
  int auxArr [ n ] = {
    0 };
    if ( s [ 0 ] == '1' ) auxArr [ 0 ] = 1;
    for ( int i = 1;
    i < n;
    i ++ ) {
      if ( s [ i ] == '1' ) auxArr [ i ] = auxArr [ i - 1 ] + 1;
      else auxArr [ i ] = auxArr [ i - 1 ];
    }
    int count = 0;
    for ( int i = n - 1;
    i >= 0;
    i -- ) if ( s [ i ] == '1' ) count += auxArr [ i ];
    return count;
  }
  

ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1 | int countNum ( int arr [ ], int n ) {
  unordered_set < int > s;
  int count = 0, maxm = INT_MIN, minm = INT_MAX;
  for ( int i = 0;
  i < n;
  i ++ ) {
    s . insert ( arr [ i ] );
    if ( arr [ i ] < minm ) minm = arr [ i ];
    if ( arr [ i ] > maxm ) maxm = arr [ i ];
  }
  for ( int i = minm;
  i <= maxm;
  i ++ ) if ( s . find ( arr [ i ] ) == s . end ( ) ) count ++;
  return count;
}


WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1 | float power ( float x, int y ) {
  float temp;
  if ( y == 0 ) return 1;
  temp = power ( x, y / 2 );
  if ( y % 2 == 0 ) return temp * temp;
  else {
    if ( y > 0 ) return x * temp * temp;
    else return ( temp * temp ) / x;
  }
}


N_TH_TERM_SERIES_2_12_36_80_150 | int nthTerm ( int n ) {
  return ( n * n ) + ( n * n * n );
}


FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES | int getOddOccurrence ( int arr [ ], int arr_size ) {
  for ( int i = 0;
  i < arr_size;
  i ++ ) {
    int count = 0;
    for ( int j = 0;
    j < arr_size;
    j ++ ) {
      if ( arr [ i ] == arr [ j ] ) count ++;
    }
    if ( count % 2 != 0 ) return arr [ i ];
  }
  return - 1;
}


EFFICIENT_METHOD_2S_COMPLEMENT_BINARY_STRING | string findTwoscomplement ( string str ) {
  int n = str . length ( );
  int i;
  for ( i = n - 1;
  i >= 0;
  i -- ) if ( str [ i ] == '1' ) break;
  if ( i == - 1 ) return '1' + str;
  for ( int k = i - 1;
  k >= 0;
  k -- ) {
    if ( str [ k ] == '1' ) str [ k ] = '0';
    else str [ k ] = '1';
  }
  return str;
  ;
}


PAPER_CUT_MINIMUM_NUMBER_SQUARES_SET_2 | int minimumSquare ( int m, int n ) {
  int vertical_min = INT_MAX;
  int horizontal_min = INT_MAX;
  if ( m == n ) return 1;
  if ( dp [ m ] [ n ] ) return dp [ m ] [ n ];
  for ( int i = 1;
  i <= m / 2;
  i ++ ) {
    horizontal_min = min ( minimumSquare ( i, n ) + minimumSquare ( m - i, n ), horizontal_min );
  }
  for ( int j = 1;
  j <= n / 2;
  j ++ ) {
    vertical_min = min ( minimumSquare ( m, j ) + minimumSquare ( m, n - j ), vertical_min );
  }
  dp [ m ] [ n ] = min ( vertical_min, horizontal_min );
  return dp [ m ] [ n ];
}


MINIMIZE_ABSOLUTE_DIFFERENCE_SUM_TWO_SUBSETS | void subsetDifference ( int n ) {
  int s = n * ( n + 1 ) / 2;
  if ( n % 4 == 0 ) {
    cout << "First subset sum = " << s / 2;
    cout << "\nSecond subset sum = " << s / 2;
    cout << "\nDifference = " << 0;
  }
  else {
    if ( n % 4 == 1 || n % 4 == 2 ) {
      cout << "First subset sum = " << s / 2;
      cout << "\nSecond subset sum = " << s / 2 + 1;
      cout << "\nDifference = " << 1;
    }
    else {
      cout << "First subset sum = " << s / 2;
      cout << "\nSecond subset sum = " << s / 2;
      cout << "\nDifference = " << 0;
    }
  }
}


PROGRAM_CALCULATE_VOLUME_ELLIPSOID | float volumeOfEllipsoid ( float r1, float r2, float r3 ) {
  float pi = 3.14;
  return 1.33 * pi * r1 * r2 * r3;
}


DYNAMIC_PROGRAMMING_SET_13_CUTTING_A_ROD | int cutRod ( int price [ ], int n ) {
  int val [ n + 1 ];
  val [ 0 ] = 0;
  int i, j;
  for ( i = 1;
  i <= n;
  i ++ ) {
    int max_val = INT_MIN;
    for ( j = 0;
    j < i;
    j ++ ) max_val = max ( max_val, price [ j ] + val [ i - j - 1 ] );
    val [ i ] = max_val;
  }
  return val [ n ];
}


RECURSIVE_INSERTION_SORT | void insertionSortRecursive ( int arr [ ], int n ) {
  if ( n <= 1 ) return;
  insertionSortRecursive ( arr, n - 1 );
  int last = arr [ n - 1 ];
  int j = n - 2;
  while ( j >= 0 && arr [ j ] > last ) {
    arr [ j + 1 ] = arr [ j ];
    j --;
  }
  arr [ j + 1 ] = last;
}


FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT | bool findDuplicateparenthesis ( string str ) {
  stack < char > Stack;
  for ( char ch : str ) {
    if ( ch == ')' ) {
      char top = Stack . top ( );
      Stack . pop ( );
      int elementsInside = 0;
      while ( top != '(' ) {
        elementsInside ++;
        top = Stack . top ( );
        Stack . pop ( );
      }
      if ( elementsInside < 1 ) {
        return 1;
      }
    }
    else Stack . push ( ch );
  }
  return false;
}


FIND_REPETITIVE_ELEMENT_1_N_1 | int findRepeating ( int arr [ ], int n ) {
  return accumulate ( arr, arr + n, 0 ) - ( ( n - 1 ) * n / 2 );
}


CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED | bool areElementsContiguous ( int arr [ ], int n ) {
  int max = * max_element ( arr, arr + n );
  int min = * min_element ( arr, arr + n );
  int m = max - min + 1;
  if ( m > n ) return false;
  bool visited [ m ];
  memset ( visited, false, sizeof ( visited ) );
  for ( int i = 0;
  i < n;
  i ++ ) visited [ arr [ i ] - min ] = true;
  for ( int i = 0;
  i < m;
  i ++ ) if ( visited [ i ] == false ) return false;
  return true;
}


LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1 | int maxLength ( char s [ ], int n ) {
  int invalidOpenBraces = 0;
  int invalidCloseBraces = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( s [ i ] == '(' ) {
      invalidOpenBraces ++;
    }
    else {
      if ( invalidOpenBraces == 0 ) {
        invalidCloseBraces ++;
      }
      else {
        invalidOpenBraces --;
      }
    }
  }
  return ( n - ( invalidOpenBraces + invalidCloseBraces ) );
}


SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1 | int seiresSum ( int n, int a [ ] ) {
  return n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2 * n - 1 ] ) / ( 2 * n - 1 );
}


EQUILIBRIUM_INDEX_OF_AN_ARRAY | int equilibrium ( int arr [ ], int n ) {
  int i, j;
  int leftsum, rightsum;
  for ( i = 0;
  i < n;
  ++ i ) {
    leftsum = 0;
    for ( j = 0;
    j < i;
    j ++ ) leftsum += arr [ j ];
    rightsum = 0;
    for ( j = i + 1;
    j < n;
    j ++ ) rightsum += arr [ j ];
    if ( leftsum == rightsum ) return i;
  }
  return - 1;
}


COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3 | public : int findStep ( int n ) {
  if ( n == 1 || n == 0 ) return 1;
  else if ( n == 2 ) return 2;
  else return findStep ( n - 3 ) + findStep ( n - 2 ) + findStep ( n - 1 );
}


FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE | int minCoins ( int coins [ ], int m, int V ) {
  if ( V == 0 ) return 0;
  int res = INT_MAX;
  for ( int i = 0;
  i < m;
  i ++ ) {
    if ( coins [ i ] <= V ) {
      int sub_res = minCoins ( coins, m, V - coins [ i ] );
      if ( sub_res != INT_MAX && sub_res + 1 < res ) res = sub_res + 1;
    }
  }
  return res;
}


BELL_NUMBERS_NUMBER_OF_WAYS_TO_PARTITION_A_SET | int bellNumber ( int n ) {
  int bell [ n + 1 ] [ n + 1 ];
  bell [ 0 ] [ 0 ] = 1;
  for ( int i = 1;
  i <= n;
  i ++ ) {
    bell [ i ] [ 0 ] = bell [ i - 1 ] [ i - 1 ];
    for ( int j = 1;
    j <= i;
    j ++ ) bell [ i ] [ j ] = bell [ i - 1 ] [ j - 1 ] + bell [ i ] [ j - 1 ];
  }
  return bell [ n ] [ 0 ];
}


FIND_ELEMENT_GIVEN_INDEX_NUMBER_ROTATIONS | int findElement ( int arr [ ], int ranges [ ] [ 2 ], int rotations, int index ) {
  for ( int i = rotations - 1;
  i >= 0;
  i -- ) {
    int left = ranges [ i ] [ 0 ];
    int right = ranges [ i ] [ 1 ];
    if ( left <= index && right >= index ) {
      if ( index == left ) index = right;
      else index --;
    }
  }
  return arr [ index ];
}


DYCK_PATH | int countDyckPaths ( unsigned int n ) {
  int res = 1;
  for ( int i = 0;
  i < n;
  ++ i ) {
    res *= ( 2 * n - i );
    res /= ( i + 1 );
  }
  return res / ( n + 1 );
}


COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE | int numberOfWays ( int x ) {
  if ( x == 0 || x == 1 ) return 1;
  else return numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 );
}


PROGRAM_DISPLAY_ASTROLOGICAL_SIGN_ZODIAC_SIGN_GIVEN_DATE_BIRTH | void zodiac_sign ( int day, string month ) {
  string astro_sign = "";
  if ( month == "december" ) {
    if ( day < 22 ) astro_sign = "Sagittarius";
    else astro_sign = "capricorn";
  }
  else if ( month == "january" ) {
    if ( day < 20 ) astro_sign = "Capricorn";
    else astro_sign = "aquarius";
  }
  else if ( month == "february" ) {
    if ( day < 19 ) astro_sign = "Aquarius";
    else astro_sign = "pisces";
  }
  else if ( month == "march" ) {
    if ( day < 21 ) astro_sign = "Pisces";
    else astro_sign = "aries";
  }
  else if ( month == "april" ) {
    if ( day < 20 ) astro_sign = "Aries";
    else astro_sign = "taurus";
  }
  else if ( month == "may" ) {
    if ( day < 21 ) astro_sign = "Taurus";
    else astro_sign = "gemini";
  }
  else if ( month == "june" ) {
    if ( day < 21 ) astro_sign = "Gemini";
    else astro_sign = "cancer";
  }
  else if ( month == "july" ) {
    if ( day < 23 ) astro_sign = "Cancer";
    else astro_sign = "leo";
  }
  else if ( month == "august" ) {
    if ( day < 23 ) astro_sign = "Leo";
    else astro_sign = "virgo";
  }
  else if ( month == "september" ) {
    if ( day < 23 ) astro_sign = "Virgo";
    else astro_sign = "libra";
  }
  else if ( month == "october" ) {
    if ( day < 23 ) astro_sign = "Libra";
    else astro_sign = "scorpio";
  }
  else if ( month == "november" ) {
    if ( day < 22 ) astro_sign = "scorpio";
    else astro_sign = "sagittarius";
  }
  cout << astro_sign;
}


PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2 | void recursiveReverse ( string & str, int i = 0 ) {
  int n = str . length ( );
  if ( i == n / 2 ) return;
  swap ( str [ i ], str [ n - i - 1 ] );
  recursiveReverse ( str, i + 1 );
}


K_TH_DIGIT_RAISED_POWER_B | int kthdigit ( int a, int b, int k ) {
  int p = pow ( a, b );
  int count = 0;
  while ( p > 0 && count < k ) {
    int rem = p % 10;
    count ++;
    if ( count == k ) return rem;
    p = p / 10;
  }
  return 0;
}


SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS | int findSmallestDifference ( int A [ ], int B [ ], int m, int n ) {
  sort ( A, A + m );
  sort ( B, B + n );
  int a = 0, b = 0;
  int result = INT_MAX;
  while ( a < m && b < n ) {
    if ( abs ( A [ a ] - B [ b ] ) < result ) result = abs ( A [ a ] - B [ b ] );
    if ( A [ a ] < B [ b ] ) a ++;
    else b ++;
  }
  return result;
}


MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY_1 | int findArea ( int arr [ ], int n ) {
  unordered_set < int > s;
  int first = 0, second = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( s . find ( arr [ i ] ) == s . end ( ) ) {
      s . insert ( arr [ i ] );
      continue;
    }
    if ( arr [ i ] > first ) {
      second = first;
      first = arr [ i ];
    }
    else if ( arr [ i ] > second ) second = arr [ i ];
  }
  return ( first * second );
}


PROGRAM_PAGE_REPLACEMENT_ALGORITHMS_SET_2_FIFO | int pageFaults ( int pages [ ], int n, int capacity ) {
  unordered_set < int > s;
  queue < int > indexes;
  int page_faults = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( s . size ( ) < capacity ) {
      if ( s . find ( pages [ i ] ) == s . end ( ) ) {
        s . insert ( pages [ i ] );
        page_faults ++;
        indexes . push ( pages [ i ] );
      }
    }
    else {
      if ( s . find ( pages [ i ] ) == s . end ( ) ) {
        int val = indexes . front ( );
        indexes . pop ( );
        s . erase ( val );
        s . insert ( pages [ i ] );
        indexes . push ( pages [ i ] );
        page_faults ++;
      }
    }
  }
  return page_faults;
}


FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1 | int findFourElements ( int arr [ ], int n ) {
  unordered_map < int, pair < int, int > > mp;
  for ( int i = 0;
  i < n - 1;
  i ++ ) for ( int j = i + 1;
  j < n;
  j ++ ) mp [ arr [ i ] + arr [ j ] ] = {
    i, j };
    int d = INT_MIN;
    for ( int i = 0;
    i < n - 1;
    i ++ ) {
      for ( int j = i + 1;
      j < n;
      j ++ ) {
        int abs_diff = abs ( arr [ i ] - arr [ j ] );
        if ( mp . find ( abs_diff ) != mp . end ( ) ) {
          pair < int, int > p = mp [ abs_diff ];
          if ( p . first != i && p . first != j && p . second != i && p . second != j ) d = max ( d, max ( arr [ i ], arr [ j ] ) );
        }
      }
    }
    return d;
  }
  

PRINT_GIVEN_MATRIX_REVERSE_SPIRAL_FORM | void ReversespiralPrint ( int m, int n, int a [ R ] [ C ] ) {
  long int b [ 100 ];
  int i, k = 0, l = 0;
  int z = 0;
  int size = m * n;
  while ( k < m && l < n ) {
    int val;
    for ( i = l;
    i < n;
    ++ i ) {
      val = a [ k ] [ i ];
      b [ z ] = val;
      ++ z;
    }
    k ++;
    for ( i = k;
    i < m;
    ++ i ) {
      val = a [ i ] [ n - 1 ];
      b [ z ] = val;
      ++ z;
    }
    n --;
    if ( k < m ) {
      for ( i = n - 1;
      i >= l;
      -- i ) {
        val = a [ m - 1 ] [ i ];
        b [ z ] = val;
        ++ z;
      }
      m --;
    }
    if ( l < n ) {
      for ( i = m - 1;
      i >= k;
      -- i ) {
        val = a [ i ] [ l ];
        b [ z ] = val;
        ++ z;
      }
      l ++;
    }
  }
  for ( int i = size - 1;
  i >= 0;
  -- i ) {
    cout << b [ i ] << " ";
  }
}


NUMBER_N_DIGITS_NON_DECREASING_INTEGERS | int nonDecNums ( int n ) {
  int a [ n + 1 ] [ 10 ];
  for ( int i = 0;
  i <= 9;
  i ++ ) a [ 0 ] [ i ] = 1;
  for ( int i = 1;
  i <= n;
  i ++ ) a [ i ] [ 9 ] = 1;
  for ( int i = 1;
  i <= n;
  i ++ ) for ( int j = 8;
  j >= 0;
  j -- ) a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ];
  return a [ n ] [ 0 ];
}


LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF | int findLength ( char * str ) {
  int n = strlen ( str );
  int maxlen = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    for ( int j = i + 1;
    j < n;
    j += 2 ) {
      int length = j - i + 1;
      int leftsum = 0, rightsum = 0;
      for ( int k = 0;
      k < length / 2;
      k ++ ) {
        leftsum += ( str [ i + k ] - '0' );
        rightsum += ( str [ i + k + length / 2 ] - '0' );
      }
      if ( leftsum == rightsum && maxlen < length ) maxlen = length;
    }
  }
  return maxlen;
}


PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT | void worstFit ( int blockSize [ ], int m, int processSize [ ], int n ) {
  int allocation [ n ];
  memset ( allocation, - 1, sizeof ( allocation ) );
  for ( int i = 0;
  i < n;
  i ++ ) {
    int wstIdx = - 1;
    for ( int j = 0;
    j < m;
    j ++ ) {
      if ( blockSize [ j ] >= processSize [ i ] ) {
        if ( wstIdx == - 1 ) wstIdx = j;
        else if ( blockSize [ wstIdx ] < blockSize [ j ] ) wstIdx = j;
      }
    }
    if ( wstIdx != - 1 ) {
      allocation [ i ] = wstIdx;
      blockSize [ wstIdx ] -= processSize [ i ];
    }
  }
  cout << "\nProcess No.\tProcess Size\tBlock no.\n";
  for ( int i = 0;
  i < n;
  i ++ ) {
    cout << "   " << i + 1 << "\t\t" << processSize [ i ] << "\t\t";
    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;
    else cout << "Not Allocated";
    cout << endl;
  }
}


SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS | unsigned long long findSumSubsets ( int n ) {
  return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) );
}


ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS | int Add ( int x, int y ) {
  while ( y != 0 ) {
    int carry = x & y;
    x = x ^ y;
    y = carry << 1;
  }
  return x;
}


MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE | int maxcoefficientvalue ( int n ) {
  int C [ n + 1 ] [ n + 1 ];
  for ( int i = 0;
  i <= n;
  i ++ ) {
    for ( int j = 0;
    j <= min ( i, n );
    j ++ ) {
      if ( j == 0 || j == i ) C [ i ] [ j ] = 1;
      else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ j ];
    }
  }
  int maxvalue = 0;
  for ( int i = 0;
  i <= n;
  i ++ ) maxvalue = max ( maxvalue, C [ n ] [ i ] );
  return maxvalue;
}


EULERIAN_PATH_UNDIRECTED_GRAPH | void findpath ( int graph [ ] [ 5 ], int n ) {
  vector < int > numofadj;
  for ( int i = 0;
  i < n;
  i ++ ) numofadj . push_back ( accumulate ( graph [ i ], graph [ i ] + 5, 0 ) );
  int startpoint = 0, numofodd = 0;
  for ( int i = n - 1;
  i >= 0;
  i -- ) {
    if ( numofadj [ i ] % 2 == 1 ) {
      numofodd ++;
      startpoint = i;
    }
  }
  if ( numofodd > 2 ) {
    cout << "No Solution" << endl;
    return;
  }
  stack < int > stack;
  vector < int > path;
  int cur = startpoint;
  while ( ! stack . empty ( ) or accumulate ( graph [ cur ], graph [ cur ] + 5, 0 ) != 0 ) {
    if ( accumulate ( graph [ cur ], graph [ cur ] + 5, 0 ) == 0 ) {
      path . push_back ( cur );
      cur = stack . top ( );
      stack . pop ( );
    }
    else {
      for ( int i = 0;
      i < n;
      i ++ ) {
        if ( graph [ cur ] [ i ] == 1 ) {
          stack . push ( cur );
          graph [ cur ] [ i ] = 0;
          graph [ i ] [ cur ] = 0;
          cur = i;
          break;
        }
      }
    }
  }
  for ( auto ele : path ) cout << ele << " -> ";
  cout << cur << endl;
}


RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS | int countSubstrs ( string str, int i, int j, int n ) {
  if ( n == 1 ) return 1;
  if ( n <= 0 ) return 0;
  int res = countSubstrs ( str, i + 1, j, n - 1 ) + countSubstrs ( str, i, j - 1, n - 1 ) - countSubstrs ( str, i + 1, j - 1, n - 2 );
  if ( str [ i ] == str [ j ] ) res ++;
  return res;
}


FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1 | int count ( string a, string b ) {
  int m = a . length ( );
  int n = b . length ( );
  int lookup [ m + 1 ] [ n + 1 ] = {
    {
      0 }
    };
    for ( int i = 0;
    i <= n;
    ++ i ) lookup [ 0 ] [ i ] = 0;
    for ( int i = 0;
    i <= m;
    ++ i ) lookup [ i ] [ 0 ] = 1;
    for ( int i = 1;
    i <= m;
    i ++ ) {
      for ( int j = 1;
      j <= n;
      j ++ ) {
        if ( a [ i - 1 ] == b [ j - 1 ] ) lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] + lookup [ i - 1 ] [ j ];
        else lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ];
      }
    }
    return lookup [ m ] [ n ];
  }
  

AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES | double polygonArea ( double X [ ], double Y [ ], int n ) {
  double area = 0.0;
  int j = n - 1;
  for ( int i = 0;
  i < n;
  i ++ ) {
    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] );
    j = i;
  }
  return abs ( area / 2.0 );
}


PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N | void findConsecutive ( int N ) {
  int start = 1, end = ( N + 1 ) / 2;
  while ( start < end ) {
    int sum = 0;
    for ( int i = start;
    i <= end;
    i ++ ) {
      sum = sum + i;
      if ( sum == N ) {
        for ( int j = start;
        j <= i;
        j ++ ) printf ( "%d ", j );
        printf ( "\n" );
        break;
      }
      if ( sum > N ) break;
    }
    sum = 0;
    start ++;
  }
}


BALANCED_EXPRESSIONS_SUCH_THAT_GIVEN_POSITIONS_HAVE_OPENING_BRACKETS | long long arrangeBraces ( int n, int pos [ ], int k ) {
  bool h [ N ];
  int dp [ N ] [ N ];
  memset ( h, 0, sizeof h );
  memset ( dp, 0, sizeof dp );
  for ( int i = 0;
  i < k;
  i ++ ) h [ pos [ i ] ] = 1;
  dp [ 0 ] [ 0 ] = 1;
  for ( int i = 1;
  i <= 2 * n;
  i ++ ) {
    for ( int j = 0;
    j <= 2 * n;
    j ++ ) {
      if ( h [ i ] ) {
        if ( j != 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ];
        else dp [ i ] [ j ] = 0;
      }
      else {
        if ( j != 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ];
        else dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ];
      }
    }
  }
  return dp [ 2 * n ] [ 0 ];
}


GIVEN_1S_2S_3S_KS_PRINT_ZIG_ZAG_WAY | void ZigZag ( int rows, int columns, int numbers [ ] ) {
  int k = 0;
  int arr [ rows ] [ columns ];
  for ( int i = 0;
  i < rows;
  i ++ ) {
    if ( i % 2 == 0 ) {
      for ( int j = 0;
      j < columns and numbers [ k ] > 0;
      j ++ ) {
        arr [ i ] [ j ] = k + 1;
        numbers [ k ] --;
        if ( numbers [ k ] == 0 ) k ++;
      }
    }
    else {
      for ( int j = columns - 1;
      j >= 0 and numbers [ k ] > 0;
      j -- ) {
        arr [ i ] [ j ] = k + 1;
        numbers [ k ] --;
        if ( numbers [ k ] == 0 ) k ++;
      }
    }
  }
  for ( int i = 0;
  i < rows;
  i ++ ) {
    for ( int j = 0;
    j < columns;
    j ++ ) cout << arr [ i ] [ j ] << " ";
    cout << endl;
  }
}


CONVERT_STRING_BINARY_SEQUENCE | void strToBinary ( string s ) {
  int n = s . length ( );
  for ( int i = 0;
  i <= n;
  i ++ ) {
    int val = int ( s [ i ] );
    string bin = "";
    while ( val > 0 ) {
      ( val % 2 ) ? bin . push_back ( '1' ) : bin . push_back ( '0' );
      val /= 2;
    }
    reverse ( bin . begin ( ), bin . end ( ) );
    cout << bin << " ";
  }
}


LUCKY_NUMBERS | int bool isLucky ( int n ) {
  static int counter = 2;
  int next_position = n;
  if ( counter > n ) return 1;
  if ( n % counter == 0 ) return 0;
  next_position -= next_position / counter;
  counter ++;
  return isLucky ( next_position );
}


SMALLEST_SUM_CONTIGUOUS_SUBARRAY | int smallestSumSubarr ( int arr [ ], int n ) {
  int min_ending_here = INT_MAX;
  int min_so_far = INT_MAX;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( min_ending_here > 0 ) min_ending_here = arr [ i ];
    else min_ending_here += arr [ i ];
    min_so_far = min ( min_so_far, min_ending_here );
  }
  return min_so_far;
}


PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE | void sequence ( int n ) {
  int f [ n + 1 ];
  f [ 0 ] = 0;
  f [ 1 ] = 1;
  f [ 2 ] = 1;
  cout << f [ 1 ] << " " << f [ 2 ] << " ";
  for ( int i = 3;
  i <= n;
  i ++ ) {
    f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ];
    cout << f [ i ] << " ";
  }
}


MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES | int fib ( int n ) {
  if ( n <= 1 ) return n;
  return fib ( n - 1 ) + fib ( n - 2 );
}


MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS | int cost ( int a [ ], int n ) {
  return ( n - 1 ) * ( * min_element ( a, a + n ) );
}


CHOCOLATE_DISTRIBUTION_PROBLEM | int findMinDiff ( int arr [ ], int n, int m ) {
  if ( m == 0 || n == 0 ) return 0;
  sort ( arr, arr + n );
  if ( n < m ) return - 1;
  int min_diff = INT_MAX;
  int first = 0, last = 0;
  for ( int i = 0;
  i + m - 1 < n;
  i ++ ) {
    int diff = arr [ i + m - 1 ] - arr [ i ];
    if ( diff < min_diff ) {
      min_diff = diff;
      first = i;
      last = i + m - 1;
    }
  }
  return ( arr [ last ] - arr [ first ] );
}


FIND_ONE_EXTRA_CHARACTER_STRING_1 | char findExtraCharcter ( string strA, string strB ) {
  int res = 0, i;
  for ( i = 0;
  i < strA . length ( );
  i ++ ) {
    res ^= strA [ i ];
  }
  for ( i = 0;
  i < strB . length ( );
  i ++ ) {
    res ^= strB [ i ];
  }
  return ( ( char ) ( res ) );
}


CHECK_WHETHER_TWO_STRINGS_ARE_ANAGRAM_OF_EACH_OTHER | bool areAnagram ( string str1, string str2 ) {
  int n1 = str1 . length ( );
  int n2 = str2 . length ( );
  if ( n1 != n2 ) return false;
  sort ( str1 . begin ( ), str1 . end ( ) );
  sort ( str2 . begin ( ), str2 . end ( ) );
  for ( int i = 0;
  i < n1;
  i ++ ) if ( str1 [ i ] != str2 [ i ] ) return false;
  return true;
}


CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING | int calcMaxValue ( string str ) {
  int res = str [ 0 ] - '0';
  for ( int i = 1;
  i < str . length ( );
  i ++ ) {
    if ( str [ i ] == '0' || str [ i ] == '1' || res < 2 ) res += ( str [ i ] - '0' );
    else res *= ( str [ i ] - '0' );
  }
  return res;
}


FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER | int findSum ( int N, int K ) {
  int ans = 0;
  for ( int i = 1;
  i <= N;
  i ++ ) ans += ( i % K );
  return ans;
}


DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1 | bool checkCount ( int arr [ ], int n, int k ) {
  unordered_map < int, int > hash;
  for ( int i = 0;
  i < n;
  i ++ ) hash [ arr [ i ] ] ++;
  for ( auto x : hash ) if ( x . second > 2 * k ) return false;
  return true;
}


SEARCH_IN_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX | int search ( int mat [ 4 ] [ 4 ], int n, int x ) {
  if ( n == 0 ) return - 1;
  int smallest = a [ 0 ] [ 0 ], largest = a [ n - 1 ] [ n - 1 ];
  if ( x < smallest || x > largest ) return - 1;
  int i = 0, j = n - 1;
  while ( i < n && j >= 0 ) {
    if ( mat [ i ] [ j ] == x ) {
      cout << "n Found at " << i << ", " << j;
      return 1;
    }
    if ( mat [ i ] [ j ] > x ) j --;
    else i ++;
  }
  cout << "n Element not found";
  return 0;
}


RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX | string findLeft ( string str ) {
  int n = str . length ( );
  while ( n -- ) {
    if ( str [ n ] == 'd' ) {
      str [ n ] = 'c';
      break;
    }
    if ( str [ n ] == 'b' ) {
      str [ n ] = 'a';
      break;
    }
    if ( str [ n ] == 'a' ) str [ n ] = 'b';
    else if ( str [ n ] == 'c' ) str [ n ] = 'd';
  }
  return str;
}


SUM_FACTORS_NUMBER | int divSum ( int n ) {
  int result = 0;
  for ( int i = 2;
  i <= sqrt ( n );
  i ++ ) {
    if ( n % i == 0 ) {
      if ( i == ( n / i ) ) result += i;
      else result += ( i + n / i );
    }
  }
  return ( result + n + 1 );
}


HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEMENT_2 | public : int sumDigits ( int no ) {
  return no == 0 ? 0 : no % 10 + sumDigits ( no / 10 );
}


CHECK_POSSIBLE_SORT_ARRAY_CONDITIONAL_SWAPPING_ADJACENT_ALLOWED | bool checkForSorting ( int arr [ ], int n ) {
  for ( int i = 0;
  i < n - 1;
  i ++ ) {
    if ( arr [ i ] > arr [ i + 1 ] ) {
      if ( arr [ i ] - arr [ i + 1 ] == 1 ) swap ( arr [ i ], arr [ i + 1 ] );
      else return false;
    }
  }
  return true;
}


SUPER_PRIME | bool SieveOfEratosthenes ( int n, bool isPrime [ ] ) {
  isPrime [ 0 ] = isPrime [ 1 ] = false;
  for ( int i = 2;
  i <= n;
  i ++ ) isPrime [ i ] = true;
  for ( int p = 2;
  p * p <= n;
  p ++ ) {
    if ( isPrime [ p ] == true ) {
      for ( int i = p * 2;
      i <= n;
      i += p ) isPrime [ i ] = false;
    }
  }
}


PROGRAM_BINARY_DECIMAL_CONVERSION_1 | int binaryToDecimal ( string n ) {
  string num = n;
  int dec_value = 0;
  int base = 1;
  int len = num . length ( );
  for ( int i = len - 1;
  i >= 0;
  i -- ) {
    if ( num [ i ] == '1' ) dec_value += base;
    base = base * 2;
  }
  return dec_value;
}


LEONARDO_NUMBER | int leonardo ( int n ) {
  if ( n == 0 || n == 1 ) return 1;
  return leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1;
}


CHECK_ARRAY_CONTAINS_CONTIGUOUS_INTEGERS_DUPLICATES_ALLOWED_1 | bool areElementsContiguous ( int arr [ ], int n ) {
  unordered_set < int > us;
  for ( int i = 0;
  i < n;
  i ++ ) us . insert ( arr [ i ] );
  int count = 1;
  int curr_ele = arr [ 0 ] - 1;
  while ( us . find ( curr_ele ) != us . end ( ) ) {
    count ++;
    curr_ele --;
  }
  curr_ele = arr [ 0 ] + 1;
  while ( us . find ( curr_ele ) != us . end ( ) ) {
    count ++;
    curr_ele ++;
  }
  return ( count == ( int ) ( us . size ( ) ) );
}


SQUARE_ROOT_OF_AN_INTEGER | int floorSqrt ( int x ) {
  if ( x == 0 || x == 1 ) return x;
  int i = 1, result = 1;
  while ( result <= x ) {
    i ++;
    result = i * i;
  }
  return i - 1;
}


LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_LEAST_K_TIMES | void subsequence ( char s [ ], char t [ ], int n, int k ) {
  int last = 0, cnt = 0, new_last = 0, size = 0;
  for ( char ch = 'z';
  ch >= 'a';
  ch -- ) {
    cnt = 0;
    for ( int i = last;
    i < n;
    i ++ ) {
      if ( s [ i ] == ch ) cnt ++;
    }
    if ( cnt >= k ) {
      for ( int i = last;
      i < n;
      i ++ ) {
        if ( s [ i ] == ch ) {
          t [ size ++ ] = ch;
          new_last = i;
        }
      }
      last = new_last;
    }
  }
  t [ size ] = '\0';
}


RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM | int breakSum ( int n ) {
  if ( n == 0 || n == 1 ) return n;
  return max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 ) + breakSum ( n / 4 ) ), n );
}


MINIMUM_NUMBER_SWAPS_REQUIRED_SORT_ARRAY | int minSwaps ( int arr [ ], int n ) {
  pair < int, int > arrPos [ n ];
  for ( int i = 0;
  i < n;
  i ++ ) {
    arrPos [ i ] . first = arr [ i ];
    arrPos [ i ] . second = i;
  }
  sort ( arrPos, arrPos + n );
  vector < bool > vis ( n, false );
  int ans = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( vis [ i ] || arrPos [ i ] . second == i ) continue;
    int cycle_size = 0;
    int j = i;
    while ( ! vis [ j ] ) {
      vis [ j ] = 1;
      j = arrPos [ j ] . second;
      cycle_size ++;
    }
    if ( cycle_size > 0 ) {
      ans += ( cycle_size - 1 );
    }
  }
  return ans;
}


DIAGONALLY_DOMINANT_MATRIX | bool isDDM ( int m [ N ] [ N ], int n ) {
  for ( int i = 0;
  i < n;
  i ++ ) {
    int sum = 0;
    for ( int j = 0;
    j < n;
    j ++ ) sum += abs ( m [ i ] [ j ] );
    sum -= abs ( m [ i ] [ i ] );
    if ( abs ( m [ i ] [ i ] ) < sum ) return false;
  }
  return true;
}


SPLIT_N_MAXIMUM_COMPOSITE_NUMBERS | int count ( int n ) {
  if ( n < 4 ) return - 1;
  int rem = n % 4;
  if ( rem == 0 ) return n / 4;
  if ( rem == 1 ) {
    if ( n < 9 ) return - 1;
    return ( n - 9 ) / 4 + 1;
  }
  if ( rem == 2 ) return ( n - 6 ) / 4 + 1;
  if ( rem == 3 ) {
    if ( n < 15 ) return - 1;
    return ( n - 15 ) / 4 + 2;
  }
}


FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE | void findDimen ( int H, int A ) {
  if ( H * H < 4 * A ) {
    cout << "Not Possible\n";
    return;
  }
  double apb = sqrt ( H * H + 4 * A );
  double asb = sqrt ( H * H - 4 * A );
  cout . precision ( 2 );
  cout << "P = " << fixed << ( apb - asb ) / 2.0 << "\n";
  cout << "B = " << ( apb + asb ) / 2.0;
}


PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND_1 | int minMaxProduct ( int arr1 [ ], int arr2 [ ], int n1, int n2 ) {
  int max = arr1 [ 0 ];
  int min = arr2 [ 0 ];
  int i;
  for ( i = 1;
  i < n1 && i < n2;
  ++ i ) {
    if ( arr1 [ i ] > max ) max = arr1 [ i ];
    if ( arr2 [ i ] < min ) min = arr2 [ i ];
  }
  while ( i < n1 ) {
    if ( arr1 [ i ] > max ) max = arr1 [ i ];
    i ++;
  }
  while ( i < n2 ) {
    if ( arr2 [ i ] < min ) min = arr2 [ i ];
    i ++;
  }
  return max * min;
}


PROGRAM_CALCULATE_VOLUME_OCTAHEDRON | double vol_of_octahedron ( double side ) {
  return ( ( side * side * side ) * ( sqrt ( 2 ) / 3 ) );
}


SORT_STRING_CHARACTERS_1 | void sortString ( string & str ) {
  int charCount [ MAX_CHAR ] = {
    0 };
    for ( int i = 0;
    i < str . length ( );
    i ++ ) charCount [ str [ i ] - 'a' ] ++;
    for ( int i = 0;
    i < MAX_CHAR;
    i ++ ) for ( int j = 0;
    j < charCount [ i ];
    j ++ ) cout << ( char ) ( 'a' + i );
  }
  

MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL | void moveSpaceInFront ( char str [ ] ) {
  int i = strlen ( str );
  for ( int j = i;
  j >= 0;
  j -- ) if ( str [ j ] != ' ' ) str [ i -- ] = str [ j ];
  while ( i >= 0 ) str [ i -- ] = ' ';
}


MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL | int minOps ( int arr [ ], int n, int k ) {
  int max = * max_element ( arr, arr + n );
  int res = 0;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( ( max - arr [ i ] ) % k != 0 ) return - 1;
    else res += ( max - arr [ i ] ) / k;
  }
  return res;
}


PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1 | unsigned int factorial ( unsigned int n ) {
  int res = 1, i;
  for ( i = 2;
  i <= n;
  i ++ ) res *= i;
  return res;
}


MINIMUM_TIME_TO_FINISH_TASKS_WITHOUT_SKIPPING_TWO_CONSECUTIVE | int minTime ( int arr [ ], int n ) {
  if ( n <= 0 ) return 0;
  int incl = arr [ 0 ];
  int excl = 0;
  for ( int i = 1;
  i < n;
  i ++ ) {
    int incl_new = arr [ i ] + min ( excl, incl );
    int excl_new = incl;
    incl = incl_new;
    excl = excl_new;
  }
  return min ( incl, excl );
}


CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT | bool areEqual ( int arr1 [ ], int arr2 [ ], int n, int m ) {
  if ( n != m ) return false;
  sort ( arr1, arr1 + n );
  sort ( arr2, arr2 + m );
  for ( int i = 0;
  i < n;
  i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return false;
  return true;
}


MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS | int minDifferenceAmongMaxMin ( int arr [ ], int N, int K ) {
  sort ( arr, arr + N );
  int res = INT_MAX;
  for ( int i = 0;
  i <= ( N - K );
  i ++ ) {
    int curSeqDiff = arr [ i + K - 1 ] - arr [ i ];
    res = min ( res, curSeqDiff );
  }
  return res;
}


SWAP_BITS_IN_A_GIVEN_NUMBER | int swapBits ( unsigned int x, unsigned int p1, unsigned int p2, unsigned int n ) {
  unsigned int set1 = ( x >> p1 ) & ( ( 1U << n ) - 1 );
  unsigned int set2 = ( x >> p2 ) & ( ( 1U << n ) - 1 );
  unsigned int Xor = ( set1 ^ set2 );
  Xor = ( Xor << p1 ) | ( Xor << p2 );
  unsigned int result = x ^ Xor;
  return result;
}


COUNT_NUMBER_OF_WAYS_TO_FILL_A_N_X_4_GRID_USING_1_X_4_TILES | int count ( int n ) {
  int dp [ n + 1 ];
  dp [ 0 ] = 0;
  for ( int i = 1;
  i <= n;
  i ++ ) {
    if ( i >= 1 && i <= 3 ) dp [ i ] = 1;
    else if ( i == 4 ) dp [ i ] = 2;
    else dp [ i ] = dp [ i - 1 ] + dp [ i - 4 ];
  }
  return dp [ n ];
}


MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1 | char maxRepeating ( string str ) {
  int n = str . length ( );
  int count = 0;
  char res = str [ 0 ];
  int cur_count = 1;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( i < n - 1 && str [ i ] == str [ i + 1 ] ) cur_count ++;
    else {
      if ( cur_count > count ) {
        count = cur_count;
        res = str [ i ];
      }
      cur_count = 1;
    }
  }
  return res;
}


PASCAL_TRIANGLE | void printPascal ( int n ) {
  int arr [ n ] [ n ];
  for ( int line = 0;
  line < n;
  line ++ ) {
    for ( int i = 0;
    i <= line;
    i ++ ) {
      if ( line == i || i == 0 ) arr [ line ] [ i ] = 1;
      else arr [ line ] [ i ] = arr [ line - 1 ] [ i - 1 ] + arr [ line - 1 ] [ i ];
      cout << arr [ line ] [ i ] << " ";
    }
    cout << "\n";
  }
}


TURN_OFF_THE_RIGHTMOST_SET_BIT | int fun ( unsigned int n ) {
  return n & ( n - 1 );
}


REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE | void rearrange ( int arr [ ], int n ) {
  int max_idx = n - 1, min_idx = 0;
  int max_elem = arr [ n - 1 ] + 1;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( i % 2 == 0 ) {
      arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem;
      max_idx --;
    }
    else {
      arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem;
      min_idx ++;
    }
  }
  for ( int i = 0;
  i < n;
  i ++ ) arr [ i ] = arr [ i ] / max_elem;
}


COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX | int countZeroes ( int mat [ N ] [ N ] ) {
  int row = N - 1, col = 0;
  int count = 0;
  while ( col < N ) {
    while ( mat [ row ] [ col ] ) if ( -- row < 0 ) return count;
    count += ( row + 1 );
    col ++;
  }
  return count;
}


MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOWED_WITH_EVERY_COIN | int minCost ( int coin [ ], int n, int k ) {
  sort ( coin, coin + n );
  int coins_needed = ceil ( 1.0 * n / ( k + 1 ) );
  int ans = 0;
  for ( int i = 0;
  i <= coins_needed - 1;
  i ++ ) ans += coin [ i ];
  return ans;
}


COUNT_SUBARRAYS_TOTAL_DISTINCT_ELEMENTS_ORIGINAL_ARRAY | int countDistictSubarray ( int arr [ ], int n ) {
  unordered_map < int, int > vis;
  for ( int i = 0;
  i < n;
  ++ i ) vis [ arr [ i ] ] = 1;
  int k = vis . size ( );
  vis . clear ( );
  int ans = 0, right = 0, window = 0;
  for ( int left = 0;
  left < n;
  ++ left ) {
    while ( right < n && window < k ) {
      ++ vis [ arr [ right ] ];
      if ( vis [ arr [ right ] ] == 1 ) ++ window;
      ++ right;
    }
    if ( window == k ) ans += ( n - right + 1 );
    -- vis [ arr [ left ] ];
    if ( vis [ arr [ left ] ] == 0 ) -- window;
  }
  return ans;
}


FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT | void possibleOrNot ( long long a1, long long a2, long long b1, long long b2, long long c1, long long c2 ) {
  long long dis1 = pow ( b1 - a1, 2 ) + pow ( b2 - a2, 2 );
  long long dis2 = pow ( c1 - b1, 2 ) + pow ( c2 - b2, 2 );
  if ( dis1 != dis2 ) cout << "No";
  else if ( b1 == ( ( a1 + c1 ) / 2.0 ) && b2 == ( ( a2 + c2 ) / 2.0 ) ) cout << "No";
  else cout << "Yes";
}


TIME_MEET_ANIMALS | void timeToMeet ( double s, double v ) {
  double V = 3 * v / 2;
  double time = s / V;
  cout << time;
}


BRESENHAMS_LINE_GENERATION_ALGORITHM | void bresenham ( int x1, int y1, int x2, int y2 ) {
  int m_new = 2 * ( y2 - y1 );
  int slope_error_new = m_new - ( x2 - x1 );
  for ( int x = x1, y = y1;
  x <= x2;
  x ++ ) {
    cout << "(" << x << "," << y << ")\n";
    slope_error_new += m_new;
    if ( slope_error_new >= 0 ) {
      y ++;
      slope_error_new -= 2 * ( x2 - x1 );
    }
  }
}


MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS | int maxNumOfChocolates ( int arr [ ], int n, int k ) {
  unordered_map < int, int > um;
  int sum [ n ], curr_rem;
  int maxSum = 0;
  sum [ 0 ] = arr [ 0 ];
  for ( int i = 1;
  i < n;
  i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i ];
  for ( int i = 0;
  i < n;
  i ++ ) {
    curr_rem = sum [ i ] % k;
    if ( curr_rem == 0 ) {
      if ( maxSum < sum [ i ] ) maxSum = sum [ i ];
    }
    else if ( um . find ( curr_rem ) == um . end ( ) ) um [ curr_rem ] = i;
    else if ( maxSum < ( sum [ i ] - sum [ um [ curr_rem ] ] ) ) maxSum = sum [ i ] - sum [ um [ curr_rem ] ];
  }
  return ( maxSum / k );
}


CHECK_TWO_STRINGS_K_ANAGRAMS_NOT_1 | bool areKAnagrams ( string str1, string str2, int k ) {
  int n = str1 . length ( );
  if ( str2 . length ( ) != n ) return false;
  int hash_str1 [ MAX_CHAR ] = {
    0 };
    for ( int i = 0;
    i < n;
    i ++ ) hash_str1 [ str1 [ i ] - 'a' ] ++;
    int count = 0;
    for ( int i = 0;
    i < n;
    i ++ ) {
      if ( hash_str1 [ str2 [ i ] - 'a' ] > 0 ) hash_str1 [ str2 [ i ] - 'a' ] --;
      else count ++;
      if ( count > k ) return false;
    }
    return true;
  }
  

DIVISIBILITY_CHECK | void divisibilityCheck ( int arr [ ], int n ) {
  unordered_set < int > s;
  int max_ele = INT_MIN;
  for ( int i = 0;
  i < n;
  i ++ ) {
    s . insert ( arr [ i ] );
    max_ele = max ( max_ele, arr [ i ] );
  }
  unordered_set < int > res;
  for ( int i = 0;
  i < n;
  i ++ ) {
    if ( arr [ i ] != 0 ) {
      for ( int j = arr [ i ] * 2;
      j <= max_ele;
      j += arr [ i ] ) {
        if ( s . find ( j ) != s . end ( ) ) res . insert ( j );
      }
    }
  }
  unordered_map < int, int > mp;
  for ( int i = 0;
  i < n;
  i ++ ) mp [ arr [ i ] ] ++;
  unordered_map < int, int > :: iterator it;
  vector < int > ans;
  for ( it = mp . begin ( );
  it != mp . end ( );
  it ++ ) {
    if ( it -> second >= 2 ) {
      if ( res . find ( it -> first ) == res . end ( ) ) {
        int val = it -> second;
        while ( val -- ) ans . push_back ( it -> first );
      }
    }
    if ( res . find ( it -> first ) != res . end ( ) ) {
      int val = it -> second;
      while ( val -- ) ans . push_back ( it -> first );
    }
  }
  for ( auto x : ans ) cout << x << " ";
}


MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER | int maxPrefix ( char s [ ], char t [ ] ) {
  int count = 0;
  for ( int i = 0;
  i < strlen ( t );
  i ++ ) {
    if ( count == strlen ( s ) ) break;
    if ( t [ i ] == s [ count ] ) count ++;
  }
  return count;
}


COUNT_DISTINCT_ELEMENTS_IN_EVERY_WINDOW_OF_SIZE_K | void countDistinct ( int arr [ ], int k, int n ) {
  map < int, int > hm;
  int dist_count = 0;
  for ( int i = 0;
  i < k;
  i ++ ) {
    if ( hm [ arr [ i ] ] == 0 ) {
      dist_count ++;
    }
    hm [ arr [ i ] ] += 1;
  }
  cout << dist_count << endl;
  for ( int i = k;
  i < n;
  i ++ ) {
    if ( hm [ arr [ i - k ] ] == 1 ) {
      dist_count --;
    }
    hm [ arr [ i - k ] ] -= 1;
    if ( hm [ arr [ i ] ] == 0 ) {
      dist_count ++;
    }
    hm [ arr [ i ] ] += 1;
    cout << dist_count << endl;
  }
}


LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K | int longestSubsequenceCommonSegment ( int k, string s1, string s2 ) {
  int n = s1 . length ( );
  int m = s2 . length ( );
  int lcs [ n + 1 ] [ m + 1 ];
  int cnt [ n + 1 ] [ m + 1 ];
  memset ( lcs, 0, sizeof ( lcs ) );
  memset ( cnt, 0, sizeof ( cnt ) );
  for ( int i = 1;
  i <= n;
  i ++ ) {
    for ( int j = 1;
    j <= m;
    j ++ ) {
      lcs [ i ] [ j ] = max ( lcs [ i - 1 ] [ j ], lcs [ i ] [ j - 1 ] );
      if ( s1 [ i - 1 ] == s2 [ j - 1 ] ) cnt [ i ] [ j ] = cnt [ i - 1 ] [ j - 1 ] + 1;
      if ( cnt [ i ] [ j ] >= k ) {
        for ( int a = k;
        a <= cnt [ i ] [ j ];
        a ++ ) lcs [ i ] [ j ] = max ( lcs [ i ] [ j ], lcs [ i - a ] [ j - a ] + a );
      }
    }
  }
  return lcs [ n ] [ m ];
}


PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1 | void printDistinct ( int arr [ ], int n ) {
  sort ( arr, arr + n );
  for ( int i = 0;
  i < n;
  i ++ ) {
    while ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) i ++;
    cout << arr [ i ] << " ";
  }
}


PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES | bool isPrime ( int p ) {
  long long checkNumber = pow ( 2, p ) - 1;
  long long nextval = 4 % checkNumber;
  for ( int i = 1;
  i < p - 1;
  i ++ ) nextval = ( nextval * nextval - 2 ) % checkNumber;
  return ( nextval == 0 );
}


KTH_NON_REPEATING_CHARACTER | int kthNonRepeating ( string str, int k ) {
  int n = str . length ( );
  int count [ MAX_CHAR ];
  int index [ MAX_CHAR ];
  for ( int i = 0;
  i < MAX_CHAR;
  i ++ ) {
    count [ i ] = 0;
    index [ i ] = n;
  }
  for ( int i = 0;
  i < n;
  i ++ ) {
    char x = str [ i ];
    ++ count [ x ];
    if ( count [ x ] == 1 ) index [ x ] = i;
    if ( count [ x ] == 2 ) index [ x ] = n;
  }
  sort ( index, index + MAX_CHAR );
  return ( index [ k - 1 ] != n ) ? index [ k - 1 ] : - 1;
}


FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE | char first ( string str ) {
  for ( int i = 0;
  i < str . length ( );
  i ++ ) if ( isupper ( str [ i ] ) ) return str [ i ];
  return 0;
}


GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND | bool isSubSequence ( char str1 [ ], char str2 [ ], int m, int n ) {
  if ( m == 0 ) return true;
  if ( n == 0 ) return false;
  if ( str1 [ m - 1 ] == str2 [ n - 1 ] ) return isSubSequence ( str1, str2, m - 1, n - 1 );
  return isSubSequence ( str1, str2, m, n - 1 );
}


C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1 | int largest ( int arr [ ], int n ) {
  return * max_element ( arr, arr + n );
}


DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY | int findDiff ( int arr [ ], int n ) {
  sort ( arr, arr + n );
  int count = 0, max_count = 0, min_count = n;
  for ( int i = 0;
  i < ( n - 1 );
  i ++ ) {
    if ( arr [ i ] == arr [ i + 1 ] ) {
      count += 1;
      continue;
    }
    else {
      max_count = max ( max_count, count );
      min_count = min ( min_count, count );
      count = 0;
    }
  }
  return ( max_count - min_count );
}


PROGRAM_FOR_FACTORIAL_OF_A_NUMBER | unsigned int factorial ( unsigned int n ) {
  if ( n == 0 ) return 1;
  return n * factorial ( n - 1 );
}


